%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1507.m00.i125.n001.P.c25.279329759 Soccer uniform or football uniform of national teams.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 7/3/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1506.m00.i125.n069.S.c12.238725433 America flag vintage denim typography</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-07-03T16:09:59+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-07-03T16:09:59+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-07-03T16:09:59+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUPeahZ&#xA;Wac7qZYlPSvU/IDc5iavXYdPHiyyER+OQ5ltxYZzNRFsO82efLyHSbttBirdxxlo5ZVr9nc8U7mn&#xA;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&#xA;V2KuxV2KuxV2KuxV2KuxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:a97cdb53-8ea3-f642-8c3e-ac1e084be676</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:a97cdb53-8ea3-f642-8c3e-ac1e084be676</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:e1cb1970-c9a3-7e4d-80e2-8e63a079c383</stRef:instanceID>
            <stRef:documentID>xmp.did:e1cb1970-c9a3-7e4d-80e2-8e63a079c383</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:aff6bf30-cc43-d448-a6bd-3eb49aad843a</stEvt:instanceID>
                  <stEvt:when>2015-06-26T18:07:44+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:aab20a66-c3a5-d743-ac57-1f166d5a682d</stEvt:instanceID>
                  <stEvt:when>2015-06-28T17:00:50+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a97cdb53-8ea3-f642-8c3e-ac1e084be676</stEvt:instanceID>
                  <stEvt:when>2015-07-03T16:09:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
74.2691 50.8426 mo
55.4985 50.8426 li
55.4985 32.5914 li
74.2691 32.5914 li
74.2691 50.8426 li
cp
.87451 .517647 .00784314 rgb
f
55.4985 32.5914 mo
55.4985 34.6137 li
74.269 34.6137 li
74.269 32.5914 li
55.4985 32.5914 li
cp
.00784314 .207843 .0470588 rgb
f
32.3559 44.0496 mo
32.3559 44.0496 24.1845 58.6095 20.6188 69.6037 cv
21.5102 72.278 29.6816 77.7751 37.7044 77.1808 cv
40.3787 69.9009 42.6072 66.7809 42.6072 66.7809 cv
42.6072 66.7809 43.2015 47.7639 32.3559 44.0496 cv
cp
.984314 .752941 .00784314 rgb
f
97.2867 44.0496 mo
97.2867 44.0496 105.458 58.6095 109.024 69.6037 cv
108.132 72.278 99.9609 77.7751 91.9381 77.1808 cv
89.2639 69.9009 87.0353 66.7809 87.0353 66.7809 cv
87.0353 66.7809 86.441 47.7639 97.2867 44.0496 cv
cp
f
88.1581 56.5645 mo
86.8894 61.8772 87.0354 66.7808 87.0354 66.7808 cv
87.0354 66.7808 89.2639 69.9009 91.9381 77.1808 cv
93.8591 77.3231 95.7864 77.1094 97.6225 76.6755 cv
92.7678 63.4646 88.6727 57.3122 88.1581 56.5645 cv
cp
.976471 .658824 .0235294 rgb
f
41.4771 56.5364 mo
41.1012 57.0764 36.947 63.1958 31.9951 76.6703 cv
33.8386 77.1081 35.7747 77.3237 37.7044 77.1808 cv
40.3787 69.9009 42.6072 66.7808 42.6072 66.7808 cv
42.6072 66.7808 42.753 61.8598 41.4771 56.5364 cv
cp
f
85.104 37.8096 mo
78.7154 35.4326 75.2983 32.6097 74.1097 32.6097 cv
74.1097 32.6097 74.5354 40.0678 64.8213 47.2946 cv
55.1073 40.0678 55.5329 32.6097 55.5329 32.6097 cv
54.3443 32.6097 50.9272 35.4326 44.5387 37.8096 cv
38.1501 40.1868 33.9901 41.6725 32.3559 44.0495 cv
34.5844 45.8325 41.7158 49.8438 41.7158 68.118 cv
41.7158 86.3921 41.7158 122.346 41.7158 122.346 cv
41.7158 122.346 51.67 125.318 64.7442 125.318 cv
78.5612 125.318 87.9267 122.346 87.9267 122.346 cv
87.9267 122.346 87.9267 86.3921 87.9267 68.118 cv
87.9267 49.8438 95.0581 45.8325 97.2867 44.0495 cv
95.6524 41.6725 91.4924 40.1868 85.104 37.8096 cv
cp
.984314 .752941 .00784314 rgb
f
21.7316 66.4565 mo
21.3311 67.5249 20.9501 68.5824 20.6189 69.6037 cv
21.5102 72.2779 29.6816 77.7751 37.7044 77.1808 cv
38.0993 76.1061 38.479 75.1497 38.8486 74.2529 cv
32.2399 74.4875 24.0811 69.4359 21.7316 66.4565 cv
cp
.0784314 .545098 .278431 rgb
f
107.981 66.6438 mo
105.657 69.5805 97.4286 74.4977 90.7942 74.2537 cv
91.1637 75.1503 91.5434 76.1065 91.9381 77.1808 cv
99.961 77.7751 108.132 72.2779 109.024 69.6037 cv
108.712 68.6421 108.355 67.6479 107.981 66.6438 cv
cp
f
76.5158 33.6785 mo
75.3596 33.0307 74.5662 32.6096 74.1096 32.6096 cv
74.1096 32.6096 74.5353 40.0678 64.8213 47.2945 cv
55.1072 40.0678 55.5328 32.6096 55.5328 32.6096 cv
55.0764 32.6096 54.283 33.0306 53.1268 33.6783 cv
53.5495 36.6315 55.3959 43.0032 63.2779 49.4455 cv
63.2779 52.6387 li
66.3484 52.6387 li
66.3484 49.4583 li
74.2436 43.0116 76.0926 36.6337 76.5158 33.6785 cv
cp
f
73.4971 56.441 mo
72.2438 56.441 76.5853 53.9345 77.8385 53.9345 cv
79.0918 53.9345 83.4333 56.441 82.18 56.441 cv
80.867 56.441 82.6629 60.2976 82.18 61.4541 cv
81.6971 62.6106 77.8385 63.9606 77.8385 63.9606 cv
77.8385 63.9606 73.9949 62.6043 73.4971 61.4541 cv
72.9993 60.3039 74.6725 56.441 73.4971 56.441 cv
cp
.145098 .270588 .576471 rgb
f
77.8405 63.5728 mo
75.9107 62.8565 74.0454 61.8454 73.8335 61.3856 cv
73.7068 61.0628 73.9457 59.8349 74.0886 59.1015 cv
74.3501 57.7572 74.5624 56.6663 74.1761 55.9379 cv
75.2458 55.245 77.2414 54.2704 77.8392 54.2704 cv
78.4302 54.2704 80.3893 55.2238 81.4671 55.9149 cv
81.0204 56.6835 81.2701 57.8609 81.5559 59.2088 cv
81.7051 59.9102 81.954 61.0845 81.8395 61.3987 cv
81.6294 61.8576 79.7676 62.8637 77.8405 63.5728 cv
cp
.984314 .752941 .00784314 rgb
f
77.8414 63.0801 mo
75.9071 62.3449 74.429 61.474 74.2478 61.1828 cv
74.1986 60.9497 74.4569 59.6248 74.5417 59.1898 cv
74.7824 57.9533 74.9794 56.9391 74.7463 56.1263 cv
75.9188 55.4204 77.4794 54.732 77.8392 54.732 cv
78.193 54.732 79.7005 55.3906 80.8851 56.0979 cv
80.6084 56.9665 80.841 58.0629 81.1042 59.3039 cv
81.1926 59.7195 81.4608 60.9808 81.4013 61.2553 cv
81.2426 61.4893 79.769 62.3535 77.8414 63.0801 cv
cp
.145098 .270588 .576471 rgb
f
78.6645 63.0944 mo
76.9094 63.0944 li
76.9094 54.6802 li
78.6645 54.6802 li
78.6645 63.0944 li
cp
.984314 .752941 .00784314 rgb
f
77.3223 62.6815 mo
77.3223 55.0932 li
78.2515 55.0932 li
78.2515 62.6815 li
77.3223 62.6815 li
cp
.0784314 .545098 .278431 rgb
f
74.2767 59.7649 mo
74.2767 58.0098 li
81.2971 58.0098 li
81.2971 59.7649 li
74.2767 59.7649 li
cp
.984314 .752941 .00784314 rgb
f
74.6897 59.3519 mo
74.6897 58.4227 li
80.8842 58.4227 li
80.8842 59.3519 li
74.6897 59.3519 li
cp
.0784314 .545098 .278431 rgb
f
79.7485 61.0296 mo
75.7737 61.0296 li
75.7737 57.0548 li
79.7485 57.0548 li
79.7485 61.0296 li
cp
1 1 1 rgb
f
78.2617 76.4124 mo
77.7495 91.2721 76.9789 113.633 76.6014 124.581 cv
83.6388 123.701 87.9267 122.346 87.9267 122.346 cv
87.9267 122.346 87.9267 86.3921 87.9267 68.118 cv
87.9267 61.2526 88.9335 56.4013 90.3085 52.924 cv
84.4923 57.3539 78.6737 64.4614 78.2617 76.4124 cv
cp
.976471 .658824 .0235294 rgb
f
53.0401 124.553 mo
52.6624 113.594 51.8926 91.2592 51.3808 76.4124 cv
50.9688 64.4613 45.1503 57.3539 39.3339 52.924 cv
40.7089 56.4015 41.7157 61.2525 41.7157 68.118 cv
41.7157 86.3921 41.7157 122.346 41.7157 122.346 cv
41.7157 122.346 46.1807 123.673 53.0401 124.553 cv
cp
f
181.652 50.8426 mo
162.881 50.8426 li
162.881 32.5914 li
181.652 32.5914 li
181.652 50.8426 li
cp
.752941 .835294 .866667 rgb
f
175.754 50.8426 mo
168.236 50.8426 li
168.236 32.5914 li
175.754 32.5914 li
175.754 50.8426 li
cp
.164706 .439216 .576471 rgb
f
162.881 32.5914 mo
162.881 34.6137 li
181.652 34.6137 li
181.652 32.5914 li
162.881 32.5914 li
cp
0 .223529 .309804 rgb
f
139.739 44.0496 mo
139.739 44.0496 131.567 58.6095 128.002 69.6037 cv
128.893 72.278 137.064 77.7752 145.087 77.1808 cv
147.761 69.9009 149.99 66.7809 149.99 66.7809 cv
149.99 66.7809 150.584 47.7639 139.739 44.0496 cv
.929412 .972549 .976471 rgb
f
204.67 44.0496 mo
204.67 44.0496 212.841 58.6095 216.407 69.6037 cv
215.515 72.278 207.344 77.7752 199.321 77.1808 cv
196.647 69.9009 194.418 66.7809 194.418 66.7809 cv
194.418 66.7809 193.824 47.7639 204.67 44.0496 cv
f
200.52 77.2246 mo
200.121 77.2246 199.721 77.2104 199.321 77.1808 cv
199.321 77.1808 li
199.3 77.1239 199.279 77.0673 199.258 77.0109 cv
197.64 72.6337 196.191 69.7846 195.31 68.2315 cv
195.31 68.1934 195.31 68.1559 195.31 68.118 cv
195.31 65.6028 195.445 63.3585 195.683 61.3524 cv
195.684 61.3503 195.684 61.3484 195.684 61.3464 cv
195.687 61.3215 195.69 61.2958 195.693 61.271 cv
195.694 61.2636 195.695 61.2566 195.696 61.2493 cv
195.696 61.2449 195.697 61.2412 195.697 61.2367 cv
195.852 59.9673 196.048 58.7937 196.278 57.7087 cv
197.756 60.1123 201.14 66.1562 205.005 76.6756 cv
203.551 77.0191 202.04 77.2246 200.52 77.2246 cv
.745098 .823529 .843137 rgb
f
145.012 77.1862 mo
145.037 77.1845 145.062 77.1826 145.087 77.1808 cv
145.913 74.9334 146.696 73.0827 147.384 71.5976 cv
146.696 73.0827 145.913 74.9334 145.087 77.1808 cv
145.062 77.1827 145.037 77.1845 145.012 77.1862 cv
.898039 .921569 .929412 rgb
f
143.886 77.2246 mo
142.358 77.2246 140.839 77.0173 139.378 76.6703 cv
143.266 66.0916 146.661 60.0465 148.123 57.6754 cv
148.652 60.1605 149.004 63.1092 149.082 66.6198 cv
149.082 66.6219 149.082 66.6238 149.082 66.6259 cv
149.083 66.6612 149.084 66.6962 149.085 66.7316 cv
149.085 66.7348 149.085 66.7369 149.085 66.7401 cv
149.085 66.7497 149.085 66.7603 149.085 66.7699 cv
149.085 66.7753 149.086 66.7807 149.086 66.7861 cv
149.086 66.7954 149.086 66.8046 149.086 66.8139 cv
149.086 66.8193 149.086 66.8258 149.086 66.8312 cv
149.087 66.8465 149.087 66.8619 149.087 66.8772 cv
149.087 66.8847 149.088 66.89 149.088 66.8975 cv
149.088 66.9056 149.088 66.9142 149.088 66.9223 cv
149.088 66.9298 149.088 66.936 149.089 66.9436 cv
149.089 66.9517 149.089 66.9601 149.089 66.9682 cv
149.089 66.9757 149.089 66.985 149.089 66.9925 cv
149.09 67.0059 149.09 67.0188 149.09 67.0322 cv
149.09 67.0398 149.09 67.0451 149.09 67.0527 cv
149.09 67.0612 149.091 67.0691 149.091 67.0776 cv
149.091 67.0852 149.091 67.0923 149.091 67.0999 cv
149.091 67.108 149.091 67.1157 149.091 67.1238 cv
149.092 67.1346 149.092 67.1459 149.092 67.1567 cv
149.092 67.1648 149.092 67.1737 149.092 67.1818 cv
149.092 67.1916 149.092 67.2007 149.093 67.2105 cv
149.093 67.2178 149.093 67.2257 149.093 67.233 cv
149.093 67.2406 149.093 67.2487 149.093 67.2563 cv
149.093 67.2641 149.093 67.2722 149.093 67.2799 cv
149.094 67.2952 149.094 67.3075 149.094 67.3228 cv
149.094 67.326 149.094 67.3287 149.094 67.3319 cv
149.094 67.345 149.094 67.3559 149.095 67.369 cv
149.095 67.3747 149.095 67.3813 149.095 67.3871 cv
149.095 67.398 149.095 67.4085 149.095 67.4194 cv
149.095 67.4239 149.095 67.4292 149.095 67.4337 cv
149.095 67.4501 149.095 67.4647 149.096 67.4812 cv
149.096 67.4816 149.096 67.4824 149.096 67.4828 cv
149.096 67.4992 149.096 67.5127 149.096 67.5291 cv
149.096 67.5332 149.096 67.5375 149.096 67.5416 cv
149.096 67.5537 149.096 67.5659 149.096 67.578 cv
149.096 67.5825 149.097 67.5869 149.097 67.5915 cv
149.097 67.6233 149.097 67.654 149.097 67.6859 cv
149.097 67.6913 149.097 67.6965 149.097 67.7019 cv
149.097 67.7129 149.097 67.7258 149.098 67.7368 cv
149.098 67.7414 149.098 67.7454 149.098 67.75 cv
149.098 67.782 149.098 67.8138 149.098 67.8459 cv
149.098 67.8504 149.098 67.8558 149.098 67.8604 cv
149.098 67.8715 149.098 67.883 149.098 67.8941 cv
149.098 67.9 149.098 67.9047 149.098 67.9106 cv
149.098 67.9416 149.098 67.974 149.098 68.0052 cv
149.098 68.0102 149.098 68.0153 149.098 68.0203 cv
149.099 68.0314 149.099 68.0445 149.099 68.0557 cv
149.099 68.0607 149.099 68.0649 149.099 68.07 cv
149.099 68.0856 149.099 68.1024 149.099 68.118 cv
149.099 68.118 li
149.099 68.1559 149.099 68.1934 149.099 68.2315 cv
148.654 69.0143 148.066 70.1266 147.384 71.5976 cv
146.696 73.0827 145.913 74.9334 145.087 77.1808 cv
145.062 77.1826 145.037 77.1845 145.012 77.1862 cv
144.636 77.2122 144.261 77.2246 143.886 77.2246 cv
.835294 .898039 .909804 rgb
f
192.487 37.8095 mo
186.098 35.4326 182.681 32.6097 181.492 32.6097 cv
181.492 32.6097 181.918 40.0678 172.204 47.2946 cv
162.49 40.0678 162.916 32.6097 162.916 32.6097 cv
161.727 32.6097 158.31 35.4326 151.922 37.8095 cv
145.533 40.1867 141.373 41.6725 139.739 44.0495 cv
141.967 45.8325 149.099 49.8438 149.099 68.118 cv
149.099 86.3921 149.099 122.346 149.099 122.346 cv
149.099 122.346 159.053 125.318 172.127 125.318 cv
185.944 125.318 195.31 122.346 195.31 122.346 cv
195.31 122.346 195.31 86.3921 195.31 68.118 cv
195.31 49.8438 202.441 45.8325 204.67 44.0495 cv
203.035 41.6725 198.875 40.1867 192.487 37.8095 cv
.929412 .972549 .976471 rgb
f
152.589 123.209 mo
154.639 123.658 157.489 124.197 160.929 124.62 cv
160.929 33.4492 li
159.193 34.4057 156.473 36.0277 152.589 37.5415 cv
152.589 123.209 li
.439216 .658824 .85098 rgb
f
176.208 125.224 mo
176.208 43.737 li
175.11 44.9069 173.806 46.1025 172.204 47.2945 cv
170.444 45.9849 169.025 44.6687 167.868 43.3896 cv
167.868 125.21 li
169.245 125.276 170.663 125.318 172.127 125.318 cv
173.54 125.318 174.893 125.28 176.208 125.224 cv
cp
f
191.486 37.4082 mo
187.529 35.8309 184.813 34.1624 183.147 33.2687 cv
183.147 124.681 li
186.588 124.283 189.424 123.764 191.486 123.314 cv
191.486 37.4082 li
f
129.114 66.4565 mo
128.714 67.5249 128.333 68.5824 128.002 69.6037 cv
128.893 72.2779 137.064 77.7751 145.087 77.1808 cv
145.482 76.1061 145.862 75.1497 146.231 74.2529 cv
139.623 74.4875 131.464 69.4359 129.114 66.4565 cv
cp
0 .223529 .309804 rgb
f
215.364 66.6438 mo
213.04 69.5805 204.811 74.4977 198.177 74.2537 cv
198.547 75.1503 198.926 76.1065 199.321 77.1808 cv
207.344 77.7751 215.515 72.2779 216.406 69.6037 cv
216.095 68.6421 215.738 67.6479 215.364 66.6438 cv
cp
f
170.64 49.3941 mo
172.201 50.6083 li
173.767 49.3941 li
181.404 42.9694 183.201 36.6238 183.613 33.6785 cv
182.485 33.0307 181.711 32.6096 181.265 32.6096 cv
181.265 32.6096 181.681 40.0678 172.204 47.2945 cv
162.728 40.0678 163.143 32.6096 163.143 32.6096 cv
162.697 32.6096 161.923 33.0306 160.796 33.6783 cv
161.207 36.6237 163.002 42.9691 170.64 49.3941 cv
cp
f
183.984 124.581 mo
183.984 124.581 li
184.979 124.456 185.919 124.323 186.799 124.185 cv
185.919 124.323 184.979 124.457 183.984 124.581 cv
.835294 .898039 .909804 rgb
f
195.683 61.3524 mo
195.684 61.3506 195.684 61.3482 195.684 61.3464 cv
195.684 61.3484 195.684 61.3503 195.683 61.3524 cv
195.693 61.271 mo
195.694 61.2639 195.695 61.2564 195.696 61.2493 cv
195.695 61.2566 195.694 61.2636 195.693 61.271 cv
.670588 .760784 .788235 rgb
f
196.278 57.7087 mo
196.277 57.7085 li
196.665 55.8753 197.15 54.293 197.691 52.9245 cv
197.691 52.9242 197.691 52.9242 197.691 52.9239 cv
197.15 54.2929 196.666 55.8748 196.278 57.7087 cv
.835294 .898039 .909804 rgb
f
195.697 61.2367 mo
195.852 59.9668 196.048 58.7938 196.277 57.7085 cv
196.278 57.7087 li
196.048 58.7937 195.852 59.9673 195.697 61.2367 cv
.670588 .760784 .788235 rgb
f
191.486 123.314 mo
191.486 59.0797 li
193.37 56.5846 195.53 54.5699 197.691 52.9245 cv
197.15 54.293 196.665 55.8753 196.277 57.7085 cv
196.048 58.7938 195.852 59.9668 195.697 61.2367 cv
195.697 61.2411 195.696 61.245 195.696 61.2493 cv
195.695 61.2564 195.694 61.2639 195.693 61.271 cv
195.69 61.296 195.687 61.3214 195.684 61.3464 cv
195.684 61.3482 195.684 61.3506 195.683 61.3524 cv
195.445 63.3583 195.31 65.603 195.31 68.118 cv
195.31 86.3921 195.31 122.346 195.31 122.346 cv
195.31 122.346 193.943 122.778 191.486 123.313 cv
.835294 .898039 .909804 rgb
f
183.984 124.581 mo
184.362 113.633 185.132 91.2721 185.645 76.4124 cv
185.904 68.9007 188.299 63.3022 191.486 59.0797 cv
191.486 123.314 li
190.207 123.591 188.631 123.897 186.799 124.185 cv
185.919 124.323 184.979 124.456 183.984 124.58 cv
.396078 .615686 .796078 rgb
f
148.123 57.6754 mo
147.736 55.8557 147.255 54.2847 146.717 52.9239 cv
146.717 52.9242 146.717 52.9245 146.718 52.9248 cv
147.255 54.2848 147.737 55.8563 148.124 57.675 cv
148.123 57.6754 li
.835294 .898039 .909804 rgb
f
149.099 68.07 mo
149.099 68.0649 149.099 68.0607 149.099 68.0557 cv
149.099 68.0612 149.099 68.0644 149.099 68.07 cv
149.098 68.0203 mo
149.098 68.0153 149.098 68.0102 149.098 68.0052 cv
149.098 68.0107 149.098 68.0148 149.098 68.0203 cv
149.098 67.9106 mo
149.098 67.9047 149.098 67.9 149.098 67.8941 cv
149.098 67.8997 149.098 67.905 149.098 67.9106 cv
149.098 67.8604 mo
149.098 67.8558 149.098 67.8504 149.098 67.8459 cv
149.098 67.8514 149.098 67.8549 149.098 67.8604 cv
149.098 67.75 mo
149.098 67.7454 149.098 67.7414 149.098 67.7368 cv
149.098 67.7412 149.098 67.7456 149.098 67.75 cv
149.097 67.7019 mo
149.097 67.6965 149.097 67.6913 149.097 67.6859 cv
149.097 67.6914 149.097 67.6964 149.097 67.7019 cv
149.097 67.5915 mo
149.097 67.5869 149.096 67.5825 149.096 67.578 cv
149.096 67.5824 149.097 67.5871 149.097 67.5915 cv
149.096 67.5416 mo
149.096 67.5375 149.096 67.5332 149.096 67.5291 cv
149.096 67.5324 149.096 67.5383 149.096 67.5416 cv
149.096 67.4828 mo
149.096 67.4824 149.096 67.4816 149.096 67.4812 cv
149.096 67.4828 li
149.095 67.4337 mo
149.095 67.4292 149.095 67.4239 149.095 67.4194 cv
149.095 67.4238 149.095 67.4293 149.095 67.4337 cv
149.095 67.3871 mo
149.095 67.3813 149.095 67.3747 149.095 67.369 cv
149.095 67.3744 149.095 67.3816 149.095 67.3871 cv
149.094 67.3319 mo
149.094 67.3287 149.094 67.326 149.094 67.3228 cv
149.094 67.3249 149.094 67.3298 149.094 67.3319 cv
149.093 67.2799 mo
149.093 67.2722 149.093 67.2641 149.093 67.2563 cv
149.093 67.2639 149.093 67.2723 149.093 67.2799 cv
149.093 67.233 mo
149.093 67.2257 149.093 67.2178 149.093 67.2105 cv
149.093 67.2181 149.093 67.2254 149.093 67.233 cv
149.092 67.1818 mo
149.092 67.1737 149.092 67.1648 149.092 67.1567 cv
149.092 67.1643 149.092 67.1742 149.092 67.1818 cv
149.091 67.1238 mo
149.091 67.1157 149.091 67.108 149.091 67.0999 cv
149.091 67.1086 149.091 67.1151 149.091 67.1238 cv
149.091 67.0776 mo
149.091 67.0691 149.09 67.0612 149.09 67.0527 cv
149.09 67.0603 149.091 67.07 149.091 67.0776 cv
149.09 67.0322 mo
149.09 67.0188 149.09 67.0059 149.089 66.9925 cv
149.09 67.0055 149.09 67.0193 149.09 67.0322 cv
149.089 66.9682 mo
149.089 66.9601 149.089 66.9517 149.089 66.9436 cv
149.089 66.9522 149.089 66.9596 149.089 66.9682 cv
149.088 66.9223 mo
149.088 66.9142 149.088 66.9056 149.088 66.8975 cv
149.088 66.9051 149.088 66.9147 149.088 66.9223 cv
149.087 66.8772 mo
149.087 66.8619 149.087 66.8465 149.086 66.8312 cv
149.087 66.8462 149.087 66.8622 149.087 66.8772 cv
149.086 66.8139 mo
149.086 66.8046 149.086 66.7954 149.086 66.7861 cv
149.086 66.7957 149.086 66.8042 149.086 66.8139 cv
149.085 66.7699 mo
149.085 66.7603 149.085 66.7497 149.085 66.7401 cv
149.085 66.7497 149.085 66.7603 149.085 66.7699 cv
149.085 66.7316 mo
149.084 66.6962 149.083 66.6612 149.082 66.6259 cv
149.083 66.6611 149.084 66.6963 149.085 66.7316 cv
149.082 66.6198 mo
149.004 63.1092 148.652 60.1605 148.123 57.6754 cv
148.124 57.675 li
148.652 60.1602 149.004 63.1095 149.082 66.6198 cv
.74902 .827451 .847059 rgb
f
152.589 123.208 mo
150.367 122.723 149.099 122.346 149.099 122.346 cv
149.099 122.346 149.099 86.3921 149.099 68.118 cv
149.099 68.118 li
149.099 68.118 li
149.099 68.118 li
149.099 68.1021 149.099 68.0859 149.099 68.07 cv
149.099 68.0644 149.099 68.0612 149.099 68.0557 cv
149.099 68.044 149.099 68.032 149.098 68.0203 cv
149.098 68.0148 149.098 68.0107 149.098 68.0052 cv
149.098 67.9738 149.098 67.9418 149.098 67.9106 cv
149.098 67.905 149.098 67.8997 149.098 67.8941 cv
149.098 67.8829 149.098 67.8716 149.098 67.8604 cv
149.098 67.8549 149.098 67.8514 149.098 67.8459 cv
149.098 67.8139 149.098 67.7819 149.098 67.75 cv
149.098 67.7456 149.098 67.7412 149.098 67.7368 cv
149.097 67.7252 149.097 67.7135 149.097 67.7019 cv
149.097 67.6964 149.097 67.6914 149.097 67.6859 cv
149.097 67.6544 149.097 67.6228 149.097 67.5915 cv
149.097 67.5871 149.096 67.5824 149.096 67.578 cv
149.096 67.566 149.096 67.5536 149.096 67.5416 cv
149.096 67.5383 149.096 67.5324 149.096 67.5291 cv
149.096 67.5135 149.096 67.4984 149.096 67.4828 cv
149.096 67.4812 li
149.095 67.4651 149.095 67.4497 149.095 67.4337 cv
149.095 67.4293 149.095 67.4238 149.095 67.4194 cv
149.095 67.4083 149.095 67.3982 149.095 67.3871 cv
149.095 67.3816 149.095 67.3744 149.095 67.369 cv
149.094 67.3567 149.094 67.3442 149.094 67.3319 cv
149.094 67.3298 149.094 67.3249 149.094 67.3228 cv
149.094 67.3084 149.094 67.2943 149.093 67.2799 cv
149.093 67.2723 149.093 67.2639 149.093 67.2563 cv
149.093 67.2485 149.093 67.2408 149.093 67.233 cv
149.093 67.2254 149.093 67.2181 149.093 67.2105 cv
149.092 67.2007 149.092 67.1916 149.092 67.1818 cv
149.092 67.1742 149.092 67.1643 149.092 67.1567 cv
149.092 67.1457 149.092 67.1348 149.091 67.1238 cv
149.091 67.1151 149.091 67.1086 149.091 67.0999 cv
149.091 67.0926 149.091 67.0849 149.091 67.0776 cv
149.091 67.07 149.09 67.0603 149.09 67.0527 cv
149.09 67.0462 149.09 67.0387 149.09 67.0322 cv
149.09 67.0193 149.09 67.0055 149.089 66.9925 cv
149.089 66.9844 149.089 66.9763 149.089 66.9682 cv
149.089 66.9596 149.089 66.9522 149.089 66.9436 cv
149.088 66.9363 149.088 66.9296 149.088 66.9223 cv
149.088 66.9147 149.088 66.9051 149.088 66.8975 cv
149.088 66.8907 149.087 66.8841 149.087 66.8772 cv
149.087 66.8622 149.087 66.8462 149.086 66.8312 cv
149.086 66.8255 149.086 66.8195 149.086 66.8139 cv
149.086 66.8042 149.086 66.7957 149.086 66.7861 cv
149.086 66.7804 149.085 66.7756 149.085 66.7699 cv
149.085 66.7603 149.085 66.7497 149.085 66.7401 cv
149.085 66.7373 149.085 66.7344 149.085 66.7316 cv
149.084 66.6963 149.083 66.6611 149.082 66.6259 cv
149.082 66.6239 149.082 66.6218 149.082 66.6198 cv
149.004 63.1095 148.652 60.1602 148.124 57.675 cv
147.737 55.8563 147.255 54.2848 146.718 52.9248 cv
148.752 54.4742 150.786 56.3507 152.589 58.6478 cv
152.589 123.209 li
.835294 .898039 .909804 rgb
f
160.423 124.553 mo
157.219 124.142 154.538 123.633 152.589 123.208 cv
152.589 58.6478 li
155.942 62.9184 158.496 68.6417 158.764 76.4124 cv
159.276 91.2592 160.045 113.594 160.423 124.553 cv
.396078 .615686 .796078 rgb
f
137.228 52.4832 mo
139.259 48.3328 140.825 45.4344 140.825 45.4344 cv
142.405 43.0574 146.425 41.5716 152.6 39.1944 cv
158.486 36.9287 161.738 34.2869 163.027 34.0417 cv
162.891 33.1417 162.916 32.6096 162.916 32.6096 cv
161.727 32.6096 158.31 35.4325 151.921 37.8096 cv
145.533 40.1868 141.373 41.6725 139.739 44.0495 cv
139.739 44.0495 138.089 47.0013 135.959 51.2143 cv
137.228 52.4832 li
cp
0 .223529 .309804 rgb
f
191.808 39.1944 mo
197.983 41.5716 202.003 43.0574 203.583 45.4344 cv
203.583 45.4344 205.073 48.1914 207.03 52.1764 cv
208.297 50.9092 li
206.239 46.8527 204.669 44.0495 204.669 44.0495 cv
203.035 41.6725 198.875 40.1868 192.487 37.8096 cv
186.098 35.4325 182.681 32.6096 181.492 32.6096 cv
181.492 32.6096 181.517 33.1417 181.382 34.0417 cv
182.67 34.2871 185.923 36.9288 191.808 39.1944 cv
cp
f
191.644 60.9936 mo
191.371 61.8324 188.954 63.0269 187.409 63.6212 cv
185.865 63.0269 183.447 61.8324 183.175 60.9936 cv
182.788 59.8032 183.537 56.2073 184.313 54.7392 cv
184.63 54.6451 185.891 54.5276 187.7 54.5276 cv
189.387 54.5276 190.264 54.6367 190.493 54.7193 cv
191.311 56.3168 192.038 59.7796 191.644 60.9936 cv
cp
190.763 54.491 mo
190.518 54.0289 184.255 54.1338 184.055 54.491 cv
183.253 55.924 182.411 59.7593 182.847 61.1003 cv
183.282 62.4413 187.409 63.9904 187.409 63.9904 cv
187.409 63.9904 191.536 62.4413 191.972 61.1003 cv
192.408 59.7593 191.616 56.0965 190.763 54.491 cv
cp
f
189.801 61.242 mo
189.456 61.824 187.427 62.5404 187.427 62.5404 cv
187.427 62.5404 185.305 61.8415 184.942 61.242 cv
184.163 59.957 184.942 55.2325 184.942 55.2325 cv
189.801 55.2325 li
189.801 55.2325 190.567 59.9498 189.801 61.242 cv
cp
.956863 .737255 .584314 rgb
f
190.84 57.755 mo
183.977 57.755 li
183.977 56.3825 li
190.84 56.3825 li
190.84 57.755 li
cp
.929412 .972549 .976471 rgb
f
180.492 323.49 mo
161.721 323.49 li
161.721 305.238 li
180.492 305.238 li
180.492 323.49 li
cp
.454902 .580392 .756863 rgb
f
161.851 304.286 mo
161.851 306.309 li
180.621 306.309 li
180.176 304.286 li
161.851 304.286 li
cp
.752941 .835294 .866667 rgb
f
138.579 316.697 mo
138.579 316.697 130.407 331.256 126.842 342.251 cv
127.733 344.925 135.905 350.422 143.927 349.828 cv
146.602 342.548 148.83 339.428 148.83 339.428 cv
148.83 339.428 149.424 320.411 138.579 316.697 cv
.572549 .690196 .886275 rgb
f
203.51 316.697 mo
203.51 316.697 211.681 331.256 215.247 342.251 cv
214.355 344.925 206.184 350.422 198.161 349.828 cv
195.487 342.548 193.258 339.428 193.258 339.428 cv
193.258 339.428 192.664 320.411 203.51 316.697 cv
f
199.36 349.872 mo
198.961 349.872 198.561 349.857 198.161 349.828 cv
198.161 349.828 li
198.161 349.828 li
196.518 345.354 195.043 342.451 194.15 340.878 cv
194.15 340.84 194.15 340.803 194.15 340.765 cv
194.15 340.765 li
194.15 340.749 194.15 340.732 194.15 340.717 cv
194.15 340.712 194.15 340.708 194.15 340.703 cv
194.15 340.69 194.15 340.678 194.15 340.666 cv
194.15 340.662 194.15 340.658 194.15 340.653 cv
194.15 340.638 194.15 340.623 194.15 340.607 cv
194.15 340.606 194.15 340.605 194.15 340.603 cv
194.15 340.587 194.15 340.573 194.15 340.556 cv
194.15 340.552 194.15 340.548 194.15 340.544 cv
194.15 340.531 194.15 340.519 194.15 340.507 cv
194.15 340.502 194.15 340.497 194.15 340.493 cv
194.15 340.478 194.15 340.464 194.15 340.45 cv
194.15 340.448 194.15 340.445 194.15 340.443 cv
194.15 340.428 194.151 340.412 194.151 340.398 cv
194.151 340.393 194.151 340.387 194.151 340.382 cv
194.151 340.37 194.151 340.359 194.151 340.347 cv
194.151 340.343 194.151 340.339 194.151 340.335 cv
194.151 340.319 194.151 340.305 194.151 340.289 cv
194.151 340.288 194.151 340.287 194.151 340.286 cv
194.151 340.27 194.152 340.255 194.152 340.24 cv
194.152 340.234 194.152 340.228 194.152 340.222 cv
194.152 340.213 194.152 340.202 194.152 340.193 cv
194.152 340.186 194.152 340.18 194.152 340.173 cv
194.152 340.162 194.152 340.152 194.152 340.141 cv
194.153 340.133 194.153 340.125 194.153 340.117 cv
194.153 340.105 194.153 340.095 194.153 340.083 cv
194.153 340.076 194.153 340.069 194.153 340.062 cv
194.153 340.053 194.153 340.044 194.154 340.035 cv
194.154 340.029 194.154 340.023 194.154 340.016 cv
194.154 340.004 194.154 339.994 194.154 339.982 cv
194.154 339.976 194.154 339.97 194.154 339.965 cv
194.154 339.952 194.155 339.937 194.155 339.924 cv
194.155 339.919 194.155 339.914 194.155 339.908 cv
194.155 339.897 194.155 339.888 194.155 339.877 cv
194.155 339.871 194.156 339.865 194.156 339.859 cv
194.156 339.849 194.156 339.839 194.156 339.829 cv
194.156 339.819 194.156 339.81 194.156 339.8 cv
194.157 339.789 194.157 339.78 194.157 339.77 cv
194.157 339.762 194.157 339.755 194.157 339.747 cv
194.157 339.74 194.157 339.732 194.158 339.724 cv
194.158 339.716 194.158 339.709 194.158 339.701 cv
194.158 339.694 194.158 339.688 194.158 339.682 cv
194.159 339.661 194.159 339.641 194.159 339.62 cv
194.159 339.619 194.159 339.618 194.159 339.617 cv
194.159 339.606 194.16 339.595 194.16 339.584 cv
194.16 339.581 194.16 339.578 194.16 339.575 cv
194.16 339.563 194.16 339.552 194.161 339.541 cv
194.161 339.539 194.161 339.539 194.161 339.537 cv
194.161 339.5 194.162 339.464 194.163 339.427 cv
194.163 339.425 194.163 339.423 194.163 339.421 cv
194.163 339.409 194.163 339.397 194.164 339.386 cv
194.164 339.384 194.164 339.384 194.164 339.381 cv
194.164 339.345 194.165 339.309 194.166 339.272 cv
194.166 339.271 194.166 339.268 194.166 339.267 cv
194.167 339.217 194.168 339.167 194.17 339.117 cv
194.17 339.115 li
194.171 339.042 194.173 338.969 194.175 338.897 cv
194.183 338.876 194.19 338.855 194.197 338.833 cv
194.233 337.63 194.297 336.486 194.393 335.414 cv
194.387 335.427 194.38 335.44 194.373 335.453 cv
194.54 333.566 194.796 331.874 195.118 330.356 cv
196.596 332.759 199.98 338.803 203.845 349.322 cv
202.391 349.666 200.88 349.872 199.36 349.872 cv
.458824 .596078 .772549 rgb
f
143.927 349.828 mo
143.927 349.828 li
145.425 345.75 146.783 342.977 147.688 341.327 cv
146.783 342.977 145.425 345.75 143.927 349.828 cv
143.927 349.828 li
.898039 .921569 .929412 rgb
f
142.727 349.872 mo
141.199 349.872 139.679 349.664 138.218 349.317 cv
142.105 338.739 145.501 332.694 146.964 330.322 cv
147.288 331.85 147.547 333.552 147.715 335.453 cv
147.709 335.44 147.702 335.426 147.695 335.413 cv
147.792 336.486 147.855 337.63 147.891 338.833 cv
147.898 338.854 147.906 338.875 147.913 338.897 cv
147.93 339.502 147.939 340.125 147.939 340.765 cv
147.939 340.803 147.939 340.84 147.939 340.879 cv
147.86 341.018 147.776 341.167 147.688 341.327 cv
146.783 342.977 145.425 345.75 143.927 349.828 cv
143.927 349.828 li
143.527 349.857 143.127 349.872 142.727 349.872 cv
.513725 .643137 .827451 rgb
f
191.327 310.456 mo
184.938 308.079 181.521 305.257 180.333 305.257 cv
180.333 305.257 180.646 309.406 173.892 317.589 cv
173.892 319.199 172.008 320.757 171.044 321.474 cv
170.153 320.811 168.135 319.15 168.135 317.589 cv
163.064 311.06 161.756 305.257 161.756 305.257 cv
160.567 305.257 157.15 308.079 150.762 310.456 cv
144.373 312.834 140.213 314.319 138.579 316.697 cv
140.807 318.479 147.939 322.491 147.939 340.765 cv
147.939 359.039 147.939 394.993 147.939 394.993 cv
147.939 394.993 157.893 397.964 170.967 397.964 cv
184.784 397.964 194.15 394.993 194.15 394.993 cv
194.15 394.993 194.15 359.039 194.15 340.765 cv
194.15 322.491 201.281 318.479 203.51 316.697 cv
201.875 314.319 197.715 312.834 191.327 310.456 cv
.572549 .690196 .886275 rgb
f
194.393 335.414 mo
192.39 339.234 190.525 345.16 189.975 354.681 cv
189.219 367.74 188.072 387.577 187.556 396.51 cv
188.376 396.363 189.115 396.216 189.794 396.073 cv
190.226 386.72 191.177 366.147 191.782 353.043 cv
192.066 346.9 192.999 342.316 194.197 338.833 cv
194.233 337.63 194.297 336.486 194.393 335.414 cv
.756863 .847059 .956863 rgb
f
152.114 354.681 mo
151.563 345.159 149.699 339.234 147.695 335.413 cv
147.792 336.486 147.855 337.63 147.891 338.833 cv
149.09 342.316 150.022 346.9 150.306 353.043 cv
150.911 366.13 151.86 386.67 152.293 396.039 cv
152.976 396.181 153.712 396.327 154.531 396.475 cv
154.013 387.524 152.868 367.722 152.114 354.681 cv
f
133.866 347.764 mo
134.351 346.636 134.849 345.513 135.353 344.393 cv
132.002 342.764 129.182 340.66 127.955 339.103 cv
127.554 340.172 127.173 341.229 126.842 342.251 cv
127.339 343.741 130.126 346.074 133.866 347.764 cv
cp
f
208.402 347.735 mo
212.059 346.04 214.757 343.721 215.247 342.251 cv
214.935 341.289 214.578 340.295 214.204 339.291 cv
213.009 340.801 210.242 342.825 206.944 344.411 cv
207.423 345.522 207.904 346.632 208.402 347.735 cv
cp
f
160.328 305.841 mo
161.281 308.895 163.368 313.187 168.135 317.589 cv
168.135 315.845 li
164.626 312.402 162.5 307.03 161.851 304.286 cv
160.328 305.841 li
cp
.929412 .972549 .976471 rgb
f
181.699 305.841 mo
180.746 308.895 178.659 313.187 173.892 317.589 cv
173.892 315.845 li
177.401 312.402 179.527 307.03 180.176 304.286 cv
181.699 305.841 li
cp
f
195.118 330.356 mo
195.117 330.355 li
195.505 328.522 195.989 326.94 196.53 325.572 cv
196.531 325.571 196.531 325.571 196.531 325.571 cv
195.99 326.94 195.506 328.522 195.118 330.356 cv
.513725 .643137 .827451 rgb
f
194.373 335.453 mo
194.54 333.566 194.796 331.874 195.117 330.355 cv
195.118 330.356 li
194.796 331.874 194.54 333.566 194.373 335.453 cv
194.373 335.453 li
.411765 .556863 .72549 rgb
f
182.824 397.228 mo
183.202 386.28 183.972 363.919 184.485 349.059 cv
184.897 337.109 190.715 330.002 196.53 325.572 cv
195.989 326.94 195.505 328.522 195.117 330.355 cv
194.796 331.874 194.54 333.566 194.373 335.453 cv
192.377 339.275 190.523 345.192 189.975 354.681 cv
189.219 367.739 188.072 387.574 187.556 396.509 cv
186.166 396.759 184.581 397.009 182.824 397.228 cv
.513725 .643137 .827451 rgb
f
194.15 340.878 mo
194.15 340.878 li
194.15 340.84 194.15 340.803 194.15 340.765 cv
194.15 340.765 li
194.15 340.765 li
194.15 340.803 194.15 340.84 194.15 340.878 cv
194.15 340.717 mo
194.15 340.711 194.15 340.708 194.15 340.703 cv
194.15 340.708 194.15 340.712 194.15 340.717 cv
194.15 340.666 mo
194.15 340.663 194.15 340.657 194.15 340.653 cv
194.15 340.658 194.15 340.662 194.15 340.666 cv
194.15 340.607 mo
194.15 340.606 194.15 340.605 194.15 340.603 cv
194.15 340.605 194.15 340.606 194.15 340.607 cv
194.15 340.556 mo
194.15 340.553 194.15 340.547 194.15 340.544 cv
194.15 340.548 194.15 340.552 194.15 340.556 cv
194.15 340.507 mo
194.15 340.501 194.15 340.498 194.15 340.493 cv
194.15 340.497 194.15 340.502 194.15 340.507 cv
194.15 340.45 mo
194.15 340.448 194.15 340.445 194.15 340.443 cv
194.15 340.445 194.15 340.448 194.15 340.45 cv
194.151 340.398 mo
194.151 340.392 194.151 340.388 194.151 340.382 cv
194.151 340.387 194.151 340.393 194.151 340.398 cv
194.151 340.347 mo
194.151 340.344 194.151 340.338 194.151 340.335 cv
194.151 340.339 194.151 340.343 194.151 340.347 cv
194.151 340.289 mo
194.151 340.288 194.151 340.287 194.151 340.286 cv
194.151 340.287 194.151 340.288 194.151 340.289 cv
194.152 340.24 mo
194.152 340.233 194.152 340.228 194.152 340.222 cv
194.152 340.228 194.152 340.234 194.152 340.24 cv
194.152 340.193 mo
194.152 340.186 194.152 340.18 194.152 340.173 cv
194.152 340.18 194.152 340.186 194.152 340.193 cv
194.152 340.141 mo
194.153 340.133 194.153 340.125 194.153 340.117 cv
194.153 340.125 194.153 340.133 194.152 340.141 cv
194.153 340.083 mo
194.153 340.077 194.153 340.068 194.153 340.062 cv
194.153 340.069 194.153 340.076 194.153 340.083 cv
194.154 340.035 mo
194.154 340.029 194.154 340.023 194.154 340.016 cv
194.154 340.023 194.154 340.029 194.154 340.035 cv
194.154 339.982 mo
194.154 339.976 194.154 339.97 194.154 339.965 cv
194.154 339.97 194.154 339.976 194.154 339.982 cv
194.155 339.924 mo
194.155 339.919 194.155 339.914 194.155 339.908 cv
194.155 339.914 194.155 339.919 194.155 339.924 cv
194.155 339.877 mo
194.155 339.872 194.156 339.864 194.156 339.859 cv
194.156 339.865 194.155 339.871 194.155 339.877 cv
194.156 339.829 mo
194.156 339.819 194.156 339.81 194.156 339.8 cv
194.156 339.81 194.156 339.819 194.156 339.829 cv
194.157 339.77 mo
194.157 339.762 194.157 339.755 194.157 339.747 cv
194.157 339.755 194.157 339.762 194.157 339.77 cv
194.158 339.724 mo
194.158 339.717 194.158 339.708 194.158 339.701 cv
194.158 339.709 194.158 339.716 194.158 339.724 cv
194.158 339.682 mo
194.159 339.661 194.159 339.64 194.159 339.62 cv
194.159 339.641 194.159 339.661 194.158 339.682 cv
194.159 339.617 mo
194.159 339.607 194.16 339.595 194.16 339.584 cv
194.16 339.595 194.159 339.606 194.159 339.617 cv
194.16 339.575 mo
194.16 339.564 194.16 339.552 194.161 339.541 cv
194.16 339.552 194.16 339.563 194.16 339.575 cv
194.161 339.537 mo
194.161 339.5 194.162 339.464 194.163 339.427 cv
194.162 339.464 194.161 339.5 194.161 339.537 cv
194.163 339.421 mo
194.163 339.41 194.163 339.397 194.164 339.386 cv
194.163 339.397 194.163 339.409 194.163 339.421 cv
194.164 339.381 mo
194.164 339.345 194.165 339.309 194.166 339.272 cv
194.165 339.309 194.164 339.345 194.164 339.381 cv
194.166 339.267 mo
194.167 339.216 194.168 339.168 194.17 339.117 cv
194.168 339.167 194.167 339.217 194.166 339.267 cv
194.17 339.115 mo
194.171 339.042 194.173 338.97 194.175 338.897 cv
194.175 338.897 li
194.173 338.969 194.171 339.042 194.17 339.115 cv
.411765 .556863 .72549 rgb
f
189.4 396.155 mo
189.534 396.127 189.665 396.1 189.794 396.073 cv
190.226 386.72 191.177 366.147 191.782 353.043 cv
192.065 346.937 192.987 342.372 194.175 338.897 cv
194.173 338.97 194.171 339.042 194.17 339.115 cv
194.17 339.116 194.17 339.116 194.17 339.117 cv
194.168 339.168 194.167 339.216 194.166 339.267 cv
194.166 339.269 194.166 339.271 194.166 339.272 cv
194.165 339.309 194.164 339.345 194.164 339.381 cv
194.164 339.383 194.164 339.385 194.164 339.386 cv
194.163 339.397 194.163 339.41 194.163 339.421 cv
194.163 339.423 194.163 339.425 194.163 339.427 cv
194.162 339.464 194.161 339.5 194.161 339.537 cv
194.161 339.538 194.161 339.539 194.161 339.541 cv
194.16 339.552 194.16 339.564 194.16 339.575 cv
194.16 339.578 194.16 339.581 194.16 339.584 cv
194.16 339.595 194.159 339.607 194.159 339.617 cv
194.159 339.618 194.159 339.619 194.159 339.62 cv
194.159 339.64 194.159 339.661 194.158 339.682 cv
194.158 339.688 194.158 339.694 194.158 339.701 cv
194.158 339.708 194.158 339.717 194.158 339.724 cv
194.157 339.732 194.157 339.74 194.157 339.747 cv
194.157 339.755 194.157 339.762 194.157 339.77 cv
194.157 339.779 194.157 339.79 194.156 339.8 cv
194.156 339.81 194.156 339.819 194.156 339.829 cv
194.156 339.839 194.156 339.849 194.156 339.859 cv
194.156 339.864 194.155 339.872 194.155 339.877 cv
194.155 339.887 194.155 339.898 194.155 339.908 cv
194.155 339.914 194.155 339.919 194.155 339.924 cv
194.155 339.937 194.154 339.951 194.154 339.965 cv
194.154 339.97 194.154 339.976 194.154 339.982 cv
194.154 339.993 194.154 340.005 194.154 340.016 cv
194.154 340.023 194.154 340.029 194.154 340.035 cv
194.153 340.044 194.153 340.053 194.153 340.062 cv
194.153 340.068 194.153 340.077 194.153 340.083 cv
194.153 340.095 194.153 340.106 194.153 340.117 cv
194.153 340.125 194.153 340.133 194.152 340.141 cv
194.152 340.152 194.152 340.163 194.152 340.173 cv
194.152 340.18 194.152 340.186 194.152 340.193 cv
194.152 340.203 194.152 340.212 194.152 340.222 cv
194.152 340.228 194.152 340.233 194.152 340.24 cv
194.152 340.255 194.151 340.27 194.151 340.286 cv
194.151 340.287 194.151 340.288 194.151 340.289 cv
194.151 340.305 194.151 340.32 194.151 340.335 cv
194.151 340.338 194.151 340.344 194.151 340.347 cv
194.151 340.359 194.151 340.37 194.151 340.382 cv
194.151 340.388 194.151 340.392 194.151 340.398 cv
194.151 340.412 194.15 340.428 194.15 340.443 cv
194.15 340.445 194.15 340.448 194.15 340.45 cv
194.15 340.465 194.15 340.478 194.15 340.493 cv
194.15 340.498 194.15 340.501 194.15 340.507 cv
194.15 340.519 194.15 340.531 194.15 340.544 cv
194.15 340.547 194.15 340.553 194.15 340.556 cv
194.15 340.572 194.15 340.588 194.15 340.603 cv
194.15 340.605 194.15 340.606 194.15 340.607 cv
194.15 340.623 194.15 340.638 194.15 340.653 cv
194.15 340.657 194.15 340.663 194.15 340.666 cv
194.15 340.678 194.15 340.69 194.15 340.703 cv
194.15 340.708 194.15 340.711 194.15 340.717 cv
194.15 340.733 194.15 340.749 194.15 340.765 cv
194.15 340.765 li
194.15 340.803 194.15 340.84 194.15 340.878 cv
194.15 340.878 li
194.15 359.188 194.15 394.993 194.15 394.993 cv
194.15 394.993 194.15 394.993 194.15 394.993 cv
194.14 394.996 192.428 395.536 189.4 396.155 cv
.513725 .643137 .827451 rgb
f
187.556 396.509 mo
188.072 387.574 189.219 367.739 189.975 354.681 cv
190.523 345.192 192.377 339.275 194.373 335.453 cv
194.373 335.453 li
194.277 336.536 194.209 337.682 194.175 338.897 cv
194.175 338.897 li
192.987 342.372 192.065 346.937 191.782 353.043 cv
191.177 366.147 190.226 386.72 189.794 396.073 cv
189.665 396.1 189.534 396.127 189.4 396.155 cv
188.831 396.271 188.215 396.39 187.556 396.509 cv
.678431 .784314 .890196 rgb
f
146.964 330.322 mo
146.577 328.503 146.095 326.932 145.557 325.571 cv
145.557 325.571 145.558 325.572 145.558 325.572 cv
146.096 326.932 146.577 328.503 146.964 330.322 cv
146.964 330.322 146.964 330.322 146.964 330.322 cv
.513725 .643137 .827451 rgb
f
147.716 335.453 mo
147.716 335.453 147.716 335.453 147.715 335.453 cv
147.547 333.552 147.288 331.85 146.964 330.322 cv
146.964 330.322 146.964 330.322 146.964 330.322 cv
147.289 331.85 147.547 333.552 147.716 335.453 cv
.462745 .6 .776471 rgb
f
159.263 397.2 mo
157.519 396.976 155.931 396.724 154.531 396.471 cv
154.013 387.518 152.868 367.72 152.114 354.681 cv
151.565 345.193 149.712 339.275 147.716 335.453 cv
147.547 333.552 147.289 331.85 146.964 330.322 cv
146.577 328.503 146.096 326.932 145.558 325.572 cv
151.374 330.002 157.192 337.109 157.604 349.059 cv
158.116 363.906 158.885 386.241 159.263 397.2 cv
.513725 .643137 .827451 rgb
f
147.962 395 mo
147.947 394.995 147.939 394.993 147.939 394.993 cv
147.939 394.993 147.939 359.188 147.939 340.879 cv
147.939 340.878 li
147.939 359.188 147.939 394.993 147.939 394.993 cv
147.939 394.993 147.947 394.995 147.962 395 cv
.898039 .921569 .929412 rgb
f
147.939 340.879 mo
147.939 340.879 li
147.939 340.878 li
147.939 340.878 li
147.939 340.879 li
.513725 .643137 .827451 rgb
f
147.939 340.879 mo
147.939 340.84 147.939 340.803 147.939 340.765 cv
147.939 340.125 147.93 339.502 147.913 338.897 cv
147.913 338.897 147.913 338.897 147.913 338.897 cv
147.93 339.503 147.939 340.125 147.939 340.765 cv
147.939 340.803 147.939 340.84 147.939 340.878 cv
147.939 340.879 li
.462745 .6 .776471 rgb
f
152.293 396.039 mo
149.732 395.508 148.17 395.06 147.962 395 cv
147.947 394.995 147.939 394.993 147.939 394.993 cv
147.939 394.993 147.939 359.188 147.939 340.878 cv
147.939 340.878 li
147.939 340.84 147.939 340.803 147.939 340.765 cv
147.939 340.125 147.93 339.503 147.913 338.897 cv
149.101 342.372 150.024 346.937 150.306 353.043 cv
150.911 366.13 151.86 386.67 152.293 396.039 cv
.513725 .643137 .827451 rgb
f
154.531 396.471 mo
153.719 396.325 152.971 396.179 152.293 396.039 cv
151.86 386.67 150.911 366.13 150.306 353.043 cv
150.024 346.937 149.101 342.372 147.913 338.897 cv
147.913 338.897 147.913 338.897 147.913 338.897 cv
147.879 337.682 147.812 336.535 147.715 335.453 cv
147.716 335.453 147.716 335.453 147.716 335.453 cv
149.712 339.275 151.565 345.193 152.114 354.681 cv
152.868 367.72 154.013 387.518 154.531 396.471 cv
.678431 .784314 .890196 rgb
f
186.249 335.336 mo
184.077 334.756 180.803 328.101 181.894 326.669 cv
182.339 326.577 184.114 326.462 186.658 326.462 cv
189.031 326.462 190.265 326.569 190.587 326.649 cv
191.737 328.208 188.422 334.756 186.249 335.336 cv
cp
0 .223529 .309804 rgb
f
186.252 334.97 mo
185.629 334.557 184.566 333.354 183.56 331.372 cv
182.718 329.712 182.395 328.432 182.349 327.777 cv
183.193 327.715 184.696 327.65 186.704 327.65 cv
188.434 327.65 189.536 327.701 190.161 327.75 cv
190.139 328.285 189.929 329.334 189.243 330.82 cv
188.228 333.015 186.979 334.496 186.252 334.97 cv
cp
.929412 .972549 .976471 rgb
f
188.931 330.625 mo
188.931 329.149 187.735 327.954 186.26 327.954 cv
184.785 327.954 183.589 329.149 183.589 330.625 cv
184.479 330.625 188.486 330.625 188.931 330.625 cv
cp
.576471 .317647 .145098 rgb
f
188.745 331.181 mo
183.886 331.181 li
183.886 330.884 li
188.745 330.884 li
188.745 331.181 li
cp
0 .223529 .309804 rgb
f
394.626 50.8426 mo
375.856 50.8426 li
375.856 32.5914 li
394.626 32.5914 li
394.626 50.8426 li
cp
.215686 .266667 .427451 rgb
f
376.055 29.1541 mo
376.055 34.6137 li
394.306 34.6137 li
394.306 29.1541 li
376.055 29.1541 li
cp
.752941 .835294 .866667 rgb
f
352.713 44.0496 mo
352.713 44.0496 344.542 58.6095 340.976 69.6037 cv
341.868 72.278 350.039 77.7751 358.062 77.1808 cv
360.736 69.9009 362.965 66.7809 362.965 66.7809 cv
362.965 66.7809 363.559 47.7639 352.713 44.0496 cv
cp
.262745 .305882 .482353 rgb
f
417.644 44.0496 mo
417.644 44.0496 425.815 58.6095 429.381 69.6037 cv
428.49 72.278 420.318 77.7751 412.296 77.1808 cv
409.621 69.9009 407.393 66.7809 407.393 66.7809 cv
407.393 66.7809 406.798 47.7639 417.644 44.0496 cv
cp
f
405.461 37.8096 mo
399.073 35.4326 395.656 32.6097 394.467 32.6097 cv
394.467 32.6097 394.893 40.0678 385.179 47.2946 cv
375.465 40.0678 375.89 32.6097 375.89 32.6097 cv
374.702 32.6097 371.285 35.4326 364.896 37.8096 cv
358.507 40.1868 354.348 41.6725 352.713 44.0495 cv
354.942 45.8325 362.073 49.8438 362.073 68.118 cv
362.073 86.3921 362.073 122.346 362.073 122.346 cv
362.073 122.346 372.027 125.318 385.102 125.318 cv
398.919 125.318 408.284 122.346 408.284 122.346 cv
408.284 122.346 408.284 86.3921 408.284 68.118 cv
408.284 49.8438 415.416 45.8325 417.644 44.0495 cv
416.01 41.6725 411.85 40.1868 405.461 37.8096 cv
cp
f
396.873 33.6785 mo
395.717 33.0307 394.924 32.6096 394.467 32.6096 cv
394.467 32.6096 394.893 40.0678 385.179 47.2945 cv
375.465 40.0678 375.89 32.6096 375.89 32.6096 cv
375.434 32.6096 374.64 33.0306 373.484 33.6783 cv
373.907 36.6315 375.753 43.0032 383.635 49.4455 cv
383.635 68.3645 li
386.706 68.3645 li
386.706 49.4583 li
394.601 43.0116 396.45 36.6337 396.873 33.6785 cv
cp
.215686 .266667 .427451 rgb
f
399.476 63.4551 mo
398.688 63.4551 li
398.688 62.9206 li
398.927 62.973 399.186 63.0088 399.476 63.0162 cv
399.476 63.4551 li
cp
400.25 62.9839 mo
401.276 62.9839 402.107 62.1522 402.107 61.1261 cv
402.107 60.1001 401.276 59.2683 400.25 59.2683 cv
399.539 59.2683 398.929 59.6717 398.617 60.2577 cv
398.247 60.1618 397.966 59.9498 398.075 59.509 cv
398.251 59.3315 398.36 59.0876 398.36 58.8179 cv
398.36 58.2756 397.921 57.836 397.378 57.836 cv
396.836 57.836 396.397 58.2756 396.397 58.8179 cv
396.397 58.8179 395.937 61.8145 398.124 62.7439 cv
398.124 63.4551 li
396.717 63.4551 li
396.717 64.0181 li
400.996 64.0181 li
400.996 63.4551 li
400.039 63.4551 li
400.039 62.9927 li
400.25 62.9839 li
cp
.929412 .972549 .976471 rgb
f
398.955 57.5479 mo
399.497 57.5479 399.937 57.1083 399.937 56.566 cv
399.937 56.0237 399.497 55.5841 398.955 55.5841 cv
398.413 55.5841 397.973 56.0237 397.973 56.566 cv
397.973 57.1083 398.413 57.5479 398.955 57.5479 cv
cp
f
382.921 48.8333 mo
387.436 48.8333 li
394.702 42.6029 396.464 36.538 396.873 33.6785 cv
395.717 33.0307 394.924 32.6096 394.467 32.6096 cv
394.467 32.6096 394.893 40.0678 385.179 47.2945 cv
375.465 40.0678 375.89 32.6096 375.89 32.6096 cv
375.434 32.6096 374.64 33.0306 373.484 33.6783 cv
373.893 36.5379 375.655 42.6028 382.921 48.8333 cv
cp
.85098 .901961 .929412 rgb
f
408.516 56.5645 mo
407.247 61.8772 407.393 66.7808 407.393 66.7808 cv
407.393 66.7808 409.621 69.9009 412.296 77.1808 cv
414.217 77.3231 416.144 77.1094 417.98 76.6755 cv
413.125 63.4646 409.03 57.3122 408.516 56.5645 cv
cp
.215686 .266667 .427451 rgb
f
398.619 76.4124 mo
398.107 91.2721 397.336 113.633 396.959 124.581 cv
403.996 123.701 408.284 122.346 408.284 122.346 cv
408.284 122.346 408.284 86.3921 408.284 68.118 cv
408.284 61.2526 409.291 56.4013 410.666 52.924 cv
404.85 57.3539 399.031 64.4614 398.619 76.4124 cv
cp
f
361.835 56.5364 mo
361.459 57.0764 357.305 63.1958 352.353 76.6703 cv
354.196 77.1081 356.132 77.3237 358.062 77.1808 cv
360.736 69.9009 362.965 66.7808 362.965 66.7808 cv
362.965 66.7808 363.11 61.8598 361.835 56.5364 cv
cp
f
373.398 124.553 mo
373.02 113.594 372.25 91.2592 371.738 76.4124 cv
371.326 64.4613 365.508 57.3539 359.691 52.924 cv
361.066 56.4015 362.073 61.2525 362.073 68.118 cv
362.073 86.3921 362.073 122.346 362.073 122.346 cv
362.073 122.346 366.538 123.673 373.398 124.553 cv
cp
f
385.18 47.3424 mo
376.301 40.3159 376.076 29.1912 376.076 29.1912 cv
374.151 29.7847 371.636 34.7082 371.636 34.7082 cv
372.039 37.5246 372.697 46.1958 379.69 52.3266 cv
379.984 51.5066 384.299 47.6826 385.18 47.3424 cv
cp
.929412 .972549 .976471 rgb
f
385.179 47.3424 mo
394.058 40.3159 394.283 29.1912 394.283 29.1912 cv
396.208 29.7847 398.697 34.6949 398.697 34.6949 cv
398.294 37.5113 397.662 46.1958 390.669 52.3266 cv
390.375 51.5066 386.06 47.6826 385.179 47.3424 cv
cp
f
74.2691 185.604 mo
55.4985 185.604 li
55.4985 167.353 li
74.2691 167.353 li
74.2691 185.604 li
cp
.827451 .815686 .811765 rgb
f
55.4985 167.353 mo
55.4985 169.376 li
74.269 169.376 li
74.269 167.353 li
55.4985 167.353 li
cp
.027451 .027451 .027451 rgb
f
32.3559 178.811 mo
32.3559 178.811 24.1845 193.371 20.6188 204.365 cv
21.5102 207.04 29.6816 212.537 37.7044 211.943 cv
40.3787 204.663 42.6072 201.543 42.6072 201.543 cv
42.6072 201.543 43.2015 182.526 32.3559 178.811 cv
cp
.976471 .960784 .956863 rgb
f
97.2867 178.811 mo
97.2867 178.811 105.458 193.371 109.024 204.365 cv
108.132 207.04 99.9609 212.537 91.9381 211.943 cv
89.2639 204.663 87.0353 201.543 87.0353 201.543 cv
87.0353 201.543 86.441 182.526 97.2867 178.811 cv
cp
f
88.1581 191.326 mo
86.8894 196.639 87.0354 201.543 87.0354 201.543 cv
87.0354 201.543 89.2639 204.663 91.9381 211.943 cv
93.8591 212.085 95.7864 211.871 97.6225 211.437 cv
92.7678 198.226 88.6727 192.074 88.1581 191.326 cv
cp
.866667 .85098 .85098 rgb
f
41.4771 191.298 mo
41.1012 191.838 36.947 197.958 31.9951 211.432 cv
33.8386 211.87 35.7747 212.085 37.7044 211.943 cv
40.3787 204.663 42.6072 201.543 42.6072 201.543 cv
42.6072 201.543 42.753 196.622 41.4771 191.298 cv
cp
f
85.104 172.571 mo
78.7154 170.194 75.2983 167.372 74.1097 167.372 cv
74.1097 167.372 74.5354 174.83 64.8213 182.056 cv
55.1073 174.83 55.5329 167.372 55.5329 167.372 cv
54.3443 167.372 50.9272 170.194 44.5387 172.571 cv
38.1501 174.949 33.9901 176.434 32.3559 178.811 cv
34.5844 180.594 41.7158 184.606 41.7158 202.88 cv
41.7158 221.154 41.7158 257.108 41.7158 257.108 cv
41.7158 257.108 51.67 260.079 64.7442 260.079 cv
78.5612 260.079 87.9267 257.108 87.9267 257.108 cv
87.9267 257.108 87.9267 221.154 87.9267 202.88 cv
87.9267 184.606 95.0581 180.594 97.2867 178.811 cv
95.6524 176.434 91.4924 174.949 85.104 172.571 cv
cp
.976471 .960784 .956863 rgb
f
85.104 172.571 mo
78.7154 170.194 75.2983 167.372 74.1097 167.372 cv
74.1097 167.372 74.5354 174.83 64.8213 182.056 cv
55.1073 174.83 55.5329 167.372 55.5329 167.372 cv
54.3443 167.372 50.9272 170.194 44.5387 172.571 cv
38.1501 174.949 33.9901 176.434 32.3559 178.811 cv
34.5844 180.594 41.7158 184.606 41.7158 202.88 cv
41.7158 221.154 41.7158 257.108 41.7158 257.108 cv
41.7158 257.108 51.67 260.079 64.7442 260.079 cv
78.5612 260.079 87.9267 257.108 87.9267 257.108 cv
87.9267 257.108 87.9267 221.154 87.9267 202.88 cv
87.9267 184.606 95.0581 180.594 97.2867 178.811 cv
95.6524 176.434 91.4924 174.949 85.104 172.571 cv
cp
f
21.7316 201.218 mo
21.3311 202.287 20.9501 203.344 20.6189 204.365 cv
21.5102 207.04 29.6816 212.537 37.7044 211.943 cv
38.0993 210.868 38.479 209.911 38.8486 209.015 cv
32.2399 209.249 24.0811 204.198 21.7316 201.218 cv
cp
.027451 .027451 .027451 rgb
f
107.981 201.406 mo
105.657 204.342 97.4286 209.26 90.7942 209.016 cv
91.1637 209.912 91.5434 210.868 91.9381 211.943 cv
99.961 212.537 108.132 207.04 109.024 204.365 cv
108.712 203.404 108.355 202.41 107.981 201.406 cv
cp
f
63.257 184.156 mo
64.8183 185.37 li
66.3842 184.156 li
74.0217 177.731 75.8183 171.386 76.2299 168.44 cv
75.1019 167.792 74.328 167.371 73.8825 167.371 cv
73.8825 167.371 74.2978 174.83 64.8213 182.056 cv
55.3447 174.83 55.7599 167.371 55.7599 167.371 cv
55.3146 167.371 54.5406 167.792 53.4127 168.44 cv
53.8239 171.385 55.6195 177.731 63.257 184.156 cv
cp
f
78.2617 211.174 mo
77.7495 226.034 76.9789 248.395 76.6014 259.343 cv
83.6388 258.463 87.9267 257.108 87.9267 257.108 cv
87.9267 257.108 87.9267 221.154 87.9267 202.88 cv
87.9267 196.014 88.9335 191.163 90.3085 187.686 cv
84.4923 192.116 78.6737 199.223 78.2617 211.174 cv
cp
.866667 .85098 .85098 rgb
f
53.0401 259.315 mo
52.6624 248.356 51.8926 226.021 51.3808 211.174 cv
50.9688 199.223 45.1503 192.116 39.3339 187.686 cv
40.7089 191.163 41.7157 196.014 41.7157 202.88 cv
41.7157 221.154 41.7157 257.108 41.7157 257.108 cv
41.7157 257.108 46.1807 258.434 53.0401 259.315 cv
cp
f
29.845 187.245 mo
31.8762 183.095 33.4425 180.196 33.4425 180.196 cv
35.0219 177.819 39.0427 176.333 45.2175 173.956 cv
51.1029 171.691 54.3553 169.049 55.644 168.803 cv
55.5083 167.904 55.5328 167.371 55.5328 167.371 cv
54.3443 167.371 50.9271 170.194 44.5386 172.571 cv
38.15 174.949 33.9901 176.434 32.3558 178.811 cv
32.3558 178.811 30.7064 181.763 28.5761 185.976 cv
29.845 187.245 li
cp
.027451 .027451 .027451 rgb
f
84.425 173.956 mo
90.5998 176.333 94.6205 177.819 96.1999 180.196 cv
96.1999 180.196 97.6897 182.953 99.6471 186.938 cv
100.914 185.671 li
98.8562 181.615 97.2866 178.811 97.2866 178.811 cv
95.6523 176.434 91.4924 174.949 85.1039 172.571 cv
78.7153 170.194 75.2983 167.371 74.1096 167.371 cv
74.1096 167.371 74.1342 167.904 73.9986 168.803 cv
75.2875 169.049 78.5397 171.691 84.425 173.956 cv
cp
f
92.8165 183.092 mo
64.6119 190.662 li
36.9324 183.232 li
39.0164 186.122 41.0337 190.82 41.5662 198.736 cv
64.6119 204.921 li
88.0852 198.621 li
88.6392 190.641 90.706 185.955 92.8165 183.092 cv
cp
.564706 .203922 .247059 rgb
f
64.5768 200.356 mo
41.0105 194.031 li
41.2529 195.465 41.4501 197.011 41.5662 198.736 cv
64.6119 204.921 li
88.0852 198.621 li
88.2058 196.885 88.4089 195.332 88.6574 193.893 cv
64.5768 200.356 li
cp
.690196 .00784314 .137255 rgb
f
36.9324 183.232 mo
38.0025 184.716 39.0512 186.689 39.8943 189.317 cv
64.5578 195.937 li
89.8008 189.161 li
90.6629 186.528 91.7319 184.563 92.8165 183.092 cv
64.6119 190.662 li
36.9324 183.232 li
cp
.286275 .168627 .207843 rgb
f
84.4468 194.243 mo
84.4468 197.439 81.8559 200.03 78.6598 200.03 cv
75.4638 200.03 72.8729 197.439 72.8729 194.243 cv
72.8729 191.047 75.4638 188.456 78.6598 188.456 cv
81.8559 188.456 84.4468 191.047 84.4468 194.243 cv
cp
.027451 .027451 .027451 rgb
f
83.7184 194.243 mo
83.7184 197.037 81.4536 199.302 78.6598 199.302 cv
75.8661 199.302 73.6012 197.037 73.6012 194.243 cv
73.6012 191.449 75.8661 189.185 78.6598 189.185 cv
81.4536 189.185 83.7184 191.449 83.7184 194.243 cv
cp
.976471 .960784 .956863 rgb
f
83.2575 194.243 mo
83.2575 196.783 81.1991 198.841 78.6598 198.841 cv
76.1206 198.841 74.0621 196.783 74.062 194.243 cv
74.062 191.704 76.1205 189.645 78.6598 189.645 cv
81.199 189.645 83.2575 191.704 83.2575 194.243 cv
cp
.027451 .027451 .027451 rgb
f
78.6598 196.998 mo
77.1384 196.998 75.9052 195.765 75.9052 194.243 cv
75.9052 192.722 77.1384 191.489 78.6598 191.489 cv
80.1811 191.489 81.4144 192.722 81.4144 194.243 cv
81.4144 195.765 80.1812 196.998 78.6598 196.998 cv
cp
78.6598 191.019 mo
76.8789 191.019 75.4353 192.462 75.4351 194.243 cv
75.4351 196.024 76.8789 197.468 78.6598 197.468 cv
80.4407 197.468 81.8843 196.024 81.8843 194.243 cv
81.8843 192.462 80.4407 191.019 78.6598 191.019 cv
cp
.976471 .960784 .956863 rgb
f
79.8373 194.243 mo
79.8373 193.869 79.9766 193.541 80.1684 193.251 cv
79.8393 192.752 79.3016 192.404 78.6598 192.404 cv
78.0338 192.404 77.5082 192.736 77.176 193.214 cv
77.383 193.512 77.5317 193.853 77.5317 194.243 cv
77.5317 194.633 77.383 194.975 77.176 195.273 cv
77.5082 195.75 78.0338 196.083 78.6598 196.083 cv
79.3017 196.083 79.8393 195.734 80.1684 195.236 cv
79.9766 194.945 79.8373 194.617 79.8373 194.243 cv
cp
f
74.2691 323.49 mo
55.4985 323.49 li
55.4985 305.238 li
74.2691 305.238 li
74.2691 323.49 li
cp
.768627 .768627 .768627 rgb
f
55.475 302.82 mo
55.475 307.357 li
74.1713 307.357 li
74.1713 302.82 li
55.475 302.82 li
cp
.866667 .85098 .85098 rgb
f
55.4749 307.187 mo
55.4749 309.646 li
74.1713 309.646 li
74.1713 307.187 li
55.4749 307.187 li
cp
.576471 0 .152941 rgb
f
32.3559 316.697 mo
32.3559 316.697 24.1845 331.256 20.6188 342.251 cv
21.5102 344.925 29.6816 350.422 37.7044 349.828 cv
40.3787 342.548 42.6072 339.428 42.6072 339.428 cv
42.6072 339.428 43.2015 320.411 32.3559 316.697 cv
cp
.956863 .956863 .956863 rgb
f
97.2867 316.697 mo
97.2867 316.697 105.458 331.256 109.024 342.251 cv
108.132 344.925 99.9609 350.422 91.9381 349.828 cv
89.2639 342.548 87.0353 339.428 87.0353 339.428 cv
87.0353 339.428 86.441 320.411 97.2867 316.697 cv
cp
f
85.104 310.457 mo
78.7154 308.079 75.2983 305.257 74.1097 305.257 cv
74.1097 305.257 74.5354 308.891 64.8213 316.118 cv
55.1073 308.891 55.5329 305.257 55.5329 305.257 cv
54.3443 305.257 50.9272 308.079 44.5387 310.457 cv
38.1501 312.834 33.9901 314.319 32.3559 316.697 cv
34.5844 318.479 41.7158 322.491 41.7158 340.765 cv
41.7158 359.039 41.7158 394.993 41.7158 394.993 cv
41.7158 394.993 51.67 397.965 64.7442 397.965 cv
78.5612 397.965 87.9267 394.993 87.9267 394.993 cv
87.9267 394.993 87.9267 359.039 87.9267 340.765 cv
87.9267 322.491 95.0581 318.479 97.2867 316.697 cv
95.6524 314.319 91.4924 312.834 85.104 310.457 cv
cp
f
76.5158 306.325 mo
75.3596 305.678 74.5662 305.257 74.1096 305.257 cv
74.1096 305.257 74.5353 308.891 64.8213 316.118 cv
55.1072 308.891 55.5328 305.257 55.5328 305.257 cv
55.0764 305.257 54.283 305.677 53.1268 306.325 cv
53.5495 309.278 55.3959 311.826 63.2779 318.269 cv
63.2779 332.022 li
66.3484 332.022 li
66.3484 318.281 li
74.2436 311.835 76.0926 309.281 76.5158 306.325 cv
cp
.976471 .976471 .976471 rgb
f
62.5632 318.326 mo
67.0787 318.326 li
73.8036 314.396 76.5157 309.925 76.5157 306.383 cv
76.5157 306.383 74.6279 302.82 74.1713 302.82 cv
74.1713 302.82 74.5353 308.105 64.8212 315.722 cv
55.1072 308.105 55.475 302.82 55.475 302.82 cv
55.0185 302.82 53.1268 306.383 53.1268 306.383 cv
53.1268 309.613 56.3303 314.633 62.5632 318.326 cv
cp
f
88.1581 329.211 mo
86.8894 334.524 87.0354 339.428 87.0354 339.428 cv
87.0354 339.428 89.2639 342.548 91.9381 349.828 cv
93.8591 349.97 95.7864 349.756 97.6225 349.323 cv
92.7678 336.112 88.6727 329.959 88.1581 329.211 cv
cp
.898039 .898039 .898039 rgb
f
78.2617 349.059 mo
77.7495 363.919 76.9789 386.28 76.6014 397.228 cv
83.6388 396.348 87.9267 394.993 87.9267 394.993 cv
87.9267 394.993 87.9267 359.039 87.9267 340.765 cv
87.9267 333.9 88.9335 329.048 90.3085 325.571 cv
84.4923 330.001 78.6737 337.108 78.2617 349.059 cv
cp
f
41.4771 329.183 mo
41.1012 329.723 36.947 335.843 31.9951 349.317 cv
33.8386 349.755 35.7747 349.971 37.7044 349.828 cv
40.3787 342.548 42.6072 339.428 42.6072 339.428 cv
42.6072 339.428 42.753 334.507 41.4771 329.183 cv
cp
f
53.0401 397.2 mo
52.6624 386.241 51.8926 363.906 51.3808 349.059 cv
50.9688 337.108 45.1503 330.001 39.3339 325.571 cv
40.7089 329.048 41.7157 333.899 41.7157 340.765 cv
41.7157 359.039 41.7157 394.993 41.7157 394.993 cv
41.7157 394.993 46.1807 396.319 53.0401 397.2 cv
cp
f
81.921 333.504 mo
81.921 334.112 79.7912 335.138 77.7651 335.736 cv
75.7392 335.138 73.6093 334.111 73.6093 333.504 cv
73.6093 325.651 li
81.921 325.651 li
81.921 333.504 li
cp
73.2493 325.291 mo
73.2493 325.291 73.2493 331.718 73.2493 333.504 cv
73.2493 334.808 77.7651 336.111 77.7651 336.111 cv
77.7651 336.111 82.2809 334.808 82.2809 333.504 cv
82.2809 331.504 82.2809 325.291 82.2809 325.291 cv
73.2493 325.291 li
cp
.678431 .0117647 .156863 rgb
f
81.1931 327.201 mo
81.1931 327.704 80.7854 328.112 80.2825 328.112 cv
75.2834 328.112 li
74.7806 328.112 74.3729 327.704 74.3729 327.201 cv
74.3729 326.698 74.7806 326.291 75.2834 326.291 cv
80.2825 326.291 li
80.7854 326.291 81.1931 326.698 81.1931 327.201 cv
cp
f
81.1931 329.915 mo
81.1931 330.418 80.7854 330.826 80.2825 330.826 cv
75.2834 330.826 li
74.7806 330.826 74.3729 330.418 74.3729 329.915 cv
74.3729 329.412 74.7806 329.004 75.2834 329.004 cv
80.2825 329.004 li
80.7854 329.004 81.1931 329.412 81.1931 329.915 cv
cp
f
81.1931 332.629 mo
81.1931 333.132 80.7854 333.539 80.2825 333.539 cv
75.2834 333.539 li
74.7806 333.539 74.3729 333.132 74.3729 332.629 cv
74.3729 332.126 74.7806 331.718 75.2834 331.718 cv
80.2825 331.718 li
80.7854 331.718 81.1931 332.126 81.1931 332.629 cv
cp
f
64.8212 316.942 mo
73.1454 310.299 74.5843 305.288 74.8271 303.521 cv
74.5457 303.115 74.2998 302.82 74.1713 302.82 cv
74.1713 302.82 74.5353 308.104 64.8212 315.722 cv
55.1072 308.104 55.475 302.82 55.475 302.82 cv
55.3464 302.82 55.1005 303.115 54.8188 303.52 cv
55.0604 305.287 56.4961 310.298 64.8212 316.942 cv
cp
f
132.553 200.579 mo
132.749 204.43 li
133.403 206.393 139.398 210.426 145.285 209.99 cv
148.262 207.546 li
148.262 207.546 141.208 203.544 132.553 200.579 cv
cp
.227451 .337255 .647059 rgb
f
213.833 200.579 mo
213.833 200.579 213.791 202.309 213.815 204.074 cv
213.161 206.036 207.166 210.07 201.279 209.634 cv
200.185 208.844 198.125 207.546 198.125 207.546 cv
198.125 207.546 205.179 203.544 213.833 200.579 cv
cp
f
182.641 185.604 mo
163.87 185.604 li
163.87 167.353 li
182.641 167.353 li
182.641 185.604 li
cp
.172549 .286275 .537255 rgb
f
163.847 163.013 mo
163.847 168.355 li
182.543 168.355 li
182.543 163.013 li
163.847 163.013 li
cp
.866667 .85098 .85098 rgb
f
140.728 178.811 mo
140.728 178.811 135.831 190.471 132.553 200.579 cv
133.372 203.038 140.885 208.092 148.262 207.546 cv
150.72 200.853 150.979 201.543 150.979 201.543 cv
150.979 201.543 151.573 182.526 140.728 178.811 cv
cp
.282353 .384314 .717647 rgb
f
205.659 178.811 mo
205.659 178.811 210.555 190.471 213.833 200.579 cv
213.014 203.038 205.501 208.092 198.125 207.546 cv
195.666 200.853 195.407 201.543 195.407 201.543 cv
195.407 201.543 194.813 182.526 205.659 178.811 cv
cp
f
193.476 172.571 mo
187.087 170.194 183.67 167.372 182.482 167.372 cv
182.482 167.372 182.907 174.334 173.193 181.561 cv
163.479 174.334 163.905 167.372 163.905 167.372 cv
162.716 167.372 159.299 170.194 152.911 172.571 cv
146.522 174.949 142.362 176.434 140.728 178.811 cv
142.956 180.594 150.088 184.606 150.088 202.88 cv
150.088 221.154 150.088 257.108 150.088 257.108 cv
150.088 257.108 160.042 260.079 173.116 260.079 cv
186.933 260.079 196.299 257.108 196.299 257.108 cv
196.299 257.108 196.299 221.154 196.299 202.88 cv
196.299 184.606 203.43 180.594 205.659 178.811 cv
204.024 176.434 199.864 174.949 193.476 172.571 cv
cp
f
184.888 168.44 mo
183.731 167.792 182.938 167.371 182.481 167.371 cv
182.481 167.371 182.907 174.334 173.193 181.561 cv
163.479 174.334 163.905 167.371 163.905 167.371 cv
163.448 167.371 162.655 167.792 161.499 168.44 cv
161.921 171.393 163.053 173.999 170.935 180.441 cv
171.65 194.137 li
174.72 194.137 li
175.451 180.441 li
183.346 173.994 184.465 171.395 184.888 168.44 cv
cp
.227451 .337255 .647059 rgb
f
163.847 163.013 mo
163.39 163.013 161.499 168.498 161.499 168.498 cv
161.499 171.728 164.702 176.747 170.935 180.441 cv
171.651 180.441 li
163.847 163.013 li
cp
1 1 1 rgb
f
182.543 163.013 mo
174.746 180.441 li
175.451 180.441 li
182.175 176.511 184.888 172.04 184.888 168.498 cv
184.888 168.498 183 163.013 182.543 163.013 cv
cp
f
196.53 191.326 mo
195.261 196.639 195.407 201.543 195.407 201.543 cv
195.407 201.543 195.666 200.853 198.125 207.546 cv
199.891 207.677 201.663 207.48 203.351 207.081 cv
198.888 194.935 197.045 192.074 196.53 191.326 cv
cp
.227451 .337255 .647059 rgb
f
186.634 211.174 mo
186.121 226.034 185.351 248.395 184.973 259.343 cv
192.011 258.463 196.299 257.108 196.299 257.108 cv
196.299 257.108 196.299 221.154 196.299 202.88 cv
196.299 196.014 197.305 191.163 198.68 187.686 cv
192.864 192.116 187.046 199.223 186.634 211.174 cv
cp
f
149.849 191.298 mo
149.473 191.838 147.565 194.688 143.012 207.077 cv
144.707 207.479 146.487 207.677 148.262 207.546 cv
150.72 200.853 150.979 201.543 150.979 201.543 cv
150.979 201.543 151.125 196.622 149.849 191.298 cv
cp
f
161.412 259.315 mo
161.034 248.356 160.264 226.021 159.753 211.174 cv
159.341 199.223 153.522 192.116 147.706 187.686 cv
149.081 191.163 150.088 196.014 150.088 202.88 cv
150.088 221.154 150.088 257.108 150.088 257.108 cv
150.088 257.108 154.553 258.434 161.412 259.315 cv
cp
f
182.543 163.013 mo
174.746 180.441 li
175.451 180.441 li
182.175 176.511 184.888 172.04 184.888 168.498 cv
184.888 168.498 183 163.013 182.543 163.013 cv
cp
171.651 180.441 mo
170.935 180.441 li
164.702 176.747 161.499 171.728 161.499 168.498 cv
161.499 168.498 163.39 163.013 163.847 163.013 cv
171.651 180.441 li
cp
.976471 .960784 .956863 rgb
f
183.763 165.445 mo
183.68 165.234 183.597 165.021 183.514 164.819 cv
182.688 168.201 180.492 172.096 176.997 175.41 cv
176.331 176.898 li
180.615 173.275 183.119 169.101 183.763 165.445 cv
cp
.678431 .0117647 .156863 rgb
f
162.612 165.478 mo
163.268 169.14 165.782 173.32 170.084 176.942 cv
169.418 175.456 li
165.908 172.144 163.697 168.244 162.86 164.856 cv
162.778 165.057 162.695 165.267 162.612 165.478 cv
cp
f
184.474 167.335 mo
184.397 167.123 184.32 166.909 184.23 166.666 cv
183.266 170.494 180.455 174.813 175.884 177.897 cv
175.373 179.041 li
180.655 175.74 183.743 171.35 184.474 167.335 cv
cp
.0784314 .545098 .278431 rgb
f
161.901 167.367 mo
162.645 171.384 165.741 175.773 171.036 179.067 cv
170.523 177.924 li
165.944 174.848 163.12 170.532 162.144 166.702 cv
162.054 166.944 161.977 167.156 161.901 167.367 cv
cp
f
181.393 188.717 mo
181.393 188.717 181.393 195.144 181.393 196.93 cv
185.024 199.537 li
188.655 196.93 li
188.655 194.93 188.655 188.717 188.655 188.717 cv
181.393 188.717 li
cp
1 1 1 rgb
f
182.105 196.565 mo
182.105 189.428 li
187.943 189.428 li
187.943 196.565 li
185.024 198.661 li
182.105 196.565 li
cp
.678431 .0117647 .156863 rgb
f
182.105 196.565 mo
182.105 189.428 li
187.943 189.428 li
187.943 196.565 li
185.024 198.661 li
182.105 196.565 li
cp
.172549 .286275 .537255 rgb
f
182.105 191.202 mo
182.105 196.565 li
185.024 198.661 li
187.943 196.565 li
187.943 191.202 li
182.105 191.202 li
cp
1 1 1 rgb
f
186.132 191.202 mo
186.132 197.865 li
187.943 196.565 li
187.943 191.202 li
186.132 191.202 li
cp
.678431 .0117647 .156863 rgb
f
183.832 191.202 mo
182.105 191.202 li
182.105 196.565 li
183.832 197.805 li
183.832 191.202 li
cp
.0784314 .545098 .278431 rgb
f
186.701 194.47 mo
186.701 193.542 185.948 192.789 185.02 192.789 cv
184.091 192.789 183.338 193.542 183.338 194.47 cv
183.338 195.399 184.091 196.152 185.02 196.152 cv
185.948 196.152 186.701 195.399 186.701 194.47 cv
cp
.282353 .384314 .717647 rgb
f
290.04 50.8426 mo
271.269 50.8426 li
271.269 33.383 li
290.04 33.383 li
290.04 50.8426 li
cp
.537255 .0627451 .0313726 rgb
f
271.241 32.604 mo
271.241 35.4434 li
289.974 35.4434 li
289.974 32.604 li
271.241 32.604 li
cp
.337255 .00392157 .00784314 rgb
f
248.126 44.0496 mo
248.126 44.0496 239.955 58.6095 236.389 69.6037 cv
237.281 72.278 245.452 77.7752 253.475 77.1808 cv
256.149 69.9009 258.378 66.7809 258.378 66.7809 cv
258.378 66.7809 258.972 47.7639 248.126 44.0496 cv
.709804 .0941176 .129412 rgb
f
313.057 44.0496 mo
313.057 44.0496 321.229 58.6095 324.794 69.6037 cv
323.903 72.278 315.732 77.7752 307.709 77.1808 cv
305.034 69.9009 302.806 66.7809 302.806 66.7809 cv
302.806 66.7809 302.212 47.7639 313.057 44.0496 cv
f
300.875 37.8095 mo
294.486 35.4326 291.069 32.6097 289.88 32.6097 cv
289.88 32.6097 291.192 47.2946 280.592 47.2946 cv
270.553 47.2946 271.304 32.6097 271.304 32.6097 cv
270.115 32.6097 266.698 35.4326 260.309 37.8095 cv
253.921 40.1867 249.761 41.6725 248.126 44.0495 cv
250.355 45.8325 257.486 49.8438 257.486 68.118 cv
257.486 86.3921 257.486 122.346 257.486 122.346 cv
257.486 122.346 267.441 125.318 280.515 125.318 cv
294.332 125.318 303.697 122.346 303.697 122.346 cv
303.697 122.346 303.697 86.3921 303.697 68.118 cv
303.697 49.8438 310.829 45.8325 313.057 44.0495 cv
311.423 41.6725 307.263 40.1867 300.875 37.8095 cv
f
303.697 122.346 mo
303.697 122.272 303.697 86.5216 303.697 68.2315 cv
304.578 69.7828 306.024 72.6263 307.64 76.9946 cv
306.021 72.6189 304.577 69.7837 303.697 68.2342 cv
303.697 86.5433 303.697 122.346 303.697 122.346 cv
303.697 122.346 li
307.694 77.1423 mo
307.694 77.1399 307.693 77.1376 307.692 77.1351 cv
307.693 77.1373 307.694 77.1401 307.694 77.1423 cv
307.679 77.0995 mo
307.677 77.0954 307.676 77.0919 307.674 77.0878 cv
307.676 77.0918 307.677 77.0955 307.679 77.0995 cv
307.665 77.0622 mo
307.663 77.056 307.66 77.0497 307.658 77.0434 cv
307.66 77.0496 307.663 77.0561 307.665 77.0622 cv
307.65 77.0217 mo
307.647 77.0141 307.644 77.0062 307.641 76.9986 cv
307.644 77.0061 307.647 77.0142 307.65 77.0217 cv
.898039 .898039 .898039 rgb
f
308.908 77.2246 mo
308.509 77.2246 308.108 77.2104 307.709 77.1808 cv
307.709 77.1808 li
307.709 77.1808 li
307.704 77.1679 307.699 77.1552 307.694 77.1423 cv
307.694 77.1401 307.693 77.1373 307.692 77.1351 cv
307.688 77.1234 307.683 77.1112 307.679 77.0995 cv
307.677 77.0955 307.676 77.0918 307.674 77.0878 cv
307.671 77.0794 307.668 77.0707 307.665 77.0622 cv
307.663 77.0561 307.66 77.0496 307.658 77.0434 cv
307.655 77.0361 307.653 77.029 307.65 77.0217 cv
307.647 77.0142 307.644 77.0061 307.641 76.9986 cv
307.641 76.9972 307.641 76.9959 307.64 76.9946 cv
306.024 72.6263 304.578 69.7828 303.697 68.2315 cv
303.697 68.1934 303.697 68.1559 303.697 68.118 cv
303.697 61.254 304.704 56.4019 306.078 52.9247 cv
306.078 52.9244 306.079 52.9242 306.079 52.9239 cv
305.538 54.2926 305.057 55.884 304.669 57.7173 cv
306.146 60.1183 309.525 66.1503 313.393 76.6756 cv
311.939 77.0191 310.428 77.2246 308.908 77.2246 cv
.639216 .0862745 .117647 rgb
f
292.372 124.581 mo
292.749 113.633 293.52 91.2721 294.032 76.4124 cv
294.444 64.4621 300.262 57.3547 306.078 52.9247 cv
304.704 56.4019 303.697 61.254 303.697 68.118 cv
303.697 68.1559 303.697 68.1934 303.697 68.2315 cv
303.697 86.5216 303.697 122.272 303.697 122.346 cv
303.697 122.346 299.409 123.701 292.372 124.581 cv
f
253.49 77.1408 mo
253.49 77.1394 253.491 77.1376 253.491 77.1362 cv
253.491 77.1376 253.49 77.1394 253.49 77.1408 cv
253.506 77.0958 mo
253.506 77.0954 li
253.506 77.0958 li
253.537 77.0115 mo
253.538 77.0104 li
253.538 77.0109 253.538 77.011 253.537 77.0115 cv
253.553 76.9692 mo
253.553 76.9688 253.553 76.968 253.554 76.9675 cv
253.553 76.9681 253.553 76.9687 253.553 76.9692 cv
253.569 76.9267 mo
253.569 76.9265 li
253.569 76.9267 li
253.584 76.885 mo
253.584 76.8846 253.585 76.8842 253.585 76.8838 cv
253.585 76.8843 253.584 76.8845 253.584 76.885 cv
253.615 76.8029 mo
253.615 76.8016 253.616 76.8005 253.616 76.7992 cv
253.616 76.8005 253.615 76.8016 253.615 76.8029 cv
253.631 76.7601 mo
253.631 76.7593 253.631 76.7582 253.632 76.7574 cv
253.631 76.7584 253.631 76.7591 253.631 76.7601 cv
254.601 74.2832 mo
254.601 74.2821 254.602 74.2807 254.602 74.2796 cv
254.602 74.2807 254.601 74.2821 254.601 74.2832 cv
254.614 74.2513 mo
254.615 74.2483 254.616 74.2454 254.617 74.2424 cv
254.616 74.2454 254.615 74.2483 254.614 74.2513 cv
254.628 74.2164 mo
254.63 74.2116 254.632 74.2061 254.634 74.2013 cv
254.632 74.2065 254.63 74.2112 254.628 74.2164 cv
254.636 74.1979 mo
255.8 71.3765 256.81 69.423 257.486 68.2315 cv
257.486 68.2326 257.486 68.2335 257.486 68.2346 cv
256.81 69.4249 255.801 71.3743 254.636 74.1979 cv
.898039 .898039 .898039 rgb
f
252.274 77.2246 mo
250.746 77.2246 249.227 77.0173 247.766 76.6703 cv
251.658 66.0786 255.049 60.0487 256.508 57.6836 cv
256.121 55.864 255.643 54.2845 255.105 52.9239 cv
255.105 52.9242 255.105 52.9245 255.106 52.9248 cv
256.48 56.402 257.486 61.254 257.486 68.118 cv
257.486 68.1559 257.486 68.1935 257.486 68.2315 cv
256.81 69.423 255.8 71.3765 254.636 74.1979 cv
254.635 74.1991 254.635 74.2002 254.634 74.2013 cv
254.632 74.2061 254.63 74.2116 254.628 74.2164 cv
254.625 74.2251 254.621 74.2337 254.617 74.2424 cv
254.616 74.2454 254.615 74.2483 254.614 74.2513 cv
254.61 74.2607 254.606 74.2702 254.602 74.2796 cv
254.602 74.2807 254.601 74.2821 254.601 74.2832 cv
254.288 75.0444 253.964 75.8684 253.632 76.7574 cv
253.631 76.7582 253.631 76.7593 253.631 76.7601 cv
253.626 76.773 253.621 76.7863 253.616 76.7992 cv
253.616 76.8005 253.615 76.8016 253.615 76.8029 cv
253.605 76.8298 253.595 76.8569 253.585 76.8838 cv
253.585 76.8842 253.584 76.8846 253.584 76.885 cv
253.579 76.8988 253.574 76.9128 253.569 76.9265 cv
253.569 76.9267 li
253.564 76.9405 253.559 76.9537 253.554 76.9675 cv
253.553 76.968 253.553 76.9688 253.553 76.9692 cv
253.548 76.9827 253.543 76.9968 253.538 77.0104 cv
253.537 77.0115 li
253.527 77.0394 253.517 77.0674 253.506 77.0954 cv
253.506 77.0958 li
253.501 77.1094 253.496 77.1226 253.491 77.1362 cv
253.491 77.1376 253.49 77.1394 253.49 77.1408 cv
253.485 77.1541 253.48 77.1674 253.475 77.1808 cv
253.475 77.1808 li
253.475 77.1808 li
253.075 77.2104 252.674 77.2246 252.274 77.2246 cv
.639216 .0862745 .117647 rgb
f
268.811 124.553 mo
261.951 123.673 257.486 122.346 257.486 122.346 cv
257.486 122.346 257.486 86.5436 257.486 68.2346 cv
257.486 68.2346 li
257.486 68.2335 257.486 68.2326 257.486 68.2315 cv
257.486 68.1935 257.486 68.1559 257.486 68.118 cv
257.486 61.254 256.48 56.402 255.106 52.9248 cv
260.922 57.3548 266.74 64.462 267.151 76.4124 cv
267.663 91.2592 268.433 113.594 268.811 124.553 cv
f
271.715 37.9114 mo
271.191 35.0369 271.303 32.6096 271.303 32.6096 cv
271.123 32.6509 li
271.123 124.822 li
271.319 124.843 271.516 124.862 271.715 124.881 cv
271.715 37.9114 li
cp
.611765 .0627451 .0627451 rgb
f
268.632 33.8274 mo
268.442 33.9339 268.247 34.0433 268.039 34.1598 cv
268.039 124.451 li
268.234 124.477 268.432 124.504 268.632 124.529 cv
268.632 33.8274 li
cp
f
274.799 44.8714 mo
274.587 44.6445 274.394 44.4008 274.206 44.1524 cv
274.206 125.088 li
274.402 125.101 274.601 125.114 274.799 125.126 cv
274.799 44.8714 li
cp
f
265.548 35.4915 mo
265.353 35.5914 265.16 35.6902 264.955 35.7919 cv
264.955 123.978 li
265.153 124.012 265.343 124.046 265.548 124.08 cv
265.548 35.4915 li
cp
f
259.38 38.1556 mo
259.181 38.2297 258.982 38.3039 258.787 38.3765 cv
258.787 122.695 li
258.97 122.741 259.16 122.789 259.38 122.842 cv
259.38 38.1556 li
cp
f
261.871 123.399 mo
262.067 123.439 262.257 123.479 262.464 123.521 cv
262.464 36.9449 li
262.277 37.0249 262.064 37.1032 261.871 37.1829 cv
261.871 123.399 li
cp
f
280.967 125.312 mo
280.967 47.2611 li
280.837 47.2657 280.726 47.2945 280.592 47.2945 cv
280.374 47.2741 li
280.374 125.316 li
280.515 125.318 li
280.669 125.318 280.814 125.312 280.967 125.312 cv
cp
f
299.47 37.246 mo
299.275 37.1663 299.066 37.0881 298.877 37.0081 cv
298.877 123.524 li
299.085 123.481 299.275 123.44 299.47 123.399 cv
299.47 37.246 li
cp
f
293.302 34.2481 mo
293.089 34.1291 292.904 34.0249 292.71 33.9157 cv
292.71 124.537 li
292.909 124.511 293.107 124.485 293.302 124.459 cv
293.302 34.2481 li
cp
f
296.386 35.8716 mo
296.178 35.7693 295.991 35.6716 295.793 35.5712 cv
295.793 124.09 li
295.999 124.056 296.187 124.021 296.386 123.987 cv
296.386 35.8716 li
cp
f
277.29 125.251 mo
277.489 125.259 277.683 125.27 277.883 125.275 cv
277.883 46.839 li
277.688 46.7735 277.474 46.7316 277.29 46.6525 cv
277.29 125.251 li
cp
f
301.961 122.825 mo
302.184 122.768 302.373 122.718 302.554 122.67 cv
302.554 38.4351 li
302.361 38.3631 302.159 38.2879 301.961 38.2143 cv
301.961 122.825 li
cp
f
284.051 46.6548 mo
283.868 46.7303 283.652 46.7693 283.458 46.8324 cv
283.458 125.269 li
283.659 125.262 283.852 125.253 284.051 125.245 cv
284.051 46.6548 li
cp
f
290.218 32.6869 mo
290.101 32.6551 289.971 32.6096 289.88 32.6096 cv
289.88 32.6096 290.087 35.0613 289.626 37.9549 cv
289.626 124.883 li
289.825 124.864 290.023 124.845 290.218 124.826 cv
290.218 32.6869 li
cp
f
286.542 125.122 mo
286.74 125.11 286.939 125.098 287.135 125.085 cv
287.135 44.2582 li
286.944 44.5003 286.759 44.7472 286.542 44.9681 cv
286.542 125.122 li
cp
f
271.303 32.6096 mo
270.115 32.6096 266.698 35.4325 260.309 37.8096 cv
253.921 40.1868 249.761 41.6725 248.126 44.0495 cv
248.126 44.0495 245.636 48.4907 242.807 54.3118 cv
244.604 56.1087 li
247.376 50.3663 249.868 45.923 249.868 45.923 cv
251.415 43.6735 255.352 42.2675 261.398 40.0178 cv
266.814 38.0025 269.959 35.6642 271.367 35.1961 cv
271.256 33.6669 271.303 32.6096 271.303 32.6096 cv
cp
.968627 .729412 .419608 rgb
f
311.315 45.923 mo
311.315 45.923 314.131 50.9473 317.105 57.2106 cv
317.705 56.6106 318.305 56.0106 318.905 55.4106 cv
315.865 49.0591 313.057 44.0495 313.057 44.0495 cv
311.423 41.6725 307.263 40.1868 300.874 37.8096 cv
294.486 35.4325 291.069 32.6096 289.88 32.6096 cv
289.88 32.6096 289.969 33.6763 289.903 35.2159 cv
291.358 35.7576 294.495 38.0493 299.786 40.0178 cv
305.832 42.2675 309.769 43.6735 311.315 45.923 cv
cp
f
280.605 48.8333 mo
290.924 48.8333 292.286 37.9225 292.286 33.6785 cv
291.13 33.0307 290.337 32.6096 289.88 32.6096 cv
289.88 32.6096 291.058 46.1873 280.592 46.1873 cv
270.865 46.1873 271.303 32.6096 271.303 32.6096 cv
270.847 32.6096 270.054 33.0306 268.897 33.6783 cv
268.897 37.3864 270.374 48.8333 280.605 48.8333 cv
cp
.611765 .0627451 .0627451 rgb
f
299.629 59.7525 mo
299.427 60.1927 297.641 61.1579 295.793 61.8381 cv
293.941 61.1509 292.152 60.181 291.949 59.74 cv
291.827 59.4303 292.056 58.2523 292.193 57.5488 cv
292.444 56.2593 292.648 55.2128 292.277 54.514 cv
293.516 54.0973 295.218 53.9565 295.791 53.9565 cv
296.358 53.9565 298.184 54.0865 299.272 54.4919 cv
298.843 55.2292 299.083 56.3588 299.357 57.6518 cv
299.5 58.3246 299.739 59.4511 299.629 59.7525 cv
cp
299.956 54.9967 mo
301.158 54.9967 299.115 53.4144 295.791 53.4144 cv
292.265 53.4144 290.424 54.9967 291.626 54.9967 cv
292.754 54.9967 291.149 58.7023 291.626 59.8056 cv
292.104 60.909 295.791 62.2101 295.791 62.2101 cv
295.791 62.2101 299.492 60.9151 299.956 59.8056 cv
300.419 58.6962 298.696 54.9967 299.956 54.9967 cv
cp
.968627 .729412 .419608 rgb
f
297.33 55.2871 mo
297.368 55.2039 297.391 55.1132 297.391 55.0161 cv
297.391 54.6486 297.093 54.3507 296.725 54.3507 cv
294.902 54.3507 li
294.534 54.3507 294.237 54.6486 294.237 55.0161 cv
294.237 55.1132 294.26 55.2039 294.297 55.2871 cv
293.492 55.2871 li
293.492 59.9622 li
295.814 61.5146 li
298.136 59.9623 li
298.135 55.2871 li
297.33 55.2871 li
cp
f
394.626 185.604 mo
375.856 185.604 li
375.856 168.145 li
394.626 168.145 li
394.626 185.604 li
cp
.517647 .0509804 .137255 rgb
f
375.828 167.366 mo
375.828 170.205 li
394.561 170.205 li
394.561 167.366 li
375.828 167.366 li
cp
.0705882 .254902 .113725 rgb
f
352.713 178.811 mo
352.713 178.811 344.542 193.371 340.976 204.365 cv
341.868 207.04 350.039 212.537 358.062 211.943 cv
360.736 204.663 362.965 201.543 362.965 201.543 cv
362.965 201.543 363.559 182.526 352.713 178.811 cv
.72549 .137255 .243137 rgb
f
417.644 178.811 mo
417.644 178.811 425.816 193.371 429.381 204.365 cv
428.49 207.04 420.318 212.537 412.296 211.943 cv
409.621 204.663 407.393 201.543 407.393 201.543 cv
407.393 201.543 406.798 182.526 417.644 178.811 cv
f
405.461 172.571 mo
399.073 170.194 395.656 167.372 394.467 167.372 cv
394.467 167.372 395.779 175.3 385.179 175.3 cv
375.139 175.3 375.89 167.372 375.89 167.372 cv
374.702 167.372 371.285 170.194 364.896 172.571 cv
358.508 174.949 354.348 176.434 352.713 178.811 cv
354.942 180.594 362.073 184.606 362.073 202.88 cv
362.073 221.154 362.073 257.108 362.073 257.108 cv
362.073 257.108 372.028 260.079 385.102 260.079 cv
398.919 260.079 408.284 257.108 408.284 257.108 cv
408.284 257.108 408.284 221.154 408.284 202.88 cv
408.284 184.606 415.416 180.594 417.644 178.811 cv
416.01 176.434 411.85 174.949 405.461 172.571 cv
f
410.737 208.014 mo
410.736 208.011 410.734 208.009 410.733 208.006 cv
410.734 208.009 410.735 208.011 410.737 208.014 cv
410.726 207.99 mo
409.734 205.683 408.88 204.045 408.284 202.996 cv
408.284 202.995 408.284 202.994 408.284 202.993 cv
408.88 204.043 409.735 205.685 410.726 207.99 cv
.898039 .898039 .898039 rgb
f
413.495 211.986 mo
413.095 211.986 412.695 211.972 412.296 211.943 cv
412.296 211.943 li
412.296 211.943 li
411.752 210.463 411.228 209.157 410.737 208.014 cv
410.735 208.011 410.734 208.009 410.733 208.006 cv
410.731 208.001 410.729 207.995 410.726 207.99 cv
409.735 205.685 408.88 204.043 408.284 202.993 cv
408.284 202.955 408.284 202.918 408.284 202.88 cv
408.284 196.016 409.29 191.164 410.665 187.687 cv
410.665 187.686 410.666 187.686 410.666 187.686 cv
410.125 189.054 409.644 190.646 409.256 192.479 cv
410.733 194.88 414.112 200.912 417.98 211.437 cv
416.526 211.781 415.015 211.986 413.495 211.986 cv
.65098 .121569 .219608 rgb
f
396.959 259.343 mo
397.336 248.395 398.107 226.034 398.619 211.174 cv
399.031 199.224 404.849 192.117 410.665 187.687 cv
409.29 191.164 408.284 196.016 408.284 202.88 cv
408.284 202.918 408.284 202.955 408.284 202.993 cv
408.284 202.994 408.284 202.995 408.284 202.996 cv
408.284 202.996 408.284 202.996 408.284 202.996 cv
408.284 221.305 408.284 257.108 408.284 257.108 cv
408.284 257.108 403.996 258.463 396.959 259.343 cv
f
357.981 211.948 mo
358.008 211.947 358.035 211.945 358.062 211.943 cv
359.705 207.469 361.18 204.567 362.073 202.993 cv
362.073 202.995 362.073 202.995 362.073 202.996 cv
361.181 204.568 359.708 207.461 358.062 211.943 cv
358.035 211.945 358.008 211.947 357.981 211.948 cv
.898039 .898039 .898039 rgb
f
356.861 211.986 mo
355.333 211.986 353.814 211.779 352.353 211.432 cv
356.245 200.84 359.636 194.81 361.095 192.445 cv
360.708 190.626 360.229 189.046 359.691 187.686 cv
359.692 187.686 359.692 187.686 359.692 187.687 cv
361.067 191.164 362.073 196.016 362.073 202.88 cv
362.073 202.918 362.073 202.955 362.073 202.993 cv
361.18 204.567 359.705 207.469 358.062 211.943 cv
358.035 211.945 358.008 211.947 357.981 211.948 cv
357.607 211.974 357.234 211.986 356.861 211.986 cv
.65098 .121569 .219608 rgb
f
373.398 259.315 mo
366.538 258.434 362.073 257.108 362.073 257.108 cv
362.073 257.108 362.073 221.305 362.073 202.996 cv
362.073 202.996 li
362.073 202.995 362.073 202.995 362.073 202.993 cv
362.073 202.955 362.073 202.918 362.073 202.88 cv
362.073 196.016 361.067 191.164 359.692 187.687 cv
365.508 192.117 371.326 199.224 371.738 211.174 cv
372.25 226.021 373.02 248.356 373.398 259.315 cv
f
385.192 176.516 mo
395.511 176.516 396.873 169.337 396.873 168.44 cv
395.717 167.792 394.924 167.371 394.467 167.371 cv
394.467 167.371 395.645 173.87 385.179 173.87 cv
375.452 173.87 375.89 167.371 375.89 167.371 cv
375.434 167.371 374.64 167.792 373.484 168.44 cv
373.484 168.44 374.961 176.516 385.192 176.516 cv
cp
.262745 .576471 .376471 rgb
f
342.138 201.087 mo
341.852 201.848 341.601 202.585 341.345 203.326 cv
342.576 206.1 350.544 211.334 358.469 210.879 cv
358.799 210.023 359.122 209.216 359.434 208.477 cv
351.611 208.984 343.707 203.951 342.138 201.087 cv
cp
f
428.268 201.087 mo
428.554 201.848 428.805 202.585 429.061 203.326 cv
427.83 206.1 419.862 211.334 411.937 210.879 cv
411.607 210.023 411.284 209.216 410.972 208.477 cv
418.794 208.984 426.699 203.951 428.268 201.087 cv
cp
f
395.171 197.804 mo
397.137 195.837 li
397.137 192.092 li
395.65 192.092 li
393.679 194.063 li
393.679 187.589 li
395.668 189.578 li
397.137 189.578 li
397.137 188.064 li
395.171 186.098 li
401.645 186.098 li
399.652 188.091 li
399.652 189.578 li
401.148 189.578 li
403.136 187.589 li
403.136 194.063 li
401.165 192.092 li
399.652 192.092 li
399.652 195.811 li
401.645 197.804 li
395.171 197.804 li
cp
.364706 .0392157 .109804 rgb
f
395.554 197.645 mo
397.296 195.903 li
397.296 191.933 li
395.585 191.933 li
393.838 193.68 li
393.838 187.973 li
395.602 189.737 li
397.296 189.737 li
397.296 187.999 li
395.554 186.256 li
401.261 186.256 li
399.493 188.025 li
399.493 189.737 li
401.214 189.737 li
402.978 187.973 li
402.978 193.68 li
401.231 191.933 li
399.493 191.933 li
399.493 195.877 li
401.261 197.645 li
395.554 197.645 li
cp
.968627 .729412 .419608 rgb
f
401.297 191.774 mo
402.819 193.296 li
402.819 188.356 li
401.279 189.895 li
399.334 189.895 li
399.334 187.959 li
400.878 186.415 li
395.938 186.415 li
397.455 187.933 li
397.455 189.895 li
395.536 189.895 li
393.997 188.356 li
393.997 193.296 li
395.519 191.774 li
397.455 191.774 li
397.455 195.969 li
395.938 197.486 li
400.878 197.486 li
399.334 195.943 li
399.334 191.774 li
401.297 191.774 li
cp
.639216 .109804 .227451 rgb
f
401.259 188.843 mo
402.08 188.843 400.685 187.411 398.415 187.411 cv
396.007 187.411 394.749 188.843 395.57 188.843 cv
396.34 188.843 395.244 192.196 395.57 193.195 cv
395.896 194.193 398.415 195.37 398.415 195.37 cv
398.415 195.37 400.943 194.199 401.259 193.195 cv
401.576 192.191 400.399 188.843 401.259 188.843 cv
cp
.364706 .0392157 .109804 rgb
f
398.415 195.195 mo
397.686 194.845 395.963 193.886 395.721 193.145 cv
395.589 192.742 395.723 191.828 395.842 191.022 cv
396.015 189.845 396.108 189.109 395.852 188.812 cv
395.779 188.728 395.682 188.684 395.57 188.684 cv
395.479 188.672 li
395.485 188.645 395.513 188.581 395.599 188.488 cv
395.892 188.171 396.859 187.57 398.415 187.57 cv
400.15 187.57 401.27 188.42 401.335 188.676 cv
401.259 188.684 li
401.133 188.684 401.024 188.733 400.944 188.827 cv
400.657 189.164 400.8 190.059 400.966 191.096 cv
401.097 191.911 401.232 192.754 401.108 193.147 cv
400.873 193.891 399.146 194.847 398.415 195.195 cv
cp
.968627 .729412 .419608 rgb
f
398.415 195.018 mo
397.473 194.558 396.067 193.692 395.872 193.096 cv
395.752 192.728 395.889 191.795 395.999 191.045 cv
396.184 189.787 396.274 189.058 395.972 188.708 cv
395.754 188.557 li
396.071 188.249 396.977 187.728 398.415 187.728 cv
399.76 187.728 400.714 188.263 401.051 188.562 cv
400.823 188.724 li
400.488 189.117 400.63 190.001 400.809 191.12 cv
400.931 191.881 401.069 192.742 400.956 193.099 cv
400.768 193.697 399.36 194.56 398.415 195.018 cv
cp
.639216 .109804 .227451 rgb
f
398.416 194.218 mo
397.358 193.661 396.654 193.087 396.55 192.87 cv
396.49 192.615 396.636 191.626 396.706 191.15 cv
396.859 190.105 396.973 189.329 396.791 188.746 cv
397.143 188.593 397.677 188.443 398.415 188.443 cv
399.083 188.443 399.625 188.596 400.007 188.762 cv
399.808 189.389 399.943 190.23 400.104 191.233 cv
400.182 191.722 400.327 192.627 400.275 192.882 cv
400.165 193.104 399.433 193.684 398.416 194.218 cv
cp
.968627 .729412 .419608 rgb
f
398.416 194.038 mo
397.39 193.489 396.801 192.98 396.701 192.816 cv
396.659 192.557 396.807 191.556 396.863 191.173 cv
397.01 190.175 397.118 189.434 396.981 188.841 cv
397.294 188.722 397.771 188.602 398.415 188.602 cv
399.013 188.602 399.491 188.73 399.816 188.855 cv
399.665 189.499 399.796 190.319 399.947 191.258 cv
400.01 191.655 400.156 192.568 400.123 192.828 cv
400.012 193.003 399.386 193.52 398.416 194.038 cv
cp
.364706 .0392157 .109804 rgb
f
398.416 193.858 mo
397.472 193.343 396.966 192.897 396.854 192.758 cv
396.84 192.568 396.895 192.043 397.02 191.196 cv
397.16 190.245 397.264 189.539 397.163 188.945 cv
397.445 188.852 397.865 188.76 398.415 188.76 cv
398.926 188.76 399.344 188.859 399.633 188.958 cv
399.521 189.606 399.647 190.387 399.79 191.282 cv
399.844 191.619 399.982 192.485 399.969 192.771 cv
399.834 192.936 399.283 193.386 398.416 193.858 cv
cp
1 1 1 rgb
f
288.709 185.604 mo
269.939 185.604 li
269.939 167.353 li
288.709 167.353 li
288.709 185.604 li
cp
.847059 .282353 0 rgb
f
269.939 167.353 mo
269.939 169.376 li
288.709 169.376 li
288.709 167.353 li
269.939 167.353 li
cp
1 .294118 0 rgb
f
246.796 178.811 mo
246.796 178.811 238.625 193.371 235.059 204.365 cv
235.95 207.04 244.122 212.537 252.145 211.943 cv
254.819 204.663 257.047 201.543 257.047 201.543 cv
257.047 201.543 257.642 182.526 246.796 178.811 cv
1 .360784 0 rgb
f
311.727 178.811 mo
311.727 178.811 319.898 193.371 323.464 204.365 cv
322.573 207.04 314.401 212.537 306.378 211.943 cv
303.704 204.663 301.475 201.543 301.475 201.543 cv
301.475 201.543 300.881 182.526 311.727 178.811 cv
f
307.578 211.986 mo
307.178 211.986 306.778 211.972 306.378 211.943 cv
306.378 211.943 li
306.368 211.914 306.357 211.886 306.347 211.857 cv
304.716 207.432 303.254 204.556 302.367 202.993 cv
302.367 202.955 302.367 202.918 302.367 202.88 cv
302.367 202.88 li
302.367 202.864 302.367 202.847 302.367 202.832 cv
302.367 202.827 302.367 202.823 302.367 202.817 cv
302.367 202.805 302.367 202.793 302.367 202.781 cv
302.367 202.777 302.367 202.772 302.367 202.768 cv
302.367 202.753 302.367 202.738 302.367 202.722 cv
302.367 202.721 302.367 202.72 302.367 202.718 cv
302.367 202.702 302.367 202.687 302.367 202.671 cv
302.367 202.667 302.367 202.663 302.367 202.658 cv
302.367 202.646 302.367 202.634 302.367 202.622 cv
302.367 202.617 302.367 202.612 302.367 202.608 cv
302.367 202.593 302.368 202.579 302.368 202.565 cv
302.368 202.562 302.368 202.56 302.368 202.557 cv
302.368 202.543 302.368 202.527 302.368 202.513 cv
302.368 202.507 302.368 202.502 302.368 202.497 cv
302.368 202.485 302.368 202.474 302.368 202.462 cv
302.368 202.458 302.368 202.453 302.368 202.45 cv
302.368 202.434 302.368 202.42 302.368 202.404 cv
302.368 202.403 302.368 202.402 302.368 202.401 cv
302.369 202.385 302.369 202.37 302.369 202.354 cv
302.369 202.349 302.369 202.342 302.369 202.337 cv
302.369 202.328 302.369 202.317 302.369 202.308 cv
302.369 202.301 302.369 202.295 302.369 202.288 cv
302.369 202.277 302.37 202.267 302.37 202.256 cv
302.37 202.248 302.37 202.24 302.37 202.232 cv
302.37 202.22 302.37 202.21 302.37 202.198 cv
302.37 202.191 302.37 202.184 302.37 202.177 cv
302.371 202.168 302.371 202.159 302.371 202.15 cv
302.371 202.144 302.371 202.138 302.371 202.131 cv
302.371 202.119 302.371 202.108 302.371 202.096 cv
302.371 202.091 302.371 202.085 302.371 202.08 cv
302.372 202.066 302.372 202.052 302.372 202.039 cv
302.372 202.034 302.372 202.029 302.372 202.023 cv
302.372 202.012 302.372 202.003 302.373 201.992 cv
302.373 201.986 302.373 201.98 302.373 201.974 cv
302.373 201.964 302.373 201.954 302.373 201.944 cv
302.373 201.934 302.373 201.925 302.374 201.915 cv
302.374 201.905 302.374 201.894 302.374 201.884 cv
302.374 201.877 302.374 201.87 302.374 201.862 cv
302.374 201.854 302.375 201.847 302.375 201.839 cv
302.375 201.831 302.375 201.824 302.375 201.815 cv
302.375 201.809 302.375 201.803 302.375 201.797 cv
302.376 201.776 302.376 201.755 302.376 201.735 cv
302.376 201.733 302.376 201.733 302.376 201.732 cv
302.377 201.721 302.377 201.71 302.377 201.699 cv
302.377 201.696 302.377 201.693 302.377 201.69 cv
302.377 201.678 302.378 201.667 302.378 201.656 cv
302.378 201.653 302.378 201.654 302.378 201.652 cv
302.379 201.615 302.379 201.579 302.38 201.542 cv
302.38 201.54 302.38 201.538 302.38 201.535 cv
302.38 201.524 302.381 201.512 302.381 201.501 cv
302.381 201.499 302.381 201.499 302.381 201.496 cv
302.382 201.46 302.382 201.424 302.383 201.387 cv
302.383 201.386 302.383 201.383 302.383 201.382 cv
302.384 201.332 302.386 201.281 302.387 201.231 cv
302.387 201.23 li
302.471 197.802 302.818 194.913 303.335 192.47 cv
304.813 194.874 308.197 200.918 312.063 211.437 cv
310.609 211.781 309.098 211.986 307.578 211.986 cv
.901961 .32549 .00392157 rgb
f
250.944 211.986 mo
249.416 211.986 247.896 211.779 246.435 211.432 cv
250.323 200.854 253.719 194.809 255.181 192.437 cv
255.783 195.268 256.156 198.701 256.156 202.88 cv
256.156 202.918 256.156 202.955 256.156 202.993 cv
255.269 204.557 253.807 207.432 252.176 211.857 cv
252.165 211.886 252.155 211.914 252.145 211.943 cv
252.145 211.943 li
251.744 211.972 251.344 211.986 250.944 211.986 cv
f
299.544 172.571 mo
293.156 170.194 289.738 167.372 288.55 167.372 cv
288.55 167.372 288.976 174.83 279.261 182.056 cv
269.547 174.83 269.973 167.372 269.973 167.372 cv
268.785 167.372 265.367 170.194 258.979 172.571 cv
252.59 174.949 248.43 176.434 246.796 178.811 cv
249.025 180.594 256.156 184.606 256.156 202.88 cv
256.156 221.154 256.156 257.108 256.156 257.108 cv
256.156 257.108 266.11 260.079 279.184 260.079 cv
293.001 260.079 302.367 257.108 302.367 257.108 cv
302.367 257.108 302.367 221.154 302.367 202.88 cv
302.367 184.606 309.498 180.594 311.727 178.811 cv
310.093 176.434 305.933 174.949 299.544 172.571 cv
1 .360784 0 rgb
f
277.697 184.156 mo
279.258 185.37 li
280.824 184.156 li
288.462 177.731 290.258 171.386 290.67 168.44 cv
289.542 167.792 288.768 167.371 288.323 167.371 cv
288.323 167.371 288.738 174.83 279.262 182.056 cv
269.785 174.83 270.2 167.371 270.2 167.371 cv
269.755 167.371 268.981 167.792 267.853 168.44 cv
268.264 171.385 270.06 177.731 277.697 184.156 cv
cp
1 .294118 0 rgb
f
302.367 202.993 mo
302.367 202.993 li
302.367 202.955 302.367 202.918 302.367 202.88 cv
302.367 202.88 li
302.367 202.88 li
302.367 202.918 302.367 202.955 302.367 202.993 cv
302.367 202.832 mo
302.367 202.826 302.367 202.823 302.367 202.817 cv
302.367 202.823 302.367 202.827 302.367 202.832 cv
302.367 202.781 mo
302.367 202.777 302.367 202.772 302.367 202.768 cv
302.367 202.772 302.367 202.777 302.367 202.781 cv
302.367 202.722 mo
302.367 202.721 302.367 202.719 302.367 202.718 cv
302.367 202.72 302.367 202.721 302.367 202.722 cv
302.367 202.671 mo
302.367 202.667 302.367 202.662 302.367 202.658 cv
302.367 202.663 302.367 202.667 302.367 202.671 cv
302.367 202.622 mo
302.367 202.616 302.367 202.613 302.367 202.608 cv
302.367 202.612 302.367 202.617 302.367 202.622 cv
302.368 202.565 mo
302.368 202.563 302.368 202.56 302.368 202.557 cv
302.368 202.56 302.368 202.562 302.368 202.565 cv
302.368 202.513 mo
302.368 202.507 302.368 202.502 302.368 202.497 cv
302.368 202.502 302.368 202.507 302.368 202.513 cv
302.368 202.462 mo
302.368 202.458 302.368 202.453 302.368 202.45 cv
302.368 202.453 302.368 202.458 302.368 202.462 cv
302.368 202.404 mo
302.368 202.403 302.368 202.402 302.368 202.401 cv
302.368 202.402 302.368 202.403 302.368 202.404 cv
302.369 202.354 mo
302.369 202.348 302.369 202.343 302.369 202.337 cv
302.369 202.342 302.369 202.349 302.369 202.354 cv
302.369 202.308 mo
302.369 202.301 302.369 202.295 302.369 202.288 cv
302.369 202.295 302.369 202.301 302.369 202.308 cv
302.37 202.256 mo
302.37 202.248 302.37 202.24 302.37 202.232 cv
302.37 202.24 302.37 202.248 302.37 202.256 cv
302.37 202.198 mo
302.37 202.191 302.37 202.183 302.37 202.177 cv
302.37 202.184 302.37 202.191 302.37 202.198 cv
302.371 202.15 mo
302.371 202.144 302.371 202.138 302.371 202.131 cv
302.371 202.138 302.371 202.144 302.371 202.15 cv
302.371 202.096 mo
302.371 202.091 302.371 202.085 302.371 202.08 cv
302.371 202.085 302.371 202.091 302.371 202.096 cv
302.372 202.039 mo
302.372 202.033 302.372 202.029 302.372 202.023 cv
302.372 202.029 302.372 202.034 302.372 202.039 cv
302.373 201.992 mo
302.373 201.986 302.373 201.979 302.373 201.974 cv
302.373 201.98 302.373 201.986 302.373 201.992 cv
302.373 201.944 mo
302.373 201.933 302.373 201.925 302.374 201.915 cv
302.373 201.925 302.373 201.934 302.373 201.944 cv
302.374 201.884 mo
302.374 201.877 302.374 201.87 302.374 201.862 cv
302.374 201.87 302.374 201.877 302.374 201.884 cv
302.375 201.839 mo
302.375 201.832 302.375 201.823 302.375 201.815 cv
302.375 201.824 302.375 201.831 302.375 201.839 cv
302.375 201.797 mo
302.376 201.776 302.376 201.755 302.376 201.735 cv
302.376 201.755 302.376 201.776 302.375 201.797 cv
302.376 201.732 mo
302.377 201.721 302.377 201.71 302.377 201.699 cv
302.377 201.71 302.377 201.721 302.376 201.732 cv
302.377 201.69 mo
302.377 201.679 302.378 201.666 302.378 201.656 cv
302.378 201.667 302.377 201.678 302.377 201.69 cv
302.378 201.652 mo
302.379 201.615 302.379 201.579 302.38 201.542 cv
302.379 201.579 302.379 201.615 302.378 201.652 cv
302.38 201.535 mo
302.38 201.525 302.381 201.512 302.381 201.501 cv
302.381 201.512 302.38 201.524 302.38 201.535 cv
302.381 201.496 mo
302.382 201.46 302.382 201.423 302.383 201.387 cv
302.382 201.424 302.382 201.46 302.381 201.496 cv
302.383 201.382 mo
302.384 201.331 302.386 201.282 302.387 201.231 cv
302.386 201.281 302.384 201.332 302.383 201.382 cv
.811765 .294118 .00784314 rgb
f
303.335 192.47 mo
303.335 192.47 li
303.723 190.637 304.207 189.055 304.748 187.687 cv
304.748 187.686 304.748 187.686 304.749 187.686 cv
304.207 189.055 303.723 190.637 303.335 192.47 cv
.901961 .32549 .00392157 rgb
f
302.387 201.23 mo
302.471 197.801 302.818 194.913 303.335 192.47 cv
303.335 192.47 li
302.818 194.913 302.471 197.802 302.387 201.23 cv
.811765 .294118 .00784314 rgb
f
291.042 259.343 mo
291.419 248.395 292.19 226.034 292.702 211.174 cv
293.114 199.224 298.932 192.117 304.748 187.687 cv
304.207 189.055 303.723 190.637 303.335 192.47 cv
302.818 194.913 302.471 197.801 302.387 201.23 cv
302.387 201.231 302.387 201.231 302.387 201.231 cv
302.386 201.282 302.384 201.331 302.383 201.382 cv
302.383 201.384 302.383 201.385 302.383 201.387 cv
302.382 201.423 302.382 201.46 302.381 201.496 cv
302.381 201.498 302.381 201.499 302.381 201.501 cv
302.381 201.512 302.38 201.525 302.38 201.535 cv
302.38 201.538 302.38 201.54 302.38 201.542 cv
302.379 201.579 302.379 201.615 302.378 201.652 cv
302.378 201.653 302.378 201.654 302.378 201.656 cv
302.378 201.666 302.377 201.679 302.377 201.69 cv
302.377 201.693 302.377 201.696 302.377 201.699 cv
302.377 201.71 302.377 201.721 302.376 201.732 cv
302.376 201.733 302.376 201.734 302.376 201.735 cv
302.376 201.755 302.376 201.776 302.375 201.797 cv
302.375 201.803 302.375 201.809 302.375 201.815 cv
302.375 201.823 302.375 201.832 302.375 201.839 cv
302.375 201.847 302.374 201.855 302.374 201.862 cv
302.374 201.87 302.374 201.877 302.374 201.884 cv
302.374 201.894 302.374 201.905 302.374 201.915 cv
302.373 201.925 302.373 201.933 302.373 201.944 cv
302.373 201.954 302.373 201.964 302.373 201.974 cv
302.373 201.979 302.373 201.986 302.373 201.992 cv
302.372 202.002 302.372 202.013 302.372 202.023 cv
302.372 202.029 302.372 202.033 302.372 202.039 cv
302.372 202.052 302.372 202.066 302.371 202.08 cv
302.371 202.085 302.371 202.091 302.371 202.096 cv
302.371 202.108 302.371 202.12 302.371 202.131 cv
302.371 202.138 302.371 202.144 302.371 202.15 cv
302.371 202.159 302.371 202.168 302.37 202.177 cv
302.37 202.183 302.37 202.191 302.37 202.198 cv
302.37 202.21 302.37 202.221 302.37 202.232 cv
302.37 202.24 302.37 202.248 302.37 202.256 cv
302.37 202.266 302.369 202.277 302.369 202.288 cv
302.369 202.295 302.369 202.301 302.369 202.308 cv
302.369 202.318 302.369 202.327 302.369 202.337 cv
302.369 202.343 302.369 202.348 302.369 202.354 cv
302.369 202.37 302.369 202.385 302.368 202.401 cv
302.368 202.402 302.368 202.403 302.368 202.404 cv
302.368 202.42 302.368 202.434 302.368 202.45 cv
302.368 202.453 302.368 202.458 302.368 202.462 cv
302.368 202.474 302.368 202.485 302.368 202.497 cv
302.368 202.502 302.368 202.507 302.368 202.513 cv
302.368 202.527 302.368 202.543 302.368 202.557 cv
302.368 202.56 302.368 202.563 302.368 202.565 cv
302.368 202.579 302.367 202.593 302.367 202.608 cv
302.367 202.613 302.367 202.616 302.367 202.622 cv
302.367 202.634 302.367 202.646 302.367 202.658 cv
302.367 202.662 302.367 202.667 302.367 202.671 cv
302.367 202.687 302.367 202.702 302.367 202.718 cv
302.367 202.719 302.367 202.721 302.367 202.722 cv
302.367 202.737 302.367 202.753 302.367 202.768 cv
302.367 202.772 302.367 202.777 302.367 202.781 cv
302.367 202.793 302.367 202.805 302.367 202.817 cv
302.367 202.823 302.367 202.826 302.367 202.832 cv
302.367 202.847 302.367 202.864 302.367 202.88 cv
302.367 202.88 li
302.367 202.918 302.367 202.955 302.367 202.993 cv
302.367 202.993 li
302.367 221.283 302.367 257.034 302.367 257.108 cv
302.367 257.108 298.079 258.463 291.042 259.343 cv
.901961 .32549 .00392157 rgb
f
256.156 257.108 mo
256.156 257.108 256.156 257.108 256.156 257.108 cv
256.156 257.108 256.156 221.303 256.156 202.993 cv
256.156 202.993 li
256.156 221.287 256.156 257.047 256.156 257.108 cv
.901961 .901961 .901961 rgb
f
256.156 202.993 mo
256.156 202.993 li
256.156 202.993 li
256.156 202.993 li
256.156 202.993 li
255.181 192.437 mo
254.794 190.618 254.312 189.047 253.774 187.686 cv
253.774 187.686 253.775 187.686 253.775 187.687 cv
254.313 189.047 254.794 190.618 255.181 192.437 cv
255.181 192.437 255.181 192.437 255.181 192.437 cv
.901961 .32549 .00392157 rgb
f
256.156 202.993 mo
256.156 202.955 256.156 202.918 256.156 202.88 cv
256.156 198.701 255.783 195.268 255.181 192.437 cv
255.181 192.437 255.181 192.437 255.181 192.437 cv
255.783 195.268 256.156 198.701 256.156 202.88 cv
256.156 202.918 256.156 202.955 256.156 202.993 cv
256.156 202.993 li
.811765 .294118 .00784314 rgb
f
267.48 259.315 mo
260.64 258.437 256.18 257.115 256.156 257.108 cv
256.156 257.047 256.156 221.287 256.156 202.993 cv
256.156 202.993 li
256.156 202.955 256.156 202.918 256.156 202.88 cv
256.156 198.701 255.783 195.268 255.181 192.437 cv
254.794 190.618 254.313 189.047 253.775 187.687 cv
259.591 192.117 265.409 199.224 265.821 211.174 cv
266.333 226.021 267.103 248.356 267.48 259.315 cv
.901961 .32549 .00392157 rgb
f
295.611 190.741 mo
295.312 190.307 294.791 190.094 294.325 190.338 cv
293.924 190.547 292.574 191.937 293.027 193.424 cv
293.026 193.437 li
293.599 195.756 292.982 195.774 292.546 195.887 cv
292.55 195.691 li
292.504 195.13 292.113 194.682 291.603 194.533 cv
291.884 194.252 292.049 193.859 292.015 193.432 cv
291.99 193.122 291.862 192.847 291.672 192.629 cv
292.62 192.492 293.314 191.647 293.235 190.679 cv
293.153 189.672 292.271 188.923 291.264 189.005 cv
290.258 189.087 289.509 189.969 289.59 190.975 cv
289.631 191.471 289.867 191.903 290.215 192.206 cv
290.02 192.264 289.848 192.367 289.701 192.496 cv
289.363 192.167 289.055 191.579 289.121 190.486 cv
289.153 189.961 288.619 189.571 288.094 189.614 cv
287.57 189.656 287.179 190.116 287.222 190.641 cv
287.257 191.069 287.937 192.704 289.331 193.006 cv
289.295 193.103 li
288.075 193.007 288.071 192.387 287.601 192.425 cv
287.001 192.474 286.555 192.999 286.603 193.599 cv
286.652 194.198 287.193 194.739 287.777 194.596 cv
288.365 194.452 288.886 194.263 289.325 194.067 cv
289.389 194.223 289.479 194.365 289.591 194.487 cv
289.424 194.357 289.211 194.284 288.983 194.303 cv
288.501 194.342 288.142 194.764 288.181 195.246 cv
288.2 195.472 288.304 195.668 288.457 195.812 cv
288.215 195.902 287.982 195.984 287.813 195.998 cv
287.257 196.043 286.842 196.531 286.887 197.088 cv
286.932 197.645 287.421 198.059 287.977 198.014 cv
288.494 197.972 289.541 196.524 289.654 195.87 cv
289.851 195.806 290.027 195.813 290.126 196.122 cv
290.294 196.646 289.754 196.822 289.789 197.262 cv
289.822 197.658 290.169 197.953 290.565 197.921 cv
290.656 197.895 li
290.457 198.256 290.051 198.732 289.175 199.302 cv
288.679 199.624 289.739 200.33 290.328 200.282 cv
290.916 200.234 291.08 199.801 291.483 199.368 cv
292.08 198.728 292.982 197.802 291.22 197.177 cv
291.224 197.145 li
291.215 197.114 li
291.339 197.117 li
291.663 197.09 291.946 196.945 292.16 196.732 cv
292.225 197.077 292.456 197.384 292.803 197.532 cv
293.357 197.768 293.834 197.408 294.232 196.957 cv
295.3 195.747 294.02 194.662 293.991 193.74 cv
293.96 192.778 294.168 191.11 295.359 192.809 cv
295.662 193.24 296.64 192.236 295.611 190.741 cv
cp
.976471 .960784 .956863 rgb
f
394.626 323.49 mo
375.856 323.49 li
375.856 305.238 li
394.626 305.238 li
394.626 323.49 li
cp
.847059 .843137 .839216 rgb
f
394.626 334.587 mo
375.856 334.587 li
375.856 316.335 li
394.626 316.335 li
394.626 334.587 li
cp
.85098 .0352941 .0980392 rgb
f
352.713 316.697 mo
352.713 316.697 344.542 331.256 340.976 342.251 cv
341.868 344.925 350.039 350.422 358.062 349.828 cv
360.736 342.548 362.965 339.428 362.965 339.428 cv
362.965 339.428 363.559 320.411 352.713 316.697 cv
0 .384314 .8 rgb
f
417.644 316.697 mo
417.644 316.697 425.816 331.256 429.381 342.251 cv
428.49 344.925 420.318 350.422 412.296 349.828 cv
409.621 342.548 407.393 339.428 407.393 339.428 cv
407.393 339.428 406.798 320.411 417.644 316.697 cv
f
413.495 349.872 mo
413.095 349.872 412.695 349.857 412.296 349.828 cv
412.296 349.828 li
412.285 349.799 412.275 349.771 412.264 349.743 cv
410.633 345.317 409.172 342.441 408.284 340.878 cv
408.284 340.84 408.284 340.803 408.284 340.765 cv
408.284 340.748 408.284 340.731 408.284 340.715 cv
408.286 340.383 408.304 340.085 408.309 339.761 cv
408.291 339.761 li
408.301 339.087 408.321 338.431 408.351 337.797 cv
408.357 337.797 li
408.384 337.215 408.43 336.674 408.473 336.124 cv
408.452 336.124 li
408.486 335.679 408.524 335.245 408.567 334.821 cv
408.567 334.82 408.568 334.82 408.568 334.819 cv
408.569 334.807 408.57 334.796 408.571 334.783 cv
408.572 334.779 408.572 334.775 408.572 334.772 cv
408.573 334.761 408.575 334.749 408.576 334.739 cv
408.577 334.731 408.577 334.724 408.578 334.716 cv
408.579 334.71 408.579 334.704 408.58 334.698 cv
408.581 334.689 408.582 334.68 408.583 334.671 cv
408.583 334.669 408.583 334.667 408.584 334.664 cv
408.749 333.091 408.976 331.66 409.252 330.356 cv
410.73 332.759 414.114 338.803 417.98 349.322 cv
416.526 349.666 415.015 349.872 413.495 349.872 cv
.00392157 .34902 .721569 rgb
f
357.986 349.833 mo
358.011 349.831 358.036 349.83 358.062 349.828 cv
358.883 347.591 359.663 345.747 360.349 344.266 cv
359.663 345.747 358.884 347.591 358.062 349.828 cv
358.036 349.83 358.011 349.831 357.986 349.833 cv
.901961 .901961 .901961 rgb
f
356.861 349.872 mo
355.333 349.872 353.814 349.664 352.353 349.317 cv
356.24 338.738 359.636 332.693 361.098 330.322 cv
361.461 332.027 361.74 333.951 361.905 336.124 cv
361.885 336.124 li
361.927 336.674 361.973 337.215 362 337.797 cv
362.007 337.797 li
362.028 338.264 362.045 338.742 362.056 339.231 cv
362.056 339.231 li
362.056 339.243 362.056 339.255 362.057 339.267 cv
362.057 339.269 362.057 339.271 362.057 339.273 cv
362.058 339.308 362.058 339.343 362.059 339.378 cv
362.059 339.381 362.059 339.384 362.059 339.387 cv
362.06 339.397 362.06 339.407 362.06 339.417 cv
362.06 339.422 362.06 339.428 362.06 339.433 cv
362.06 339.442 362.061 339.451 362.061 339.461 cv
362.061 339.466 362.061 339.473 362.061 339.479 cv
362.061 339.494 362.062 339.509 362.062 339.524 cv
362.062 339.531 362.062 339.537 362.062 339.545 cv
362.062 339.553 362.063 339.561 362.063 339.569 cv
362.063 339.577 362.063 339.583 362.063 339.591 cv
362.063 339.599 362.063 339.607 362.064 339.615 cv
362.064 339.623 362.064 339.632 362.064 339.64 cv
362.064 339.653 362.064 339.666 362.065 339.679 cv
362.065 339.687 362.065 339.692 362.065 339.7 cv
362.065 339.708 362.065 339.716 362.065 339.724 cv
362.065 339.732 362.066 339.739 362.066 339.747 cv
362.066 339.751 362.066 339.756 362.066 339.761 cv
362.048 339.761 li
362.054 340.102 362.073 340.413 362.073 340.765 cv
362.073 340.765 362.073 340.765 362.073 340.765 cv
362.073 340.765 li
362.073 340.803 362.073 340.84 362.073 340.878 cv
361.627 341.665 361.035 342.784 360.349 344.266 cv
359.663 345.747 358.883 347.591 358.062 349.828 cv
358.036 349.83 358.011 349.831 357.986 349.833 cv
357.611 349.859 357.236 349.872 356.861 349.872 cv
.00392157 .34902 .721569 rgb
f
405.461 310.456 mo
399.073 308.079 395.656 305.257 394.467 305.257 cv
394.467 305.257 394.893 312.715 385.179 319.941 cv
375.465 312.715 375.89 305.257 375.89 305.257 cv
374.702 305.257 371.285 308.079 364.896 310.456 cv
358.508 312.834 354.348 314.319 352.713 316.697 cv
354.942 318.479 362.073 322.491 362.073 340.765 cv
362.073 359.039 362.073 394.993 362.073 394.993 cv
362.073 394.993 372.028 397.964 385.102 397.964 cv
398.919 397.964 408.284 394.993 408.284 394.993 cv
408.284 394.993 408.284 359.039 408.284 340.765 cv
408.284 322.491 415.416 318.479 417.644 316.697 cv
416.01 314.319 411.85 312.834 405.461 310.456 cv
0 .384314 .8 rgb
f
362.073 361.043 mo
362.073 361.377 362.073 361.711 362.073 362.045 cv
408.284 362.045 li
408.284 361.711 408.284 361.377 408.284 361.043 cv
362.073 361.043 li
.129412 .545098 .917647 rgb
f
362.073 353.118 mo
362.073 353.596 362.073 354.074 362.073 354.557 cv
408.284 354.557 li
408.284 354.074 408.284 353.596 408.284 353.118 cv
362.073 353.118 li
f
362.048 339.761 mo
362.054 340.102 362.073 340.413 362.073 340.765 cv
362.073 340.905 362.073 341.056 362.073 341.199 cv
408.284 341.199 li
408.284 341.056 408.284 340.905 408.284 340.765 cv
408.284 340.413 408.304 340.102 408.309 339.761 cv
362.048 339.761 li
f
408.284 363.509 mo
362.073 363.509 li
362.073 363.844 362.073 364.177 362.073 364.511 cv
408.284 364.511 li
408.284 364.177 408.284 363.844 408.284 363.509 cv
f
362.073 350.241 mo
362.073 350.716 362.073 351.198 362.073 351.68 cv
408.284 351.68 li
408.284 351.198 408.284 350.716 408.284 350.241 cv
362.073 350.241 li
f
359.273 324.616 mo
359.507 325.138 359.73 325.695 359.945 326.289 cv
410.412 326.289 li
410.627 325.695 410.851 325.138 411.085 324.616 cv
359.273 324.616 li
f
388.229 317.361 mo
387.734 317.838 387.193 318.318 386.615 318.799 cv
415.08 318.799 li
415.706 318.202 416.283 317.737 416.776 317.361 cv
388.229 317.361 li
cp
f
361.885 336.124 mo
361.927 336.674 361.973 337.215 362 337.797 cv
408.357 337.797 li
408.384 337.215 408.43 336.674 408.473 336.124 cv
361.885 336.124 li
f
382.128 317.361 mo
353.581 317.361 li
354.074 317.737 354.651 318.202 355.277 318.799 cv
383.742 318.799 li
383.165 318.318 382.624 317.838 382.128 317.361 cv
cp
f
360.813 329.139 mo
360.894 329.462 360.969 329.799 361.044 330.141 cv
409.313 330.141 li
409.388 329.799 409.463 329.462 409.544 329.139 cv
360.813 329.139 li
f
416.42 315.439 mo
414.329 313.733 410.643 312.384 405.461 310.456 cv
399.073 308.079 395.656 305.257 394.467 305.257 cv
394.467 305.257 394.622 308.21 392.323 312.2 cv
404.358 312.2 416.42 315.439 416.42 315.439 cv
cp
.956863 .956863 .956863 rgb
f
362.073 367.337 mo
362.073 381.8 362.073 394.993 362.073 394.993 cv
362.073 394.993 372.028 397.964 385.102 397.964 cv
398.919 397.964 408.284 394.993 408.284 394.993 cv
408.284 394.993 408.284 381.8 408.284 367.337 cv
362.073 367.337 li
.0627451 .121569 .337255 rgb
f
377.933 312.023 mo
375.74 308.123 375.89 305.257 375.89 305.257 cv
374.702 305.257 371.285 308.079 364.896 310.456 cv
359.715 312.384 356.028 313.733 353.937 315.439 cv
353.937 315.439 364.987 312.023 377.933 312.023 cv
cp
.956863 .956863 .956863 rgb
f
409.252 330.356 mo
409.252 330.355 li
409.267 330.283 409.283 330.212 409.298 330.141 cv
409.298 330.141 li
409.283 330.212 409.267 330.284 409.252 330.356 cv
409.533 329.139 mo
409.532 329.139 li
409.791 328.104 410.081 327.156 410.394 326.289 cv
410.395 326.289 li
410.081 327.156 409.791 328.103 409.533 329.139 cv
.00392157 .34902 .721569 rgb
f
408.567 334.821 mo
408.568 334.819 li
408.568 334.82 408.567 334.82 408.567 334.821 cv
408.571 334.783 mo
408.572 334.779 408.572 334.775 408.572 334.772 cv
408.572 334.775 408.572 334.779 408.571 334.783 cv
408.576 334.739 mo
408.577 334.731 408.577 334.724 408.578 334.716 cv
408.577 334.724 408.577 334.731 408.576 334.739 cv
408.58 334.698 mo
408.581 334.69 408.582 334.68 408.583 334.671 cv
408.582 334.68 408.581 334.689 408.58 334.698 cv
408.584 334.664 mo
408.748 333.091 408.976 331.659 409.252 330.355 cv
409.252 330.356 li
408.976 331.66 408.749 333.091 408.584 334.664 cv
.00784314 .317647 .65098 rgb
f
408.284 394.993 mo
408.284 394.993 408.284 394.993 408.284 394.993 cv
408.284 394.993 408.284 381.8 408.284 367.337 cv
397.989 367.337 li
398.022 366.392 398.054 365.449 398.087 364.511 cv
408.284 364.511 li
408.284 364.177 408.284 363.844 408.284 363.509 cv
398.121 363.509 li
398.138 363.019 398.155 362.531 398.172 362.045 cv
408.284 362.045 li
408.284 361.711 408.284 361.377 408.284 361.043 cv
398.206 361.043 li
398.283 358.82 398.358 356.646 398.43 354.557 cv
408.284 354.557 li
408.284 354.074 408.284 353.596 408.284 353.118 cv
398.479 353.118 li
398.496 352.633 398.513 352.154 398.529 351.68 cv
408.284 351.68 li
408.284 351.198 408.284 350.716 408.284 350.241 cv
398.578 350.241 li
398.592 349.842 398.606 349.448 398.619 349.059 cv
398.719 346.166 399.136 343.556 399.793 341.199 cv
408.284 341.199 li
408.284 341.056 408.284 340.905 408.284 340.765 cv
408.284 340.765 408.284 340.765 408.284 340.765 cv
408.284 340.765 408.284 340.765 408.284 340.765 cv
408.284 359.039 408.284 394.993 408.284 394.993 cv
408.284 394.993 408.284 394.993 408.284 394.993 cv
408.291 339.761 mo
400.233 339.761 li
400.46 339.084 400.706 338.429 400.971 337.797 cv
408.35 337.797 li
408.321 338.431 408.301 339.086 408.291 339.761 cv
408.452 336.124 mo
401.736 336.124 li
402.873 333.84 404.25 331.862 405.748 330.141 cv
409.298 330.141 li
409.283 330.212 409.267 330.283 409.252 330.355 cv
408.976 331.659 408.748 333.091 408.584 334.664 cv
408.583 334.667 408.583 334.669 408.583 334.671 cv
408.582 334.68 408.581 334.69 408.58 334.698 cv
408.579 334.704 408.579 334.71 408.578 334.716 cv
408.577 334.724 408.577 334.731 408.576 334.739 cv
408.575 334.75 408.574 334.761 408.572 334.772 cv
408.572 334.775 408.572 334.779 408.571 334.783 cv
408.57 334.795 408.569 334.807 408.568 334.819 cv
408.567 334.821 li
408.524 335.245 408.486 335.679 408.452 336.124 cv
409.532 329.139 mo
406.661 329.139 li
407.662 328.088 408.703 327.143 409.754 326.289 cv
410.394 326.289 li
410.081 327.156 409.791 328.104 409.532 329.139 cv
.00392157 .34902 .721569 rgb
f
408.284 362.045 mo
398.172 362.045 li
398.183 361.711 398.195 361.375 398.206 361.043 cv
408.284 361.043 li
408.284 361.377 408.284 361.711 408.284 362.045 cv
.117647 .494118 .827451 rgb
f
408.284 354.557 mo
398.43 354.557 li
398.446 354.073 398.463 353.593 398.479 353.118 cv
408.284 353.118 li
408.284 353.596 408.284 354.074 408.284 354.557 cv
f
408.284 341.199 mo
399.793 341.199 li
399.929 340.708 400.076 340.23 400.233 339.761 cv
408.291 339.761 li
408.286 340.091 408.284 340.425 408.284 340.765 cv
408.284 340.765 408.284 340.765 408.284 340.765 cv
408.284 340.905 408.284 341.056 408.284 341.199 cv
f
408.284 364.511 mo
398.087 364.511 li
398.098 364.176 398.11 363.842 398.121 363.509 cv
408.284 363.509 li
408.284 363.844 408.284 364.177 408.284 364.511 cv
f
408.284 351.68 mo
398.529 351.68 li
398.546 351.194 398.562 350.714 398.578 350.241 cv
408.284 350.241 li
408.284 350.716 408.284 351.198 408.284 351.68 cv
f
410.395 326.289 mo
410.394 326.289 li
409.754 326.289 li
410.057 326.042 410.362 325.803 410.666 325.571 cv
410.574 325.804 410.483 326.043 410.395 326.289 cv
f
408.35 337.797 mo
400.971 337.797 li
401.212 337.222 401.467 336.665 401.736 336.124 cv
408.452 336.124 li
408.411 336.666 408.377 337.223 408.35 337.797 cv
f
409.298 330.141 mo
409.298 330.141 li
405.748 330.141 li
406.048 329.796 406.353 329.462 406.661 329.139 cv
409.532 329.139 li
409.533 329.139 li
409.451 329.464 409.373 329.798 409.298 330.141 cv
f
396.959 397.228 mo
397.199 390.261 397.598 378.673 397.989 367.337 cv
408.284 367.337 li
408.284 381.8 408.284 394.993 408.284 394.993 cv
408.284 394.993 408.284 394.993 408.284 394.993 cv
408.269 394.998 403.984 396.35 396.959 397.228 cv
.0588235 .113725 .305882 rgb
f
361.098 330.322 mo
361.085 330.261 361.072 330.201 361.059 330.141 cv
361.059 330.141 li
361.072 330.2 361.085 330.261 361.098 330.322 cv
361.098 330.322 li
360.825 329.139 mo
360.825 329.139 li
360.566 328.103 360.276 327.156 359.963 326.289 cv
359.963 326.289 li
360.276 327.156 360.567 328.104 360.825 329.139 cv
.00392157 .34902 .721569 rgb
f
362.066 339.761 mo
362.066 339.761 li
362.066 339.756 362.066 339.751 362.066 339.747 cv
362.066 339.751 362.066 339.756 362.066 339.761 cv
362.065 339.724 mo
362.065 339.716 362.065 339.708 362.065 339.7 cv
362.065 339.707 362.065 339.717 362.065 339.724 cv
362.065 339.679 mo
362.064 339.666 362.064 339.653 362.064 339.64 cv
362.064 339.653 362.064 339.666 362.065 339.679 cv
362.064 339.615 mo
362.063 339.607 362.063 339.599 362.063 339.591 cv
362.063 339.599 362.063 339.606 362.064 339.615 cv
362.063 339.569 mo
362.063 339.561 362.062 339.553 362.062 339.545 cv
362.062 339.552 362.063 339.562 362.063 339.569 cv
362.062 339.524 mo
362.062 339.509 362.061 339.494 362.061 339.479 cv
362.061 339.494 362.062 339.509 362.062 339.524 cv
362.061 339.461 mo
362.061 339.451 362.06 339.442 362.06 339.433 cv
362.06 339.443 362.061 339.451 362.061 339.461 cv
362.06 339.417 mo
362.06 339.407 362.06 339.397 362.059 339.387 cv
362.06 339.397 362.06 339.407 362.06 339.417 cv
362.059 339.378 mo
362.058 339.343 362.058 339.308 362.057 339.273 cv
362.058 339.308 362.058 339.343 362.059 339.378 cv
362.057 339.267 mo
362.056 339.255 362.056 339.243 362.056 339.231 cv
362.056 339.243 362.056 339.255 362.057 339.267 cv
362.056 339.231 mo
362.045 338.742 362.028 338.264 362.007 337.797 cv
362.007 337.797 li
362.028 338.264 362.045 338.742 362.056 339.231 cv
361.905 336.124 mo
361.905 336.124 li
361.74 333.951 361.461 332.027 361.098 330.322 cv
361.098 330.322 li
361.461 332.027 361.74 333.95 361.905 336.124 cv
.00784314 .317647 .65098 rgb
f
372.368 367.337 mo
362.073 367.337 li
362.073 366.398 362.073 365.457 362.073 364.511 cv
372.271 364.511 li
372.303 365.449 372.336 366.393 372.368 367.337 cv
372.236 363.509 mo
362.073 363.509 li
362.073 363.021 362.073 362.533 362.073 362.045 cv
372.186 362.045 li
372.203 362.532 372.219 363.019 372.236 363.509 cv
372.151 361.043 mo
362.073 361.043 li
362.073 358.858 362.073 356.682 362.073 354.557 cv
371.928 354.557 li
372 356.646 372.075 358.821 372.151 361.043 cv
371.878 353.118 mo
362.073 353.118 li
362.073 352.635 362.073 352.156 362.073 351.68 cv
371.829 351.68 li
371.845 352.153 371.861 352.634 371.878 353.118 cv
371.779 350.241 mo
362.073 350.241 li
362.073 346.972 362.073 343.902 362.073 341.199 cv
370.565 341.199 li
371.222 343.556 371.638 346.166 371.738 349.059 cv
371.752 349.448 371.765 349.843 371.779 350.241 cv
362.073 340.765 mo
362.073 340.765 li
362.073 340.765 li
362.073 340.765 li
362.073 340.765 li
362.073 340.765 362.073 340.765 362.073 340.765 cv
362.073 340.765 362.073 340.765 362.073 340.765 cv
370.124 339.761 mo
362.066 339.761 li
362.066 339.756 362.066 339.751 362.066 339.747 cv
362.066 339.74 362.065 339.732 362.065 339.724 cv
362.065 339.717 362.065 339.707 362.065 339.7 cv
362.065 339.693 362.065 339.686 362.065 339.679 cv
362.064 339.666 362.064 339.653 362.064 339.64 cv
362.064 339.632 362.064 339.623 362.064 339.615 cv
362.063 339.606 362.063 339.599 362.063 339.591 cv
362.063 339.583 362.063 339.576 362.063 339.569 cv
362.063 339.562 362.062 339.552 362.062 339.545 cv
362.062 339.538 362.062 339.531 362.062 339.524 cv
362.062 339.509 362.061 339.494 362.061 339.479 cv
362.061 339.473 362.061 339.466 362.061 339.461 cv
362.061 339.451 362.06 339.443 362.06 339.433 cv
362.06 339.427 362.06 339.422 362.06 339.417 cv
362.06 339.407 362.06 339.397 362.059 339.387 cv
362.059 339.384 362.059 339.381 362.059 339.378 cv
362.058 339.343 362.058 339.308 362.057 339.273 cv
362.057 339.271 362.057 339.269 362.057 339.267 cv
362.056 339.255 362.056 339.243 362.056 339.231 cv
362.056 339.231 li
362.045 338.742 362.028 338.264 362.007 337.797 cv
369.387 337.797 li
369.651 338.429 369.898 339.084 370.124 339.761 cv
368.621 336.124 mo
361.905 336.124 li
361.74 333.95 361.461 332.027 361.098 330.322 cv
361.085 330.261 361.072 330.2 361.059 330.141 cv
364.609 330.141 li
366.108 331.861 367.485 333.84 368.621 336.124 cv
363.696 329.139 mo
360.825 329.139 li
360.567 328.104 360.276 327.156 359.963 326.289 cv
360.604 326.289 li
361.655 327.143 362.696 328.088 363.696 329.139 cv
.00392157 .34902 .721569 rgb
f
372.186 362.045 mo
362.073 362.045 li
362.073 361.711 362.073 361.377 362.073 361.043 cv
372.151 361.043 li
372.163 361.376 372.174 361.71 372.186 362.045 cv
.117647 .494118 .827451 rgb
f
371.928 354.557 mo
362.073 354.557 li
362.073 354.074 362.073 353.596 362.073 353.118 cv
371.878 353.118 li
371.895 353.593 371.911 354.072 371.928 354.557 cv
f
370.565 341.199 mo
362.073 341.199 li
362.073 341.053 362.073 340.909 362.073 340.765 cv
362.073 340.765 li
362.073 340.765 362.073 340.765 362.073 340.765 cv
362.073 340.765 362.073 340.765 362.073 340.765 cv
362.073 340.425 362.071 340.091 362.066 339.761 cv
362.066 339.761 li
370.124 339.761 li
370.281 340.23 370.428 340.708 370.565 341.199 cv
f
372.271 364.511 mo
362.073 364.511 li
362.073 364.177 362.073 363.843 362.073 363.509 cv
372.236 363.509 li
372.248 363.842 372.259 364.176 372.271 364.511 cv
f
371.829 351.68 mo
362.073 351.68 li
362.073 351.197 362.073 350.717 362.073 350.241 cv
371.779 350.241 li
371.795 350.714 371.812 351.194 371.829 351.68 cv
f
360.604 326.289 mo
359.963 326.289 li
359.963 326.289 li
359.874 326.043 359.784 325.804 359.691 325.571 cv
359.996 325.803 360.3 326.042 360.604 326.289 cv
f
369.387 337.797 mo
362.007 337.797 li
362.007 337.797 li
361.98 337.223 361.946 336.666 361.905 336.124 cv
361.905 336.124 li
368.621 336.124 li
368.891 336.665 369.146 337.222 369.387 337.797 cv
f
364.609 330.141 mo
361.059 330.141 li
361.059 330.141 li
360.984 329.798 360.906 329.464 360.825 329.139 cv
360.825 329.139 li
363.696 329.139 li
364.005 329.462 364.309 329.796 364.609 330.141 cv
f
373.398 397.2 mo
366.549 396.321 362.087 394.997 362.073 394.993 cv
362.073 394.993 362.073 394.993 362.073 394.993 cv
362.073 394.993 362.073 381.8 362.073 367.337 cv
372.368 367.337 li
372.758 378.658 373.157 390.23 373.398 397.2 cv
.0588235 .113725 .305882 rgb
f
402.261 333.824 mo
402.261 336.467 399.104 337.779 398.424 338.031 cv
397.745 337.763 394.578 336.378 394.578 333.824 cv
394.578 329.187 li
402.261 329.187 li
402.261 333.824 li
cp
394.175 328.784 mo
394.175 328.784 394.175 332.344 394.175 333.824 cv
394.175 336.998 398.419 338.46 398.419 338.46 cv
398.419 338.46 402.664 337.099 402.664 333.824 cv
402.664 332.091 402.664 328.784 402.664 328.784 cv
394.175 328.784 li
cp
0 .203922 .545098 rgb
f
402.261 333.824 mo
402.261 336.467 399.104 337.779 398.424 338.031 cv
397.745 337.763 394.578 336.378 394.578 333.824 cv
394.578 329.187 li
402.261 329.187 li
402.261 333.824 li
cp
.937255 .92549 .960784 rgb
f
396.472 334.48 mo
399.145 331.807 li
395.245 331.807 li
395.245 333.824 li
395.245 334.053 395.272 334.27 395.311 334.48 cv
396.472 334.48 li
cp
.85098 .0352941 .0980392 rgb
f
400.619 331.807 mo
397.946 334.48 li
401.532 334.48 li
401.568 334.27 401.594 334.054 401.594 333.824 cv
401.594 331.807 li
400.619 331.807 li
cp
f
402.261 331.053 mo
402.261 329.187 li
394.578 329.187 li
394.578 331.053 li
402.261 331.053 li
cp
f
396.192 336.935 mo
395.441 336.415 li
395.441 334.739 li
396.192 334.739 li
396.192 336.935 li
cp
0 .203922 .545098 rgb
f
397.492 337.975 mo
396.741 337.455 li
396.741 334.739 li
397.492 334.739 li
397.492 337.975 li
cp
f
400.756 336.935 mo
401.507 336.415 li
401.507 334.739 li
400.756 334.739 li
400.756 336.935 li
cp
f
399.485 337.975 mo
400.236 337.455 li
400.236 334.739 li
399.485 334.739 li
399.485 337.975 li
cp
f
398.069 337.975 mo
398.82 338.09 li
398.82 334.739 li
398.069 334.739 li
398.069 337.975 li
cp
f
288.142 323.49 mo
269.371 323.49 li
269.371 306.03 li
288.142 306.03 li
288.142 323.49 li
cp
.537255 .0627451 .0313726 rgb
f
269.343 305.251 mo
269.343 308.09 li
288.077 308.09 li
288.077 305.251 li
269.343 305.251 li
cp
.337255 .00392157 .00784314 rgb
f
246.228 316.697 mo
246.228 316.697 238.057 331.256 234.491 342.251 cv
235.383 344.925 243.554 350.422 251.577 349.828 cv
254.251 342.548 256.48 339.428 256.48 339.428 cv
256.48 339.428 257.074 320.411 246.228 316.697 cv
.709804 .0941176 .129412 rgb
f
311.159 316.697 mo
311.159 316.697 319.331 331.256 322.896 342.251 cv
322.005 344.925 313.833 350.422 305.811 349.828 cv
303.136 342.548 300.908 339.428 300.908 339.428 cv
300.908 339.428 300.314 320.411 311.159 316.697 cv
f
298.977 310.456 mo
292.588 308.079 289.171 305.257 287.982 305.257 cv
287.982 305.257 289.294 319.941 278.694 319.941 cv
268.655 319.941 269.405 305.257 269.405 305.257 cv
268.217 305.257 264.8 308.079 258.411 310.456 cv
252.023 312.834 247.863 314.319 246.228 316.697 cv
248.457 318.479 255.588 322.491 255.588 340.765 cv
255.588 359.039 255.588 394.993 255.588 394.993 cv
255.588 394.993 265.543 397.964 278.617 397.964 cv
292.434 397.964 301.799 394.993 301.799 394.993 cv
301.799 394.993 301.799 359.039 301.799 340.765 cv
301.799 322.491 308.931 318.479 311.159 316.697 cv
309.525 314.319 305.365 312.834 298.977 310.456 cv
f
301.799 394.993 mo
301.799 394.993 301.799 394.993 301.799 394.993 cv
301.799 394.993 301.799 359.188 301.799 340.878 cv
302.466 342.053 303.457 343.969 304.601 346.727 cv
303.456 343.967 302.466 342.055 301.799 340.881 cv
301.799 359.19 301.799 394.993 301.799 394.993 cv
301.799 394.993 li
305.796 349.788 mo
305.796 349.787 305.795 349.785 305.794 349.783 cv
305.795 349.785 305.796 349.787 305.796 349.788 cv
305.779 349.743 mo
305.779 349.743 305.779 349.742 305.779 349.742 cv
305.779 349.742 305.779 349.743 305.779 349.743 cv
305.764 349.7 mo
305.764 349.7 li
305.764 349.7 li
305.748 349.659 mo
305.748 349.658 305.748 349.657 305.748 349.657 cv
305.748 349.658 305.748 349.658 305.748 349.659 cv
304.612 346.754 mo
304.611 346.751 304.61 346.748 304.609 346.746 cv
304.61 346.748 304.611 346.751 304.612 346.754 cv
.898039 .898039 .898039 rgb
f
307.01 349.872 mo
306.611 349.872 306.21 349.857 305.811 349.828 cv
305.811 349.828 li
305.811 349.828 li
305.806 349.815 305.801 349.802 305.796 349.788 cv
305.796 349.787 305.795 349.785 305.794 349.783 cv
305.789 349.77 305.784 349.756 305.779 349.743 cv
305.779 349.743 305.779 349.742 305.779 349.742 cv
305.774 349.728 305.769 349.714 305.764 349.7 cv
305.764 349.7 li
305.759 349.686 305.754 349.673 305.748 349.659 cv
305.748 349.658 305.748 349.658 305.748 349.657 cv
305.357 348.601 304.977 347.635 304.612 346.754 cv
304.611 346.751 304.61 346.748 304.609 346.746 cv
304.606 346.739 304.604 346.733 304.601 346.727 cv
303.457 343.969 302.466 342.053 301.799 340.878 cv
301.799 340.84 301.799 340.803 301.799 340.765 cv
301.799 333.901 302.806 329.049 304.18 325.572 cv
304.18 325.571 304.181 325.571 304.181 325.571 cv
303.64 326.939 303.159 328.531 302.771 330.364 cv
304.248 332.765 307.627 338.797 311.495 349.322 cv
310.041 349.666 308.53 349.872 307.01 349.872 cv
.639216 .0862745 .117647 rgb
f
290.474 397.228 mo
290.852 386.28 291.622 363.919 292.134 349.059 cv
292.546 337.109 298.364 330.002 304.18 325.572 cv
302.806 329.049 301.799 333.901 301.799 340.765 cv
301.799 340.803 301.799 340.84 301.799 340.878 cv
301.799 359.188 301.799 394.993 301.799 394.993 cv
301.799 394.993 301.799 394.993 301.799 394.993 cv
301.784 394.998 297.499 396.35 290.474 397.228 cv
f
255.612 395 mo
255.596 394.995 255.588 394.993 255.588 394.993 cv
255.588 394.993 255.588 359.191 255.588 340.882 cv
254.706 342.434 253.258 345.278 251.635 349.67 cv
253.255 345.286 254.706 342.433 255.588 340.878 cv
255.588 359.188 255.588 394.993 255.588 394.993 cv
255.588 394.993 255.596 394.995 255.612 395 cv
251.591 349.791 mo
251.592 349.787 251.593 349.784 251.595 349.78 cv
251.593 349.784 251.592 349.787 251.591 349.791 cv
251.607 349.747 mo
251.609 349.741 251.611 349.735 251.613 349.729 cv
251.611 349.735 251.609 349.741 251.607 349.747 cv
251.618 349.717 mo
251.623 349.703 251.628 349.689 251.633 349.675 cv
251.628 349.689 251.623 349.703 251.618 349.717 cv
.898039 .898039 .898039 rgb
f
250.376 349.872 mo
248.848 349.872 247.329 349.664 245.868 349.317 cv
249.76 338.726 253.151 332.696 254.61 330.33 cv
254.223 328.511 253.744 326.931 253.207 325.571 cv
253.207 325.571 253.207 325.571 253.208 325.572 cv
254.582 329.049 255.588 333.901 255.588 340.765 cv
255.588 340.803 255.588 340.84 255.588 340.878 cv
254.706 342.433 253.255 345.286 251.635 349.67 cv
251.634 349.672 251.634 349.673 251.633 349.675 cv
251.628 349.689 251.623 349.703 251.618 349.717 cv
251.616 349.721 251.615 349.725 251.613 349.729 cv
251.611 349.735 251.609 349.741 251.607 349.747 cv
251.603 349.758 251.599 349.769 251.595 349.78 cv
251.593 349.784 251.592 349.787 251.591 349.791 cv
251.586 349.803 251.582 349.815 251.577 349.828 cv
251.577 349.828 li
251.577 349.828 li
251.177 349.857 250.776 349.872 250.376 349.872 cv
.639216 .0862745 .117647 rgb
f
266.913 397.2 mo
260.342 396.357 255.969 395.104 255.612 395 cv
255.596 394.995 255.588 394.993 255.588 394.993 cv
255.588 394.993 255.588 359.188 255.588 340.878 cv
255.588 340.84 255.588 340.803 255.588 340.765 cv
255.588 333.901 254.582 329.049 253.208 325.572 cv
259.024 330.002 264.841 337.109 265.253 349.059 cv
265.765 363.906 266.535 386.241 266.913 397.2 cv
f
269.405 305.257 mo
268.217 305.257 264.8 308.079 258.411 310.457 cv
252.023 312.834 247.863 314.319 246.228 316.696 cv
246.228 316.696 243.738 321.138 240.909 326.959 cv
242.706 328.756 li
245.478 323.013 247.97 318.57 247.97 318.57 cv
249.517 316.32 253.454 314.914 259.5 312.665 cv
264.916 310.649 268.061 308.311 269.469 307.843 cv
269.358 306.314 269.405 305.257 269.405 305.257 cv
cp
.890196 .87451 .882353 rgb
f
309.417 318.57 mo
309.417 318.57 312.233 323.594 315.207 329.858 cv
315.807 329.258 316.407 328.658 317.007 328.057 cv
313.966 321.706 311.159 316.696 311.159 316.696 cv
309.525 314.319 305.365 312.834 298.977 310.457 cv
292.588 308.079 289.171 305.257 287.982 305.257 cv
287.982 305.257 288.071 306.323 288.005 307.863 cv
289.46 308.405 292.597 310.696 297.888 312.665 cv
303.934 314.914 307.87 316.32 309.417 318.57 cv
cp
f
278.698 321.296 mo
278.698 321.296 290.347 316.919 290.388 306.325 cv
289.232 305.678 288.386 305.043 287.982 305.257 cv
287.982 314.084 278.694 319.256 278.694 319.256 cv
278.694 319.256 269.405 314.836 269.405 305.257 cv
269.405 304.8 268.155 305.677 266.999 306.325 cv
266.999 318.409 278.698 321.296 278.698 321.296 cv
cp
f
234.998 340.772 mo
234.824 341.268 234.648 341.767 234.491 342.251 cv
235.383 344.925 243.554 350.422 251.577 349.828 cv
251.757 349.337 251.929 348.913 252.105 348.459 cv
244.22 348.666 236.437 343.608 234.998 340.772 cv
cp
.878431 .0392157 .121569 rgb
f
235.464 339.514 mo
235.29 340.01 235.114 340.509 234.957 340.993 cv
235.849 343.667 244.02 349.164 252.043 348.57 cv
252.223 348.079 252.395 347.655 252.571 347.201 cv
244.686 347.408 236.903 342.351 235.464 339.514 cv
cp
.890196 .87451 .882353 rgb
f
322.387 340.772 mo
322.561 341.268 322.737 341.767 322.894 342.251 cv
322.003 344.925 313.831 350.422 305.808 349.828 cv
305.628 349.337 305.456 348.913 305.281 348.459 cv
313.165 348.666 320.948 343.608 322.387 340.772 cv
cp
.878431 .0392157 .121569 rgb
f
321.921 339.514 mo
322.095 340.01 322.271 340.509 322.428 340.993 cv
321.537 343.667 313.365 349.164 305.342 348.57 cv
305.162 348.079 304.99 347.655 304.815 347.201 cv
312.7 347.408 320.482 342.351 321.921 339.514 cv
cp
.890196 .87451 .882353 rgb
f
240.655 327.419 mo
240.427 327.904 240.217 328.401 240.002 328.895 cv
241.813 330.356 243.848 331.614 246.007 332.378 cv
246.292 331.993 246.552 331.667 246.824 331.315 cv
244.582 330.402 242.507 328.993 240.655 327.419 cv
cp
.878431 .0392157 .121569 rgb
f
241.217 326.289 mo
240.978 326.768 240.734 327.244 240.508 327.731 cv
242.374 329.27 244.492 330.598 246.74 331.393 cv
247.025 331.008 247.285 330.682 247.557 330.33 cv
245.246 329.39 243.11 327.923 241.217 326.289 cv
cp
.890196 .87451 .882353 rgb
f
316.724 327.419 mo
316.952 327.904 317.163 328.401 317.377 328.895 cv
315.566 330.356 313.531 331.614 311.372 332.378 cv
311.087 331.993 310.827 331.667 310.556 331.315 cv
312.798 330.402 314.872 328.993 316.724 327.419 cv
cp
.878431 .0392157 .121569 rgb
f
316.162 326.289 mo
316.401 326.768 316.646 327.244 316.871 327.731 cv
315.005 329.27 312.888 330.598 310.639 331.393 cv
310.354 331.008 310.094 330.682 309.823 330.33 cv
312.134 329.39 314.269 327.923 316.162 326.289 cv
cp
.890196 .87451 .882353 rgb
f
277.66 319.775 mo
272.095 317.141 268.674 313.793 268.035 305.722 cv
267.703 305.918 267.353 306.127 266.999 306.325 cv
266.999 315.208 273.242 319.035 276.593 320.537 cv
276.593 320.537 277.236 320.212 277.66 319.775 cv
cp
.878431 .0392157 .121569 rgb
f
289.344 305.72 mo
289.53 315.324 277.476 321.059 277.476 321.059 cv
278.707 321.48 li
278.707 321.48 290.388 317.281 290.388 306.325 cv
289.998 306.107 289.658 305.903 289.344 305.72 cv
cp
f
290.838 337.245 mo
289.551 337.245 286.402 334.278 286.402 331.687 cv
286.402 329.758 287.457 329.498 288.49 329.498 cv
288.799 329.498 289.14 329.522 289.5 329.547 cv
289.912 329.576 290.38 329.608 290.866 329.608 cv
291.35 329.608 291.798 329.577 292.23 329.546 cv
292.594 329.521 292.936 329.497 293.249 329.497 cv
294.292 329.497 295.357 329.76 295.357 331.715 cv
295.357 334.757 291.945 337.245 290.838 337.245 cv
cp
.188235 .188235 .203922 rgb
f
294.933 331.715 mo
294.933 334.52 291.763 336.82 290.838 336.82 cv
289.828 336.82 286.826 334.128 286.826 331.687 cv
286.826 329.286 288.464 330.032 290.866 330.032 cv
293.267 330.032 294.933 329.275 294.933 331.715 cv
cp
.811765 .686275 .313726 rgb
f
290.866 330.765 mo
289.527 330.765 288.478 329.981 288.478 328.98 cv
288.478 327.867 289.685 327.867 290.406 327.867 cv
291.325 327.867 li
292.046 327.867 293.253 327.867 293.253 328.98 cv
293.253 329.981 292.204 330.765 290.866 330.765 cv
cp
.188235 .188235 .203922 rgb
f
288.902 328.98 mo
288.902 328.229 289.781 328.293 290.866 328.293 cv
291.95 328.293 292.829 328.229 292.829 328.98 cv
292.829 329.732 291.95 330.341 290.866 330.341 cv
289.781 330.341 288.902 329.732 288.902 328.98 cv
cp
.811765 .686275 .313726 rgb
f
294.189 330.672 mo
294.718 331.174 292.144 335.438 290.866 336.652 cv
289.603 335.474 287.029 331.159 287.542 330.672 cv
288.717 329.557 293.014 329.557 294.189 330.672 cv
cp
.188235 .188235 .203922 rgb
f
290.865 336.4 mo
289.594 334.935 287.76 331.59 287.739 330.829 cv
288.262 330.394 289.496 330.106 290.866 330.106 cv
292.239 330.106 293.476 330.396 293.996 330.833 cv
293.991 331.578 292.171 334.893 290.865 336.4 cv
cp
.811765 .686275 .313726 rgb
f
290.864 335.876 mo
289.69 334.355 288.313 331.801 288.053 330.908 cv
288.552 330.635 289.554 330.383 290.865 330.383 cv
292.185 330.383 293.19 330.638 293.686 330.913 cv
293.436 331.786 292.055 334.339 290.864 335.876 cv
cp
.909804 .870588 .294118 rgb
f
290.024 330.421 mo
289.127 330.5 288.439 330.697 288.053 330.908 cv
288.253 331.592 289.107 333.25 290.024 334.672 cv
290.024 330.421 li
cp
.215686 .196078 .180392 rgb
f
291.763 330.425 mo
291.763 334.589 li
292.669 333.178 293.498 331.57 293.686 330.913 cv
293.31 330.704 292.64 330.508 291.763 330.425 cv
cp
.854902 .258824 .152941 rgb
f
56.2959 143.067 mo
57.627 143.067 58.5024 142.611 58.5024 141.388 cv
58.5024 140.141 57.627 139.637 56.5117 139.637 cv
54.7725 139.637 li
54.7725 143.067 li
56.2959 143.067 li
cp
54.7725 139.061 mo
56.4277 139.061 li
57.4229 139.061 58.1309 138.51 58.1309 137.55 cv
58.1309 136.447 57.3394 136.051 55.96 136.051 cv
54.7725 136.051 li
54.7725 139.061 li
cp
59.2461 141.388 mo
59.2461 142.96 58.0947 143.667 56.2959 143.667 cv
54.0527 143.667 li
54.0527 135.452 li
55.8877 135.452 li
57.7588 135.452 58.8623 136.111 58.8623 137.502 cv
58.8623 138.558 58.2148 139.157 57.3511 139.314 cv
58.3467 139.421 59.2461 139.973 59.2461 141.388 cv
cp
.34902 .34902 .34902 rgb
f
64.2271 137.335 mo
64.0952 137.994 li
63.915 137.946 63.7593 137.922 63.5435 137.922 cv
62.668 137.922 62.2002 138.546 61.8643 139.829 cv
61.8643 143.667 li
61.1689 143.667 li
61.1689 137.395 li
61.7686 137.395 li
61.8286 138.798 li
62.1641 137.766 62.728 137.263 63.6035 137.263 cv
63.8433 137.263 64.0591 137.287 64.2271 137.335 cv
cp
f
68.6074 142.132 mo
68.6074 140.405 li
67.5161 140.405 li
66.2568 140.405 65.5488 140.896 65.5488 141.892 cv
65.5488 142.755 66.0405 143.235 66.8682 143.235 cv
67.6597 143.235 68.2114 142.839 68.6074 142.132 cv
cp
69.3027 142.276 mo
69.3027 142.971 69.4946 143.175 69.8306 143.307 cv
69.6748 143.799 li
69.123 143.691 68.7993 143.415 68.7031 142.744 cv
68.2598 143.463 67.5879 143.799 66.7485 143.799 cv
65.5371 143.799 64.8057 143.044 64.8057 141.928 cv
64.8057 140.609 65.8008 139.889 67.4082 139.889 cv
68.6074 139.889 li
68.6074 139.29 li
68.6074 138.294 68.1997 137.85 67.1563 137.85 cv
66.6523 137.85 66.0767 137.982 65.4531 138.21 cv
65.2729 137.682 li
65.9688 137.406 66.5923 137.263 67.252 137.263 cv
68.6792 137.263 69.3027 137.97 69.3027 139.253 cv
69.3027 142.276 li
cp
f
71.7168 143.067 mo
75.1948 143.067 li
75.123 143.667 li
70.9014 143.667 li
70.9014 143.127 li
74.4033 137.994 li
71.189 137.994 li
71.189 137.395 li
75.2188 137.395 li
75.2188 137.934 li
71.7168 143.067 li
cp
f
76.9009 143.667 mo
76.9009 137.395 li
77.5962 137.395 li
77.5962 143.667 li
76.9009 143.667 li
cp
77.7642 135.14 mo
77.7642 135.415 77.5605 135.644 77.2363 135.644 cv
76.9248 135.644 76.7207 135.415 76.7207 135.14 cv
76.7207 134.864 76.9248 134.636 77.2363 134.636 cv
77.5605 134.636 77.7642 134.864 77.7642 135.14 cv
cp
f
80.7759 142.587 mo
80.7759 142.995 80.9199 143.199 81.292 143.199 cv
81.4355 143.199 81.5796 143.175 81.7114 143.115 cv
81.9033 143.631 li
81.6875 143.727 81.4238 143.799 81.1597 143.799 cv
80.4883 143.799 80.0806 143.415 80.0806 142.587 cv
80.0806 134.84 li
80.7759 134.756 li
80.7759 142.587 li
cp
f
150.935 136.039 mo
149.4 140.812 li
152.458 140.812 li
150.935 136.039 li
cp
149.196 141.424 mo
148.476 143.667 li
147.745 143.667 li
150.491 135.451 li
151.391 135.451 li
154.125 143.667 li
153.37 143.667 li
152.65 141.424 li
149.196 141.424 li
cp
f
158.662 137.334 mo
158.53 137.994 li
158.35 137.946 158.194 137.922 157.979 137.922 cv
157.103 137.922 156.635 138.545 156.299 139.829 cv
156.299 143.667 li
155.604 143.667 li
155.604 137.394 li
156.204 137.394 li
156.264 138.797 li
156.599 137.766 157.163 137.262 158.039 137.262 cv
158.278 137.262 158.494 137.286 158.662 137.334 cv
cp
f
160.2 139.385 mo
160.2 140.392 160.824 140.968 161.783 140.968 cv
162.802 140.968 163.366 140.392 163.366 139.397 cv
163.366 138.414 162.851 137.802 161.783 137.802 cv
160.715 137.802 160.2 138.461 160.2 139.385 cv
cp
164.745 137.526 mo
164.313 137.646 163.762 137.694 163.006 137.706 cv
163.666 138.018 164.074 138.545 164.074 139.409 cv
164.074 140.632 163.222 141.472 161.807 141.472 cv
161.507 141.472 161.231 141.436 160.991 141.352 cv
160.691 141.52 160.512 141.784 160.512 142.071 cv
160.512 142.443 160.751 142.719 161.507 142.719 cv
162.526 142.719 li
163.774 142.719 164.541 143.391 164.541 144.326 cv
164.541 145.454 163.654 146.125 161.819 146.125 cv
159.924 146.125 159.205 145.573 159.205 144.326 cv
159.852 144.326 li
159.864 145.202 160.32 145.549 161.819 145.549 cv
163.282 145.549 163.834 145.106 163.834 144.362 cv
163.834 143.69 163.306 143.319 162.419 143.319 cv
161.399 143.319 li
160.356 143.319 159.852 142.815 159.852 142.215 cv
159.852 141.795 160.104 141.424 160.536 141.148 cv
159.816 140.776 159.48 140.225 159.48 139.385 cv
159.48 138.126 160.404 137.262 161.783 137.262 cv
163.462 137.286 163.918 137.106 164.529 136.854 cv
164.745 137.526 li
cp
f
169.702 140.081 mo
169.702 138.713 169.15 137.838 167.963 137.838 cv
166.991 137.838 166.248 138.557 166.176 140.26 cv
169.702 140.26 li
169.702 140.081 li
cp
170.361 140.8 mo
166.176 140.8 li
166.26 142.503 167.051 143.211 168.131 143.211 cv
168.814 143.211 169.27 142.995 169.822 142.587 cv
170.145 143.031 li
169.558 143.511 168.922 143.798 168.095 143.798 cv
166.439 143.798 165.432 142.599 165.432 140.584 cv
165.432 138.581 166.404 137.262 167.939 137.262 cv
169.57 137.262 170.385 138.449 170.385 140.296 cv
170.385 140.488 170.373 140.68 170.361 140.8 cv
cp
f
176.913 139.181 mo
176.913 143.667 li
176.217 143.667 li
176.217 139.277 li
176.217 138.246 175.797 137.826 175.03 137.826 cv
174.178 137.826 173.602 138.354 173.087 139.121 cv
173.087 143.667 li
172.392 143.667 li
172.392 137.394 li
172.991 137.394 li
173.063 138.461 li
173.555 137.742 174.25 137.262 175.162 137.262 cv
176.301 137.262 176.913 137.97 176.913 139.181 cv
cp
f
182.254 143.403 mo
181.871 143.654 181.438 143.798 180.935 143.798 cv
179.987 143.798 179.4 143.235 179.4 142.144 cv
179.4 137.958 li
178.344 137.958 li
178.344 137.394 li
179.4 137.394 li
179.4 135.895 li
180.095 135.811 li
180.095 137.394 li
181.714 137.394 li
181.63 137.958 li
180.095 137.958 li
180.095 142.107 li
180.095 142.839 180.383 143.199 181.019 143.199 cv
181.367 143.199 181.666 143.103 181.979 142.911 cv
182.254 143.403 li
cp
f
183.492 143.667 mo
183.492 137.394 li
184.187 137.394 li
184.187 143.667 li
183.492 143.667 li
cp
184.355 135.139 mo
184.355 135.415 184.151 135.643 183.827 135.643 cv
183.516 135.643 183.311 135.415 183.311 135.139 cv
183.311 134.863 183.516 134.635 183.827 134.635 cv
184.151 134.635 184.355 134.863 184.355 135.139 cv
cp
f
191.253 139.181 mo
191.253 143.667 li
190.557 143.667 li
190.557 139.277 li
190.557 138.246 190.137 137.826 189.37 137.826 cv
188.518 137.826 187.942 138.354 187.427 139.121 cv
187.427 143.667 li
186.731 143.667 li
186.731 137.394 li
187.331 137.394 li
187.403 138.461 li
187.895 137.742 188.59 137.262 189.502 137.262 cv
190.641 137.262 191.253 137.97 191.253 139.181 cv
cp
f
196.941 142.131 mo
196.941 140.404 li
195.85 140.404 li
194.591 140.404 193.883 140.896 193.883 141.892 cv
193.883 142.755 194.374 143.235 195.202 143.235 cv
195.994 143.235 196.545 142.839 196.941 142.131 cv
cp
197.637 142.275 mo
197.637 142.971 197.829 143.175 198.165 143.307 cv
198.009 143.798 li
197.457 143.69 197.133 143.415 197.037 142.743 cv
196.593 143.462 195.922 143.798 195.082 143.798 cv
193.871 143.798 193.139 143.043 193.139 141.927 cv
193.139 140.608 194.135 139.889 195.742 139.889 cv
196.941 139.889 li
196.941 139.289 li
196.941 138.294 196.534 137.85 195.49 137.85 cv
194.986 137.85 194.411 137.981 193.787 138.21 cv
193.607 137.682 li
194.303 137.406 194.926 137.262 195.586 137.262 cv
197.013 137.262 197.637 137.97 197.637 139.253 cv
197.637 142.275 li
cp
f
157.412 413.767 mo
157.412 415.35 156.513 416.465 154.713 416.465 cv
152.878 416.465 152.015 415.35 152.015 413.767 cv
152.015 408.118 li
152.735 408.118 li
152.735 413.707 li
152.735 415.038 153.335 415.842 154.713 415.842 cv
156.093 415.842 156.681 415.026 156.681 413.707 cv
156.681 408.118 li
157.412 408.118 li
157.412 413.767 li
cp
f
162.957 410.001 mo
162.825 410.66 li
162.645 410.612 162.489 410.589 162.273 410.589 cv
161.398 410.589 160.93 411.212 160.594 412.495 cv
160.594 416.333 li
159.899 416.333 li
159.899 410.06 li
160.498 410.06 li
160.559 411.464 li
160.894 410.433 161.458 409.929 162.333 409.929 cv
162.573 409.929 162.789 409.953 162.957 410.001 cv
cp
f
168.177 416.333 mo
168.141 415.218 li
167.697 415.962 167.061 416.465 166.09 416.465 cv
164.962 416.465 164.315 415.781 164.315 414.546 cv
164.315 410.06 li
165.01 410.06 li
165.01 414.475 li
165.01 415.47 165.43 415.89 166.246 415.89 cv
167.073 415.89 167.649 415.35 168.081 414.606 cv
168.081 410.06 li
168.776 410.06 li
168.776 416.333 li
168.177 416.333 li
cp
f
171.442 412.052 mo
171.442 413.059 172.066 413.635 173.025 413.635 cv
174.045 413.635 174.609 413.059 174.609 412.064 cv
174.609 411.08 174.093 410.469 173.025 410.469 cv
171.958 410.469 171.442 411.128 171.442 412.052 cv
cp
175.988 410.192 mo
175.556 410.313 175.004 410.36 174.249 410.372 cv
174.909 410.685 175.316 411.212 175.316 412.075 cv
175.316 413.299 174.465 414.139 173.05 414.139 cv
172.75 414.139 172.474 414.103 172.234 414.019 cv
171.934 414.186 171.754 414.45 171.754 414.738 cv
171.754 415.11 171.994 415.386 172.75 415.386 cv
173.769 415.386 li
175.017 415.386 175.784 416.058 175.784 416.993 cv
175.784 418.12 174.896 418.792 173.061 418.792 cv
171.166 418.792 170.447 418.24 170.447 416.993 cv
171.095 416.993 li
171.106 417.868 171.563 418.216 173.061 418.216 cv
174.525 418.216 175.077 417.772 175.077 417.029 cv
175.077 416.357 174.549 415.985 173.661 415.985 cv
172.642 415.985 li
171.599 415.985 171.095 415.481 171.095 414.882 cv
171.095 414.462 171.347 414.091 171.778 413.815 cv
171.059 413.442 170.723 412.892 170.723 412.052 cv
170.723 410.792 171.646 409.929 173.025 409.929 cv
174.705 409.953 175.161 409.772 175.772 409.521 cv
175.988 410.192 li
cp
f
181.161 416.333 mo
181.124 415.218 li
180.681 415.962 180.045 416.465 179.074 416.465 cv
177.946 416.465 177.299 415.781 177.299 414.546 cv
177.299 410.06 li
177.994 410.06 li
177.994 414.475 li
177.994 415.47 178.414 415.89 179.229 415.89 cv
180.057 415.89 180.633 415.35 181.064 414.606 cv
181.064 410.06 li
181.76 410.06 li
181.76 416.333 li
181.161 416.333 li
cp
f
187.509 414.798 mo
187.509 413.071 li
186.417 413.071 li
185.158 413.071 184.45 413.563 184.45 414.559 cv
184.45 415.422 184.942 415.901 185.77 415.901 cv
186.561 415.901 187.113 415.506 187.509 414.798 cv
cp
188.204 414.942 mo
188.204 415.638 188.396 415.842 188.732 415.974 cv
188.576 416.465 li
188.024 416.357 187.701 416.081 187.604 415.41 cv
187.161 416.129 186.489 416.465 185.65 416.465 cv
184.438 416.465 183.707 415.71 183.707 414.594 cv
183.707 413.275 184.702 412.556 186.31 412.556 cv
187.509 412.556 li
187.509 411.956 li
187.509 410.96 187.101 410.517 186.058 410.517 cv
185.554 410.517 184.978 410.648 184.354 410.876 cv
184.174 410.349 li
184.87 410.072 185.494 409.929 186.153 409.929 cv
187.581 409.929 188.204 410.637 188.204 411.92 cv
188.204 414.942 li
cp
f
192.622 416.357 mo
192.154 417.725 191.59 418.48 190.055 418.78 cv
189.983 418.24 li
191.242 417.929 191.554 417.436 191.95 416.333 cv
191.71 416.333 li
189.527 410.06 li
190.283 410.06 li
192.178 415.817 li
194.037 410.06 li
194.768 410.06 li
192.622 416.357 li
cp
f
371.84 136.051 mo
371.84 139.253 li
374.683 139.253 li
374.683 139.852 li
371.84 139.852 li
371.84 143.667 li
371.12 143.667 li
371.12 135.451 li
375.223 135.451 li
375.139 136.051 li
371.84 136.051 li
cp
f
379.65 137.334 mo
379.519 137.994 li
379.339 137.946 379.183 137.922 378.967 137.922 cv
378.092 137.922 377.624 138.545 377.288 139.829 cv
377.288 143.667 li
376.593 143.667 li
376.593 137.394 li
377.192 137.394 li
377.252 138.797 li
377.588 137.766 378.151 137.262 379.027 137.262 cv
379.267 137.262 379.482 137.286 379.65 137.334 cv
cp
f
384.031 142.131 mo
384.031 140.404 li
382.939 140.404 li
381.681 140.404 380.973 140.896 380.973 141.892 cv
380.973 142.755 381.464 143.235 382.292 143.235 cv
383.083 143.235 383.635 142.839 384.031 142.131 cv
cp
384.727 142.275 mo
384.727 142.971 384.918 143.175 385.254 143.307 cv
385.099 143.798 li
384.547 143.69 384.223 143.415 384.127 142.743 cv
383.684 143.462 383.012 143.798 382.172 143.798 cv
380.961 143.798 380.229 143.043 380.229 141.927 cv
380.229 140.608 381.225 139.889 382.832 139.889 cv
384.031 139.889 li
384.031 139.289 li
384.031 138.294 383.623 137.85 382.58 137.85 cv
382.076 137.85 381.5 137.981 380.877 138.21 cv
380.696 137.682 li
381.393 137.406 382.016 137.262 382.676 137.262 cv
384.102 137.262 384.727 137.97 384.727 139.253 cv
384.727 142.275 li
cp
f
391.782 139.181 mo
391.782 143.667 li
391.086 143.667 li
391.086 139.277 li
391.086 138.246 390.666 137.826 389.898 137.826 cv
389.047 137.826 388.472 138.354 387.956 139.121 cv
387.956 143.667 li
387.261 143.667 li
387.261 137.394 li
387.86 137.394 li
387.932 138.461 li
388.424 137.742 389.119 137.262 390.031 137.262 cv
391.17 137.262 391.782 137.97 391.782 139.181 cv
cp
f
398.19 137.898 mo
397.843 138.365 li
397.435 138.03 397.027 137.862 396.451 137.862 cv
395.313 137.862 394.509 138.749 394.509 140.56 cv
394.509 142.359 395.3 143.186 396.439 143.186 cv
397.027 143.186 397.447 142.995 397.879 142.647 cv
398.227 143.127 li
397.734 143.546 397.135 143.798 396.428 143.798 cv
394.82 143.798 393.765 142.611 393.765 140.572 cv
393.765 138.557 394.809 137.262 396.415 137.262 cv
397.123 137.262 397.663 137.442 398.19 137.898 cv
cp
f
403.542 140.081 mo
403.542 138.713 402.99 137.838 401.804 137.838 cv
400.832 137.838 400.088 138.557 400.017 140.26 cv
403.542 140.26 li
403.542 140.081 li
cp
404.202 140.8 mo
400.017 140.8 li
400.101 142.503 400.892 143.211 401.972 143.211 cv
402.655 143.211 403.11 142.995 403.662 142.587 cv
403.986 143.031 li
403.398 143.511 402.763 143.798 401.935 143.798 cv
400.28 143.798 399.272 142.599 399.272 140.584 cv
399.272 138.581 400.244 137.262 401.779 137.262 cv
403.41 137.262 404.226 138.449 404.226 140.296 cv
404.226 140.488 404.214 140.68 404.202 140.8 cv
cp
f
47.6216 272.135 mo
47.1895 272.579 li
46.6143 272.135 46.0981 271.932 45.3545 271.932 cv
44.0596 271.932 42.6924 272.927 42.6924 275.529 cv
42.6924 278.048 43.7114 279.188 45.3306 279.188 cv
46.0024 279.188 46.542 279.043 47.0576 278.756 cv
47.0576 275.841 li
45.4507 275.841 li
45.3667 275.241 li
47.7656 275.241 li
47.7656 279.127 li
47.0459 279.547 46.2305 279.799 45.2949 279.799 cv
43.292 279.799 41.9365 278.372 41.9365 275.529 cv
41.9365 272.711 43.6274 271.319 45.3428 271.319 cv
46.3262 271.319 46.9497 271.596 47.6216 272.135 cv
cp
f
53.5981 276.081 mo
53.5981 274.714 53.0464 273.838 51.8594 273.838 cv
50.8877 273.838 50.144 274.558 50.0723 276.261 cv
53.5981 276.261 li
53.5981 276.081 li
cp
54.2578 276.801 mo
50.0723 276.801 li
50.1563 278.504 50.9478 279.211 52.0273 279.211 cv
52.7109 279.211 53.1665 278.995 53.7183 278.588 cv
54.042 279.031 li
53.4541 279.511 52.8188 279.799 51.9912 279.799 cv
50.3359 279.799 49.3286 278.6 49.3286 276.585 cv
49.3286 274.582 50.3003 273.263 51.8354 273.263 cv
53.4663 273.263 54.2817 274.45 54.2817 276.297 cv
54.2817 276.488 54.27 276.681 54.2578 276.801 cv
cp
f
59.3467 273.335 mo
59.2148 273.994 li
59.0347 273.946 58.8789 273.922 58.6631 273.922 cv
57.7876 273.922 57.3198 274.546 56.9839 275.829 cv
56.9839 279.667 li
56.2886 279.667 li
56.2886 273.395 li
56.8882 273.395 li
56.9482 274.798 li
57.2837 273.767 57.8477 273.263 58.7231 273.263 cv
58.9629 273.263 59.1787 273.286 59.3467 273.335 cv
cp
f
68.5117 275.182 mo
68.5117 279.667 li
67.8159 279.667 li
67.8159 275.277 li
67.8159 274.258 67.3965 273.826 66.7485 273.826 cv
65.9932 273.826 65.4653 274.353 64.9858 275.121 cv
64.9858 279.667 li
64.29 279.667 li
64.29 275.277 li
64.29 274.258 63.8701 273.826 63.2227 273.826 cv
62.4668 273.826 61.9272 274.353 61.4595 275.121 cv
61.4595 279.667 li
60.7642 279.667 li
60.7642 273.395 li
61.3638 273.395 li
61.4238 274.462 li
61.8916 273.742 62.5508 273.263 63.3545 273.263 cv
64.1582 273.263 64.7217 273.73 64.9136 274.51 cv
65.3813 273.767 66.0532 273.263 66.8809 273.263 cv
67.8882 273.263 68.5117 273.994 68.5117 275.182 cv
cp
f
74.2021 278.132 mo
74.2021 276.405 li
73.1108 276.405 li
71.8516 276.405 71.1436 276.897 71.1436 277.892 cv
71.1436 278.756 71.6353 279.235 72.4629 279.235 cv
73.2544 279.235 73.8062 278.84 74.2021 278.132 cv
cp
74.8975 278.275 mo
74.8975 278.972 75.0894 279.175 75.4253 279.308 cv
75.2695 279.799 li
74.7178 279.691 74.394 279.415 74.2979 278.743 cv
73.8545 279.463 73.1826 279.799 72.3433 279.799 cv
71.1318 279.799 70.4004 279.043 70.4004 277.928 cv
70.4004 276.608 71.3955 275.889 73.0029 275.889 cv
74.2021 275.889 li
74.2021 275.289 li
74.2021 274.294 73.7944 273.851 72.751 273.851 cv
72.2471 273.851 71.6714 273.982 71.0479 274.21 cv
70.8677 273.683 li
71.5635 273.406 72.187 273.263 72.8467 273.263 cv
74.2739 273.263 74.8975 273.97 74.8975 275.253 cv
74.8975 278.275 li
cp
f
81.9536 275.182 mo
81.9536 279.667 li
81.2578 279.667 li
81.2578 275.277 li
81.2578 274.246 80.8379 273.826 80.0703 273.826 cv
79.2188 273.826 78.6431 274.353 78.1274 275.121 cv
78.1274 279.667 li
77.4321 279.667 li
77.4321 273.395 li
78.0317 273.395 li
78.1035 274.462 li
78.5952 273.742 79.291 273.263 80.2026 273.263 cv
81.3418 273.263 81.9536 273.97 81.9536 275.182 cv
cp
f
86.3232 279.691 mo
85.8555 281.059 85.2915 281.814 83.7563 282.113 cv
83.6846 281.574 li
84.9438 281.262 85.2559 280.771 85.6514 279.667 cv
85.4116 279.667 li
83.2285 273.395 li
83.9844 273.395 li
85.8794 279.151 li
87.7383 273.395 li
88.4697 273.395 li
86.3232 279.691 li
cp
f
46.3008 408.717 mo
46.3008 411.775 li
49.2148 411.775 li
49.2148 412.375 li
46.3008 412.375 li
46.3008 415.733 li
49.8389 415.733 li
49.8389 416.333 li
45.5811 416.333 li
45.5811 408.117 li
49.7549 408.117 li
49.6709 408.717 li
46.3008 408.717 li
cp
f
56.1865 411.848 mo
56.1865 416.333 li
55.4912 416.333 li
55.4912 411.943 li
55.4912 410.912 55.0713 410.492 54.3037 410.492 cv
53.4521 410.492 52.876 411.02 52.3604 411.787 cv
52.3604 416.333 li
51.665 416.333 li
51.665 410.06 li
52.2646 410.06 li
52.3369 411.128 li
52.8281 410.408 53.5234 409.929 54.4355 409.929 cv
55.5742 409.929 56.1865 410.636 56.1865 411.848 cv
cp
f
58.7939 412.052 mo
58.7939 413.059 59.417 413.635 60.377 413.635 cv
61.3965 413.635 61.96 413.059 61.96 412.064 cv
61.96 411.08 61.4443 410.468 60.377 410.468 cv
59.3096 410.468 58.7939 411.128 58.7939 412.052 cv
cp
63.3389 410.192 mo
62.9072 410.313 62.3555 410.36 61.5996 410.372 cv
62.2598 410.685 62.667 411.212 62.667 412.075 cv
62.667 413.299 61.8164 414.139 60.4004 414.139 cv
60.1006 414.139 59.8252 414.103 59.585 414.019 cv
59.2852 414.186 59.1055 414.45 59.1055 414.738 cv
59.1055 415.109 59.3457 415.386 60.1006 415.386 cv
61.1201 415.386 li
62.3672 415.386 63.1348 416.058 63.1348 416.992 cv
63.1348 418.12 62.248 418.792 60.4131 418.792 cv
58.5176 418.792 57.7979 418.24 57.7979 416.992 cv
58.4453 416.992 li
58.458 417.868 58.9131 418.216 60.4131 418.216 cv
61.876 418.216 62.4277 417.772 62.4277 417.028 cv
62.4277 416.357 61.8994 415.985 61.0127 415.985 cv
59.9932 415.985 li
58.9492 415.985 58.4453 415.481 58.4453 414.882 cv
58.4453 414.462 58.6973 414.09 59.1289 413.815 cv
58.4102 413.442 58.0742 412.891 58.0742 412.052 cv
58.0742 410.792 58.9971 409.929 60.377 409.929 cv
62.0557 409.952 62.5117 409.772 63.123 409.521 cv
63.3389 410.192 li
cp
f
65.3447 415.254 mo
65.3447 415.661 65.4883 415.865 65.8604 415.865 cv
66.0039 415.865 66.1484 415.841 66.2803 415.781 cv
66.4717 416.297 li
66.2559 416.393 65.9922 416.465 65.7285 416.465 cv
65.0566 416.465 64.6484 416.081 64.6484 415.254 cv
64.6484 407.506 li
65.3447 407.422 li
65.3447 415.254 li
cp
f
71.3193 414.798 mo
71.3193 413.071 li
70.2275 413.071 li
68.9688 413.071 68.2607 413.563 68.2607 414.558 cv
68.2607 415.422 68.7529 415.901 69.5801 415.901 cv
70.3721 415.901 70.9238 415.506 71.3193 414.798 cv
cp
72.0146 414.941 mo
72.0146 415.638 72.207 415.841 72.543 415.974 cv
72.3867 416.465 li
71.835 416.357 71.5107 416.081 71.415 415.409 cv
70.9717 416.129 70.2998 416.465 69.46 416.465 cv
68.249 416.465 67.5176 415.709 67.5176 414.594 cv
67.5176 413.274 68.5127 412.555 70.1201 412.555 cv
71.3193 412.555 li
71.3193 411.955 li
71.3193 410.96 70.9111 410.517 69.8682 410.517 cv
69.3643 410.517 68.7891 410.648 68.165 410.876 cv
67.9854 410.349 li
68.6807 410.072 69.3047 409.929 69.9639 409.929 cv
71.3916 409.929 72.0146 410.636 72.0146 411.919 cv
72.0146 414.941 li
cp
f
79.0703 411.848 mo
79.0703 416.333 li
78.375 416.333 li
78.375 411.943 li
78.375 410.912 77.9551 410.492 77.1875 410.492 cv
76.3359 410.492 75.7598 411.02 75.2441 411.787 cv
75.2441 416.333 li
74.5488 416.333 li
74.5488 410.06 li
75.1484 410.06 li
75.2207 411.128 li
75.7119 410.408 76.4072 409.929 77.3193 409.929 cv
78.459 409.929 79.0703 410.636 79.0703 411.848 cv
cp
f
85.335 414.726 mo
85.335 411.452 li
84.9639 410.924 84.46 410.504 83.6924 410.504 cv
82.5889 410.504 81.8457 411.452 81.8574 413.215 cv
81.8574 414.966 82.5166 415.89 83.5723 415.89 cv
84.3994 415.89 84.9033 415.47 85.335 414.726 cv
cp
86.0313 416.333 mo
85.4316 416.333 li
85.3477 415.374 li
84.9756 415.997 84.376 416.465 83.4648 416.465 cv
82.001 416.465 81.1133 415.218 81.1133 413.227 cv
81.1133 411.296 82.0371 409.929 83.5723 409.929 cv
84.4238 409.929 84.9756 410.336 85.335 410.78 cv
85.335 407.422 li
86.0313 407.506 li
86.0313 416.333 li
cp
f
164.665 279 mo
164.665 270.784 li
165.384 270.784 li
165.384 279 li
164.665 279 li
cp
f
170.843 278.736 mo
170.46 278.988 170.028 279.132 169.524 279.132 cv
168.577 279.132 167.989 278.568 167.989 277.477 cv
167.989 273.291 li
166.933 273.291 li
166.933 272.728 li
167.989 272.728 li
167.989 271.228 li
168.684 271.145 li
168.684 272.728 li
170.303 272.728 li
170.219 273.291 li
168.684 273.291 li
168.684 277.44 li
168.684 278.173 168.972 278.532 169.608 278.532 cv
169.956 278.532 170.255 278.436 170.567 278.244 cv
170.843 278.736 li
cp
f
175.283 277.465 mo
175.283 275.738 li
174.191 275.738 li
172.932 275.738 172.224 276.229 172.224 277.225 cv
172.224 278.089 172.716 278.568 173.544 278.568 cv
174.335 278.568 174.887 278.173 175.283 277.465 cv
cp
175.978 277.608 mo
175.978 278.305 176.17 278.508 176.506 278.641 cv
176.35 279.132 li
175.798 279.024 175.474 278.748 175.378 278.076 cv
174.935 278.796 174.263 279.132 173.423 279.132 cv
172.212 279.132 171.481 278.376 171.481 277.261 cv
171.481 275.941 172.476 275.222 174.083 275.222 cv
175.283 275.222 li
175.283 274.622 li
175.283 273.627 174.874 273.184 173.831 273.184 cv
173.328 273.184 172.752 273.315 172.128 273.543 cv
171.949 273.016 li
172.644 272.739 173.268 272.596 173.927 272.596 cv
175.355 272.596 175.978 273.303 175.978 274.586 cv
175.978 277.608 li
cp
f
179.149 277.921 mo
179.149 278.328 179.292 278.532 179.665 278.532 cv
179.808 278.532 179.953 278.508 180.084 278.448 cv
180.276 278.964 li
180.06 279.06 179.796 279.132 179.533 279.132 cv
178.861 279.132 178.453 278.748 178.453 277.921 cv
178.453 270.173 li
179.149 270.089 li
179.149 277.921 li
cp
f
183.923 279.024 mo
183.456 280.392 182.892 281.147 181.357 281.446 cv
181.285 280.907 li
182.544 280.595 182.856 280.103 183.251 279 cv
183.011 279 li
180.829 272.728 li
181.584 272.728 li
183.479 278.484 li
185.338 272.728 li
186.07 272.728 li
183.923 279.024 li
cp
f
272.564 136.231 mo
272.133 136.699 li
271.533 136.159 270.981 135.931 270.227 135.931 cv
269.219 135.931 268.523 136.458 268.523 137.322 cv
268.523 138.162 268.967 138.545 270.442 138.989 cv
271.917 139.445 272.816 139.972 272.816 141.423 cv
272.816 142.827 271.749 143.798 270.095 143.798 cv
268.967 143.798 268.14 143.403 267.468 142.767 cv
267.899 142.299 li
268.476 142.839 269.123 143.187 270.082 143.187 cv
271.233 143.187 272.085 142.551 272.085 141.448 cv
272.085 140.453 271.594 140.044 270.13 139.588 cv
268.499 139.085 267.792 138.521 267.792 137.335 cv
267.792 136.17 268.763 135.319 270.202 135.319 cv
271.27 135.319 271.917 135.655 272.564 136.231 cv
cp
f
278.865 140.501 mo
278.865 138.713 278.289 137.837 277.197 137.837 cv
276.395 137.837 275.866 138.318 275.435 138.917 cv
275.435 142.251 li
275.818 142.839 276.37 143.21 277.09 143.21 cv
278.241 143.21 278.865 142.299 278.865 140.501 cv
cp
279.608 140.501 mo
279.608 142.479 278.781 143.798 277.222 143.798 cv
276.43 143.798 275.83 143.439 275.435 142.935 cv
275.435 146.029 li
274.739 146.126 li
274.739 137.394 li
275.339 137.394 li
275.398 138.305 li
275.854 137.669 276.526 137.262 277.33 137.262 cv
278.877 137.262 279.608 138.473 279.608 140.501 cv
cp
f
284.913 142.131 mo
284.913 140.405 li
283.821 140.405 li
282.563 140.405 281.854 140.896 281.854 141.891 cv
281.854 142.755 282.347 143.235 283.174 143.235 cv
283.966 143.235 284.518 142.839 284.913 142.131 cv
cp
285.608 142.275 mo
285.608 142.971 285.801 143.174 286.137 143.307 cv
285.98 143.798 li
285.429 143.691 285.104 143.415 285.009 142.743 cv
284.565 143.462 283.894 143.798 283.054 143.798 cv
281.843 143.798 281.111 143.042 281.111 141.927 cv
281.111 140.608 282.106 139.888 283.714 139.888 cv
284.913 139.888 li
284.913 139.289 li
284.913 138.294 284.505 137.85 283.462 137.85 cv
282.958 137.85 282.383 137.982 281.759 138.21 cv
281.579 137.682 li
282.274 137.406 282.898 137.262 283.558 137.262 cv
284.985 137.262 285.608 137.969 285.608 139.252 cv
285.608 142.275 li
cp
f
288.144 143.667 mo
288.144 137.394 li
288.839 137.394 li
288.839 143.667 li
288.144 143.667 li
cp
289.007 135.139 mo
289.007 135.415 288.803 135.643 288.479 135.643 cv
288.167 135.643 287.964 135.415 287.964 135.139 cv
287.964 134.864 288.167 134.635 288.479 134.635 cv
288.803 134.635 289.007 134.864 289.007 135.139 cv
cp
f
295.904 139.181 mo
295.904 143.667 li
295.209 143.667 li
295.209 139.277 li
295.209 138.246 294.789 137.826 294.021 137.826 cv
293.17 137.826 292.594 138.353 292.078 139.121 cv
292.078 143.667 li
291.383 143.667 li
291.383 137.394 li
291.982 137.394 li
292.055 138.461 li
292.546 137.742 293.241 137.262 294.153 137.262 cv
295.293 137.262 295.904 137.969 295.904 139.181 cv
cp
f
367.227 275.877 mo
368.594 275.877 369.541 275.434 369.541 273.922 cv
369.541 272.531 368.689 272.039 367.25 272.039 cv
366.051 272.039 li
366.051 275.877 li
367.227 275.877 li
cp
367.262 271.451 mo
369.169 271.451 370.297 272.207 370.297 273.91 cv
370.297 275.757 369.014 276.465 367.227 276.465 cv
366.051 276.465 li
366.051 279.667 li
365.331 279.667 li
365.331 271.451 li
367.262 271.451 li
cp
f
372.11 276.537 mo
372.11 278.3 372.818 279.211 374.018 279.211 cv
375.217 279.211 375.948 278.311 375.948 276.513 cv
375.948 274.75 375.241 273.851 374.029 273.851 cv
372.843 273.851 372.11 274.737 372.11 276.537 cv
cp
376.681 276.513 mo
376.681 278.54 375.673 279.799 374.018 279.799 cv
372.351 279.799 371.367 278.552 371.367 276.537 cv
371.367 274.522 372.387 273.263 374.029 273.263 cv
375.697 273.263 376.681 274.462 376.681 276.513 cv
cp
f
381.782 273.335 mo
381.649 273.994 li
381.47 273.946 381.314 273.922 381.098 273.922 cv
380.223 273.922 379.755 274.546 379.419 275.829 cv
379.419 279.667 li
378.724 279.667 li
378.724 273.395 li
379.323 273.395 li
379.383 274.798 li
379.719 273.767 380.282 273.263 381.158 273.263 cv
381.398 273.263 381.614 273.286 381.782 273.335 cv
cp
f
386.174 279.403 mo
385.79 279.655 385.358 279.799 384.854 279.799 cv
383.907 279.799 383.319 279.235 383.319 278.144 cv
383.319 273.958 li
382.264 273.958 li
382.264 273.395 li
383.319 273.395 li
383.319 271.896 li
384.015 271.811 li
384.015 273.395 li
385.634 273.395 li
385.55 273.958 li
384.015 273.958 li
384.015 278.107 li
384.015 278.84 384.303 279.199 384.938 279.199 cv
385.286 279.199 385.586 279.103 385.897 278.911 cv
386.174 279.403 li
cp
f
391.213 279.667 mo
391.177 278.552 li
390.733 279.295 390.098 279.799 389.126 279.799 cv
387.999 279.799 387.351 279.115 387.351 277.88 cv
387.351 273.395 li
388.047 273.395 li
388.047 277.808 li
388.047 278.804 388.467 279.224 389.282 279.224 cv
390.109 279.224 390.685 278.684 391.117 277.94 cv
391.117 273.395 li
391.813 273.395 li
391.813 279.667 li
391.213 279.667 li
cp
f
394.479 275.386 mo
394.479 276.393 395.102 276.969 396.063 276.969 cv
397.082 276.969 397.645 276.393 397.645 275.397 cv
397.645 274.414 397.13 273.802 396.063 273.802 cv
394.995 273.802 394.479 274.462 394.479 275.386 cv
cp
399.024 273.526 mo
398.593 273.647 398.041 273.694 397.285 273.706 cv
397.945 274.019 398.352 274.546 398.352 275.409 cv
398.352 276.633 397.502 277.473 396.086 277.473 cv
395.786 277.473 395.511 277.436 395.27 277.353 cv
394.971 277.521 394.791 277.784 394.791 278.072 cv
394.791 278.443 395.031 278.72 395.786 278.72 cv
396.806 278.72 li
398.053 278.72 398.82 279.392 398.82 280.326 cv
398.82 281.454 397.934 282.126 396.099 282.126 cv
394.203 282.126 393.483 281.574 393.483 280.326 cv
394.131 280.326 li
394.144 281.202 394.599 281.55 396.099 281.55 cv
397.561 281.55 398.113 281.106 398.113 280.362 cv
398.113 279.691 397.585 279.319 396.698 279.319 cv
395.679 279.319 li
394.635 279.319 394.131 278.815 394.131 278.216 cv
394.131 277.796 394.383 277.424 394.814 277.148 cv
394.096 276.776 393.76 276.225 393.76 275.386 cv
393.76 274.126 394.683 273.263 396.063 273.263 cv
397.741 273.286 398.197 273.106 398.809 272.854 cv
399.024 273.526 li
cp
f
403.597 278.132 mo
403.597 276.405 li
402.505 276.405 li
401.246 276.405 400.538 276.897 400.538 277.892 cv
400.538 278.756 401.03 279.235 401.857 279.235 cv
402.649 279.235 403.201 278.84 403.597 278.132 cv
cp
404.292 278.275 mo
404.292 278.972 404.484 279.175 404.82 279.308 cv
404.664 279.799 li
404.112 279.691 403.788 279.415 403.692 278.743 cv
403.249 279.463 402.577 279.799 401.737 279.799 cv
400.526 279.799 399.795 279.043 399.795 277.928 cv
399.795 276.608 400.79 275.889 402.397 275.889 cv
403.597 275.889 li
403.597 275.289 li
403.597 274.294 403.188 273.851 402.145 273.851 cv
401.642 273.851 401.066 273.982 400.442 274.21 cv
400.263 273.683 li
400.958 273.406 401.582 273.263 402.241 273.263 cv
403.669 273.263 404.292 273.97 404.292 275.253 cv
404.292 278.275 li
cp
f
407.463 278.588 mo
407.463 278.995 407.606 279.199 407.978 279.199 cv
408.122 279.199 408.267 279.175 408.398 279.115 cv
408.59 279.631 li
408.374 279.727 408.11 279.799 407.847 279.799 cv
407.175 279.799 406.767 279.415 406.767 278.588 cv
406.767 270.84 li
407.463 270.756 li
407.463 278.588 li
cp
f
254.793 279.667 mo
250.919 272.243 li
250.955 272.807 251.015 273.599 251.015 275.073 cv
251.015 279.667 li
250.331 279.667 li
250.331 271.451 li
251.255 271.451 li
255.152 278.875 li
255.129 278.527 255.057 277.508 255.057 276.44 cv
255.057 271.451 li
255.74 271.451 li
255.74 279.667 li
254.793 279.667 li
cp
f
262.113 276.081 mo
262.113 274.714 261.56 273.838 260.374 273.838 cv
259.402 273.838 258.658 274.558 258.587 276.261 cv
262.113 276.261 li
262.113 276.081 li
cp
262.772 276.801 mo
258.587 276.801 li
258.671 278.504 259.463 279.211 260.542 279.211 cv
261.226 279.211 261.682 278.995 262.232 278.588 cv
262.557 279.031 li
261.969 279.511 261.334 279.799 260.506 279.799 cv
258.851 279.799 257.844 278.6 257.844 276.585 cv
257.844 274.582 258.814 273.263 260.35 273.263 cv
261.98 273.263 262.797 274.45 262.797 276.297 cv
262.797 276.488 262.785 276.681 262.772 276.801 cv
cp
f
267.657 279.403 mo
267.273 279.655 266.842 279.799 266.338 279.799 cv
265.391 279.799 264.803 279.235 264.803 278.144 cv
264.803 273.958 li
263.748 273.958 li
263.748 273.395 li
264.803 273.395 li
264.803 271.896 li
265.498 271.811 li
265.498 273.395 li
267.117 273.395 li
267.033 273.958 li
265.498 273.958 li
265.498 278.107 li
265.498 278.84 265.787 279.199 266.422 279.199 cv
266.77 279.199 267.07 279.103 267.382 278.911 cv
267.657 279.403 li
cp
f
273.416 275.182 mo
273.416 279.667 li
272.721 279.667 li
272.721 275.277 li
272.721 274.258 272.289 273.826 271.533 273.826 cv
270.682 273.826 270.105 274.353 269.59 275.121 cv
269.59 279.667 li
268.895 279.667 li
268.895 270.84 li
269.59 270.756 li
269.59 274.438 li
270.094 273.73 270.766 273.263 271.666 273.263 cv
272.793 273.263 273.416 273.994 273.416 275.182 cv
cp
f
279.669 276.081 mo
279.669 274.714 279.117 273.838 277.93 273.838 cv
276.959 273.838 276.215 274.558 276.143 276.261 cv
279.669 276.261 li
279.669 276.081 li
cp
280.328 276.801 mo
276.143 276.801 li
276.227 278.504 277.019 279.211 278.098 279.211 cv
278.781 279.211 279.237 278.995 279.789 278.588 cv
280.113 279.031 li
279.525 279.511 278.89 279.799 278.063 279.799 cv
276.406 279.799 275.399 278.6 275.399 276.585 cv
275.399 274.582 276.371 273.263 277.906 273.263 cv
279.537 273.263 280.352 274.45 280.352 276.297 cv
280.352 276.488 280.341 276.681 280.328 276.801 cv
cp
f
285.417 273.335 mo
285.285 273.994 li
285.105 273.946 284.949 273.922 284.733 273.922 cv
283.857 273.922 283.391 274.546 283.055 275.829 cv
283.055 279.667 li
282.359 279.667 li
282.359 273.395 li
282.959 273.395 li
283.019 274.798 li
283.354 273.767 283.918 273.263 284.793 273.263 cv
285.033 273.263 285.249 273.286 285.417 273.335 cv
cp
f
287.471 278.588 mo
287.471 278.995 287.614 279.199 287.986 279.199 cv
288.13 279.199 288.274 279.175 288.406 279.115 cv
288.598 279.631 li
288.382 279.727 288.118 279.799 287.854 279.799 cv
287.183 279.799 286.774 279.415 286.774 278.588 cv
286.774 270.84 li
287.471 270.756 li
287.471 278.588 li
cp
f
293.445 278.132 mo
293.445 276.405 li
292.353 276.405 li
291.095 276.405 290.387 276.897 290.387 277.892 cv
290.387 278.756 290.879 279.235 291.706 279.235 cv
292.498 279.235 293.05 278.84 293.445 278.132 cv
cp
294.141 278.275 mo
294.141 278.972 294.333 279.175 294.669 279.308 cv
294.513 279.799 li
293.961 279.691 293.637 279.415 293.541 278.743 cv
293.098 279.463 292.426 279.799 291.586 279.799 cv
290.375 279.799 289.644 279.043 289.644 277.928 cv
289.644 276.608 290.639 275.889 292.246 275.889 cv
293.445 275.889 li
293.445 275.289 li
293.445 274.294 293.037 273.851 291.994 273.851 cv
291.49 273.851 290.915 273.982 290.291 274.21 cv
290.111 273.683 li
290.807 273.406 291.431 273.263 292.09 273.263 cv
293.518 273.263 294.141 273.97 294.141 275.253 cv
294.141 278.275 li
cp
f
301.196 275.182 mo
301.196 279.667 li
300.501 279.667 li
300.501 275.277 li
300.501 274.246 300.081 273.826 299.314 273.826 cv
298.462 273.826 297.886 274.353 297.37 275.121 cv
297.37 279.667 li
296.675 279.667 li
296.675 273.395 li
297.274 273.395 li
297.347 274.462 li
297.838 273.742 298.533 273.263 299.445 273.263 cv
300.584 273.263 301.196 273.97 301.196 275.182 cv
cp
f
307.46 278.06 mo
307.46 274.786 li
307.089 274.258 306.585 273.838 305.817 273.838 cv
304.714 273.838 303.971 274.786 303.982 276.549 cv
303.982 278.3 304.642 279.224 305.697 279.224 cv
306.524 279.224 307.028 278.804 307.46 278.06 cv
cp
308.156 279.667 mo
307.557 279.667 li
307.473 278.708 li
307.101 279.331 306.501 279.799 305.59 279.799 cv
304.126 279.799 303.238 278.552 303.238 276.56 cv
303.238 274.63 304.162 273.263 305.697 273.263 cv
306.549 273.263 307.101 273.67 307.46 274.114 cv
307.46 270.756 li
308.156 270.84 li
308.156 279.667 li
cp
f
314.241 273.958 mo
313.905 274.426 li
313.365 274.03 312.897 273.838 312.262 273.838 cv
311.435 273.838 310.871 274.246 310.871 274.894 cv
310.871 275.518 311.267 275.781 312.394 276.081 cv
313.762 276.44 314.409 276.908 314.409 277.976 cv
314.409 279.14 313.39 279.799 312.143 279.799 cv
311.123 279.799 310.439 279.451 309.899 278.995 cv
310.295 278.54 li
310.81 278.972 311.362 279.211 312.13 279.211 cv
313.042 279.211 313.678 278.779 313.678 278.023 cv
313.678 277.256 313.329 276.98 312.022 276.621 cv
310.691 276.272 310.151 275.781 310.151 274.894 cv
310.151 273.946 311.051 273.263 312.238 273.263 cv
313.042 273.263 313.653 273.502 314.241 273.958 cv
cp
f
357.608 413.767 mo
357.608 415.35 356.709 416.465 354.91 416.465 cv
353.075 416.465 352.211 415.35 352.211 413.767 cv
352.211 408.117 li
352.931 408.117 li
352.931 413.706 li
352.931 415.038 353.53 415.841 354.91 415.841 cv
356.289 415.841 356.877 415.025 356.877 413.706 cv
356.877 408.117 li
357.608 408.117 li
357.608 413.767 li
cp
f
364.617 411.848 mo
364.617 416.333 li
363.922 416.333 li
363.922 411.943 li
363.922 410.912 363.502 410.492 362.734 410.492 cv
361.883 410.492 361.307 411.02 360.791 411.787 cv
360.791 416.333 li
360.096 416.333 li
360.096 410.06 li
360.695 410.06 li
360.768 411.128 li
361.259 410.408 361.954 409.929 362.866 409.929 cv
364.006 409.929 364.617 410.636 364.617 411.848 cv
cp
f
367.103 416.333 mo
367.103 410.06 li
367.799 410.06 li
367.799 416.333 li
367.103 416.333 li
cp
367.967 407.806 mo
367.967 408.081 367.763 408.31 367.439 408.31 cv
367.127 408.31 366.924 408.081 366.924 407.806 cv
366.924 407.53 367.127 407.302 367.439 407.302 cv
367.763 407.302 367.967 407.53 367.967 407.806 cv
cp
f
373.198 416.069 mo
372.814 416.321 372.383 416.465 371.879 416.465 cv
370.932 416.465 370.344 415.901 370.344 414.81 cv
370.344 410.624 li
369.288 410.624 li
369.288 410.06 li
370.344 410.06 li
370.344 408.561 li
371.039 408.478 li
371.039 410.06 li
372.658 410.06 li
372.574 410.624 li
371.039 410.624 li
371.039 414.773 li
371.039 415.506 371.327 415.865 371.963 415.865 cv
372.31 415.865 372.61 415.77 372.922 415.577 cv
373.198 416.069 li
cp
f
378.081 412.747 mo
378.081 411.38 377.529 410.504 376.342 410.504 cv
375.371 410.504 374.627 411.224 374.555 412.927 cv
378.081 412.927 li
378.081 412.747 li
cp
378.741 413.467 mo
374.555 413.467 li
374.639 415.17 375.431 415.877 376.51 415.877 cv
377.193 415.877 377.649 415.661 378.201 415.254 cv
378.525 415.697 li
377.938 416.177 377.302 416.465 376.474 416.465 cv
374.819 416.465 373.811 415.266 373.811 413.251 cv
373.811 411.248 374.783 409.929 376.318 409.929 cv
377.949 409.929 378.765 411.116 378.765 412.963 cv
378.765 413.154 378.753 413.347 378.741 413.467 cv
cp
f
384.549 414.726 mo
384.549 411.452 li
384.178 410.924 383.674 410.504 382.906 410.504 cv
381.803 410.504 381.06 411.452 381.071 413.215 cv
381.071 414.966 381.73 415.89 382.786 415.89 cv
383.613 415.89 384.117 415.47 384.549 414.726 cv
cp
385.245 416.333 mo
384.645 416.333 li
384.561 415.374 li
384.189 415.997 383.59 416.465 382.679 416.465 cv
381.215 416.465 380.327 415.218 380.327 413.227 cv
380.327 411.296 381.251 409.929 382.786 409.929 cv
383.638 409.929 384.189 410.336 384.549 410.78 cv
384.549 407.422 li
385.245 407.506 li
385.245 416.333 li
cp
f
395.432 408.897 mo
395 409.365 li
394.4 408.825 393.849 408.598 393.094 408.598 cv
392.086 408.598 391.391 409.125 391.391 409.988 cv
391.391 410.828 391.834 411.212 393.31 411.655 cv
394.784 412.111 395.684 412.639 395.684 414.09 cv
395.684 415.493 394.616 416.465 392.962 416.465 cv
391.834 416.465 391.007 416.069 390.335 415.434 cv
390.767 414.966 li
391.343 415.506 391.99 415.853 392.949 415.853 cv
394.101 415.853 394.952 415.218 394.952 414.114 cv
394.952 413.119 394.461 412.711 392.997 412.255 cv
391.366 411.752 390.659 411.188 390.659 410.001 cv
390.659 408.837 391.63 407.985 393.069 407.985 cv
394.137 407.985 394.784 408.321 395.432 408.897 cv
cp
f
400.461 416.069 mo
400.077 416.321 399.645 416.465 399.142 416.465 cv
398.194 416.465 397.606 415.901 397.606 414.81 cv
397.606 410.624 li
396.551 410.624 li
396.551 410.06 li
397.606 410.06 li
397.606 408.561 li
398.302 408.478 li
398.302 410.06 li
399.921 410.06 li
399.837 410.624 li
398.302 410.624 li
398.302 414.773 li
398.302 415.506 398.59 415.865 399.226 415.865 cv
399.573 415.865 399.873 415.77 400.185 415.577 cv
400.461 416.069 li
cp
f
404.9 414.798 mo
404.9 413.071 li
403.809 413.071 li
402.55 413.071 401.842 413.563 401.842 414.558 cv
401.842 415.422 402.334 415.901 403.161 415.901 cv
403.953 415.901 404.505 415.506 404.9 414.798 cv
cp
405.596 414.941 mo
405.596 415.638 405.788 415.841 406.124 415.974 cv
405.968 416.465 li
405.416 416.357 405.092 416.081 404.996 415.409 cv
404.553 416.129 403.881 416.465 403.041 416.465 cv
401.83 416.465 401.099 415.709 401.099 414.594 cv
401.099 413.274 402.094 412.555 403.701 412.555 cv
404.9 412.555 li
404.9 411.955 li
404.9 410.96 404.492 410.517 403.449 410.517 cv
402.945 410.517 402.37 410.648 401.746 410.876 cv
401.566 410.349 li
402.262 410.072 402.886 409.929 403.545 409.929 cv
404.973 409.929 405.596 410.636 405.596 411.919 cv
405.596 414.941 li
cp
f
410.985 416.069 mo
410.602 416.321 410.17 416.465 409.666 416.465 cv
408.719 416.465 408.131 415.901 408.131 414.81 cv
408.131 410.624 li
407.075 410.624 li
407.075 410.06 li
408.131 410.06 li
408.131 408.561 li
408.826 408.478 li
408.826 410.06 li
410.445 410.06 li
410.361 410.624 li
408.826 410.624 li
408.826 414.773 li
408.826 415.506 409.114 415.865 409.75 415.865 cv
410.098 415.865 410.397 415.77 410.709 415.577 cv
410.985 416.069 li
cp
f
415.868 412.747 mo
415.868 411.38 415.316 410.504 414.129 410.504 cv
413.158 410.504 412.414 411.224 412.342 412.927 cv
415.868 412.927 li
415.868 412.747 li
cp
416.528 413.467 mo
412.342 413.467 li
412.426 415.17 413.218 415.877 414.297 415.877 cv
414.98 415.877 415.436 415.661 415.988 415.254 cv
416.313 415.697 li
415.725 416.177 415.089 416.465 414.261 416.465 cv
412.606 416.465 411.599 415.266 411.599 413.251 cv
411.599 411.248 412.57 409.929 414.105 409.929 cv
415.736 409.929 416.552 411.116 416.552 412.963 cv
416.552 413.154 416.54 413.347 416.528 413.467 cv
cp
f
422.097 410.624 mo
421.761 411.092 li
421.221 410.696 420.753 410.504 420.117 410.504 cv
419.29 410.504 418.727 410.912 418.727 411.56 cv
418.727 412.184 419.122 412.447 420.249 412.747 cv
421.617 413.106 422.265 413.574 422.265 414.642 cv
422.265 415.806 421.245 416.465 419.998 416.465 cv
418.978 416.465 418.295 416.117 417.755 415.661 cv
418.15 415.206 li
418.666 415.638 419.218 415.877 419.985 415.877 cv
420.897 415.877 421.533 415.445 421.533 414.69 cv
421.533 413.922 421.185 413.647 419.878 413.287 cv
418.547 412.939 418.007 412.447 418.007 411.56 cv
418.007 410.612 418.906 409.929 420.094 409.929 cv
420.897 409.929 421.509 410.168 422.097 410.624 cv
cp
f
263.574 415.733 mo
264.905 415.733 265.781 415.277 265.781 414.055 cv
265.781 412.807 264.905 412.304 263.79 412.304 cv
262.051 412.304 li
262.051 415.733 li
263.574 415.733 li
cp
262.051 411.728 mo
263.706 411.728 li
264.701 411.728 265.409 411.176 265.409 410.217 cv
265.409 409.113 264.617 408.717 263.238 408.717 cv
262.051 408.717 li
262.051 411.728 li
cp
266.524 414.055 mo
266.524 415.625 265.373 416.333 263.574 416.333 cv
261.331 416.333 li
261.331 408.117 li
263.166 408.117 li
265.037 408.117 266.141 408.777 266.141 410.168 cv
266.141 411.224 265.493 411.823 264.63 411.979 cv
265.625 412.087 266.524 412.639 266.524 414.055 cv
cp
f
272.213 412.747 mo
272.213 411.38 271.661 410.504 270.474 410.504 cv
269.503 410.504 268.759 411.224 268.686 412.927 cv
272.213 412.927 li
272.213 412.747 li
cp
272.873 413.467 mo
268.686 413.467 li
268.771 415.17 269.563 415.877 270.642 415.877 cv
271.325 415.877 271.781 415.661 272.333 415.254 cv
272.657 415.697 li
272.069 416.177 271.434 416.465 270.605 416.465 cv
268.951 416.465 267.943 415.266 267.943 413.251 cv
267.943 411.248 268.915 409.929 270.45 409.929 cv
272.081 409.929 272.896 411.116 272.896 412.963 cv
272.896 413.154 272.885 413.347 272.873 413.467 cv
cp
f
275.539 415.254 mo
275.539 415.661 275.683 415.865 276.055 415.865 cv
276.198 415.865 276.343 415.841 276.475 415.781 cv
276.666 416.297 li
276.45 416.393 276.186 416.465 275.923 416.465 cv
275.251 416.465 274.843 416.081 274.843 415.254 cv
274.843 407.506 li
275.539 407.422 li
275.539 415.254 li
cp
f
278.432 412.052 mo
278.432 413.059 279.055 413.635 280.015 413.635 cv
281.034 413.635 281.598 413.059 281.598 412.064 cv
281.598 411.08 281.082 410.468 280.015 410.468 cv
278.947 410.468 278.432 411.128 278.432 412.052 cv
cp
282.977 410.192 mo
282.545 410.313 281.993 410.36 281.237 410.372 cv
281.897 410.685 282.305 411.212 282.305 412.075 cv
282.305 413.299 281.453 414.139 280.038 414.139 cv
279.738 414.139 279.463 414.103 279.223 414.019 cv
278.923 414.186 278.743 414.45 278.743 414.738 cv
278.743 415.109 278.983 415.386 279.738 415.386 cv
280.758 415.386 li
282.005 415.386 282.772 416.058 282.772 416.992 cv
282.772 418.12 281.886 418.792 280.051 418.792 cv
278.155 418.792 277.435 418.24 277.435 416.992 cv
278.083 416.992 li
278.096 417.868 278.551 418.216 280.051 418.216 cv
281.514 418.216 282.065 417.772 282.065 417.028 cv
282.065 416.357 281.537 415.985 280.65 415.985 cv
279.631 415.985 li
278.587 415.985 278.083 415.481 278.083 414.882 cv
278.083 414.462 278.335 414.09 278.768 413.815 cv
278.048 413.442 277.712 412.891 277.712 412.052 cv
277.712 410.792 278.635 409.929 280.015 409.929 cv
281.693 409.952 282.149 409.772 282.761 409.521 cv
282.977 410.192 li
cp
f
284.348 416.333 mo
284.348 410.06 li
285.043 410.06 li
285.043 416.333 li
284.348 416.333 li
cp
285.211 407.806 mo
285.211 408.081 285.007 408.31 284.684 408.31 cv
284.371 408.31 284.168 408.081 284.168 407.806 cv
284.168 407.53 284.371 407.302 284.684 407.302 cv
285.007 407.302 285.211 407.53 285.211 407.806 cv
cp
f
291.389 416.333 mo
291.352 415.218 li
290.909 415.961 290.273 416.465 289.302 416.465 cv
288.175 416.465 287.526 415.781 287.526 414.546 cv
287.526 410.06 li
288.223 410.06 li
288.223 414.474 li
288.223 415.47 288.643 415.89 289.458 415.89 cv
290.285 415.89 290.861 415.35 291.293 414.606 cv
291.293 410.06 li
291.988 410.06 li
291.988 416.333 li
291.389 416.333 li
cp
f
302.283 411.848 mo
302.283 416.333 li
301.587 416.333 li
301.587 411.943 li
301.587 410.924 301.167 410.492 300.52 410.492 cv
299.764 410.492 299.236 411.02 298.757 411.787 cv
298.757 416.333 li
298.06 416.333 li
298.06 411.943 li
298.06 410.924 297.642 410.492 296.993 410.492 cv
296.238 410.492 295.698 411.02 295.23 411.787 cv
295.23 416.333 li
294.535 416.333 li
294.535 410.06 li
295.135 410.06 li
295.194 411.128 li
295.662 410.408 296.322 409.929 297.126 409.929 cv
297.929 409.929 298.493 410.397 298.685 411.176 cv
299.152 410.433 299.824 409.929 300.651 409.929 cv
301.659 409.929 302.283 410.66 302.283 411.848 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (1507.m00.i125.n001.P.c25.279329759 Soccer uniform or football uniform of national teams.eps)
%%CreationDate: 7/3/2015 4:31 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9=Qe+!81>hAc^kmdkpbI`>6A0I0Q$3^dmWC[MoA8@M)o`"@Xp31*obAnR8e)b+#\^+OeMCd#27\eWn^3;6flnp9C`^RW;
%cY>qmXI,<>_111rJ).a2XEkG"LA!#RbIr5KkjGpLje1'O1i(?ZB/NW_iAWO(rWR]0BANj#>4[(f?h;HBn4[`S3\=?I6)iP?qq[4%
%eYpkTV2&E%i$fKC5?#18\m:)g_k>`f+CK#SpL#MT:5OM[Igb^03'-rp=S<!?eD[kC^TA$,_t\-Xs(V9(j!"tsgU?pbLI'+%qqZ"n
%!>DSI)#UiC?Y523\_jH13BW_.(OYR%AoNR&b[(Z]3qSXG5VW%1'E@U;Qn',ms&L!95O+R4KV.prOYQYoqtigP6g#J+>Qsn+(D!ag
%"PC"F5U(?3JpOK[G6;#<?+7+?Aqg7_rs1^(qG>3I8'fn4B#Q[1XCl/sSc3.@r[%D1/.d30#2`K<cN:io[)GZ#g>0[3s'S8!gPG!E
%?7fj*DH+552Em5C(LjjV$#5!&oQ[@te$:K+dSJ9NaDYDg?/X1DXbZ5HRW5b)]9g5-NrL=hNauU^]iNK>C*"%]/#EX61gF9-_pgF_
%P7(sT?A=<_@Qh\t2ul,`%d`-5liW%2[At+o`p/EhlY>`Z0^i&S>)@LUd5*ET5q$8Lje!@g'9E:Ph/:RF6"g%.@9;+c>'BWOVqu5h
%$I(Ua5R7>5#64mCNEYp?HlN#Mhn]l;QGA1m:1#p<JSG8lrqimcr&aXp^Xe#j\(])5CV+TCr;3[O>bu]]A<):_\(QK^X^q.N^;(hK
%R0D<<RA72tL,%V)fdH)e>Dj^1"?bF)L49TWd\#Le1sa&T"\B=9^fr`:hh#%<V$tTFV&=9fju<3]L;&`OmSps;2a5S;)A5+9h)D=Q
%"D2?K=_JN7dl78f%a%jeVV8"-&joKbhsPr3[]aYd.Y/\`i&$'-?3T0UAcK!/oiD@SpUcc22?]"38(*"h):9=9ceHm,=R^+6l:'HG
%>uo.:I(S"@bT&L02*(M`n)[7.GOuV6R1bKscu/2-3'PGe7>LjK6,<#'-?qHEe=`5fbA!Ck,g9ks$6nc(XZ3]6iHHAgI]%LXMAZqS
%eBaSkC8W[S='PB,k>]X4i:'77)l/WkLLgO)&<5[V8NM^j)c>iqc[s>`?>Y4]O?)Z-]0We_S+RQ^S!h/e^D.<6_OcP1OObkNC[/I<
%Z81u=@iGC<n9><D<#6:68+L_5(&iNc]CQZB&,KP4Q;O(>gHS/T[?atjVd=/SQRb=OG4hrg%7$",6cWHDmJ$?(?WLs-G0lm'HKNU5
%*%1;Mr6bIoBZ$/Eg:bJLUI,m(E=q[1c*-e.T-)[,C%ui-"/c(6Tp\jor^h[X5N>+^Bk`\(?EJ<&;]m:\9f=bn61s6CRf](`j1*IX
%D4c822!op()'9:-r*\1HcdY_CBH4(<'_l+7ET,Ioh-.(s8)n\dU5Y&2'Ze7>0;h0KdR7WTf00:(Z;D*$;hmRpOt:YCYoqP0*d4TW
%?&V7N6iGA,:UA]YhW$p4=)0X%m@_q/V3*rMa0?Y&=j7kEcC*Pr9'tPP&%FI@C#.Bj>fc0)0l-FHHf_F1/JSAfSPolblMtS8!$<d<
%K;2:16\0SDq8]crLWs/;*,KU.28ql589<-8`lDfF!iR6hC^"Yt9X,;16sV0EbZ,V6D6`lQk[WL'A<M)V85$3nrX]d>XGdAA;)(&V
%XN`?/M*PKefhEA?;fC?WF3F!d@G.3\I8C_q0:UM;gpW^,G5qF/Q;-=*RSqTeKaaNAG&u,MDVG&jPae.cs'=+!dP@,S<hVTG-!uqO
%j&O-B<5Cj88$uU^T.LHMf&99FiJeUpZ5J%(ES[0H3oWG0oU/3_r\JkJ4/b*QV9n-$f314ueAeK(2c?=.Qcm'g%oY&Y+Ja0%S*qK;
%eoWL]/GQ2Ui85H#L>Qd6p,EstqO!#0_iEcoF-P$Of.``j-,Dfl)<:\9Vf5Xfo4m=^"$L7S[0"*Im%r+BPeQ0E%7$lfC#ZdSV,G9+
%aY^%F]8d9":9.Di,?)a6Xc/[q.?KFuNXI;Np>,b2@ZuA*ht>_Qh#Y1OfL2O$!hW)b]i5m4/kUc9=`BMGZ5!8WC;Tb*C-C*540d@c
%Y1C2VB>E)Bd^V.b`Sascma%^"CT?42L"BJpg0Hj9`_&9KI`=T6:B/;!hs5BaINs>*G*=K[;KCBbDuQ/Go\J.5HP;It=>24[Y.hU+
%FW5^c"i8G'R?Js$;L$*^N"h2$SYh%S-=3FCnDR\Z(J'H9M)e$eXBk4"eq7iY#rYf33R*"E,ET+K.$&;FrD3@eP%MU:[r/H.@?VkP
%;Xi=gp5kfa5f=,`p*L$o37i72BO:m5b]-*k3>D'%niV[)DoRl;>Z$o6\'-shS:X<')"Qb.O@a%m'Ns&=;Tc1ggisl!T#Zh?%P*JV
%q^FYJo=4<QDZ!_?qg$tA@aq)sgisl!ShN!ubnE!r)c+K9s$;oY7jCpLgSiJ-V2Q]e;]sWj^t?s4'W6HRr4LVf$I&e=.ZH9S..P7.
%N4p"3]@T4Op%o<-b;;h)]__i8)Acpud>IT<(KQ-)B&HKXNQIeRQR;)ZR!Zn$ha>E0]![H>&2_trr!q;XNCrl<\b</ZX9IFfG#2=W
%[f+4RJWskjSY\BWkPhfus(q*fS,:M9Bk#ZKJ(B\%gjf$U4QWFG:AOpjepFA'5KTMWi[m4q3^F5S9'JQ=qMs6';ll.5]9BC2eaf=8
%KFEk]U!67WgWt]!#h7p<p(tuR9*O3[!X;d(O53!eguT09DuS2e_`!d40DW]A&57)PK[ASkK:.*tmWb-]?N-I7Nc#X#GS+7!o"WBh
%06>1Wh!m.D]Z_BLK/B(.j/!i[\`78hGkq(R0B5tMIW'mamQ^h=%Y__TeK1M*g$f[D8=Iqp'shtVplE%G`[R=Q]3n'rbMJFhY[Z1@
%D9j_59X&>.ZT+.TYp+Vqi8gL^Be"p4HF8W6[7d]uT-')WFZ@Z525g)Z2*Vo?kMi,i/!GE7hU!gFpp4rU.QN4RCL4to[]2=C?sVq1
%SE:QV`l4f*C^+59RLY0GJ'"`K9.tQbL!5dpjAl4f=LKXMAb4ng=:rc_iChY\V8BGLR&T]7=;f<qA](&(m&4X0brDm-Q@_Z6k,hAJ
%'$bdUMb-EKg.[9Ifo)i_r09+]@:cb%,$[^7)cjtW*&c-h42Gi1G8VVL\?4LO-"R:rZjEqL@>d"r@dC\XCfYd-p?Gf*041hmGZ1s1
%Q`JpaX'.EH54BfQKcf/i>eHFZiI'YZ<(]9MD&\b%nYU=CV.H`"5Q,4Ina'm`T.,SKF>!Mao6Xn8`7]W+7@<MUJJg1[^0dbKNA\CN
%Zr7f*o9+QdG5lqrdVlFPVg1kKIYK^XCrQ3]WNffrqTWrP)5m<f0t4"Aj`]e?gg&a)m)r<@?]J_Zlg:Lgn%VtBB<DqCLJft\M1.N/
%o,Ha(V]3mN,Cb/pI.$?mTM$VqIS"G.EY@OojX+(fcYnn@f%Dgn5s@LQa2qPLIQ5VkOO)7l8_GVXIP/oaOO)7m.6JQId=_@<\VfV^
%W,XHVc#/\?g<0=2Kjf;Yj,ZM]PoOf#p<-aVp9Igq@l*]=7e26QIMt>M'<W02RYT^6[sVJ[/Tu=Aq]/[PWEu/-lTHl]NdC*!?7fid
%.D\5+!VEIZ,(P"%GCi^Spt>i2dp,9,lT[:#+GJP&kgfDmVL2%UL2,m++!i/"EO$m9h1sree2<U#)1E780_$?WAMir7TMMk)1oBn"
%c)qC8NXOl!Ge,[VQYWTQ]3;PS4)D)p[[<F6m:]NnI*D:)ZDk$in`P9=j/GA26=HG[@Mp]&:b?2G5B)6sMMk0`5d-UN9g<]eF[*3V
%VBF6<T`daj9qp;S#1K,2E3ls?G`feIBs-_pUHYe4</TF`e$b13?D3seK,&\!c$@Yg<SM$UIn\Q'GQ"j)X#h'Q8Ni9S%8I0NVtJ]]
%HB23tP^8>[_,Q;S=^n\<PL2.lc=U:%2B+TEZ.Tq*q6;9%OGSTkSr_TSUN<$h%1Eoko/G-5-=0953Ub"J01nrmj+Ci!?;5b6qA?S#
%Pk(-@e`IXmcgpBa`U_?N=T0HLB'SJLoNE*oLtBJ1iiOm/8sg=8i5?GCS%n>:"d*CNo=+Xe?Wf<`q#0S1oUAML9e6oUPHCp_M>>B%
%PrW/8Of^`[@_Wr5S)7*LHoU,ge*[$-_V-t\AKq@.I_"77pM,-q9.SS=>\KteDCU+oln8[+d4!$3O3[u.$-oT2<4+C65qDH:`AGt:
%[I:V%!t]3rRbW&#;Q4i?fC$]3Wl_F(_Q$XR"Fc5[X(B%HhJK-p(R;/`6HZK[pO?Eqqr7p-f5IQLd<X&XTk'ubVikdF<Q;S+[&fJ.
%/nq2f8t$Er?_+Zqoe_FUF\A]Yr#%GLhl,+)*Me21&Mrej[8P[CPA[5BB`-qPUlA,FOC@Q<*R-"n3n<bSg%`nPmSh1$@+[MiBsqa7
%/%5uE_)D)C[.0cfSYioln@Pap:)a*1Ke$Bfgi,2I`LQD-5J6/WBT]X8k>ICL^?=X*meT)%>KP:f?F)L10!m1?pT?$2p`J4!ZW=$7
%;B=aNSQ7%$"eW7%9!t!4((bX/Zg?F`[Tf*C>4Wq,>\5VaI_4[IkE9a9q5-FJV;Th5jSR7r^(jqc2k!UlA,qRp&4@undStf8@j)+i
%VEs3g[?Bf$>b^+d,BF`uHNBAt3%f<_IK4\FV=Og^8(@tuXuA>c.<eR@?T@1^Re3ueKX*9^Kl^k6r)C6DX%qE'MlFH;59oX/9iJ!)
%d]6*e6F!Mg:AaDFodMLK'n:)lC<F"QGIg#e]fMSUS*Z>Mi^MKN^X@H-3pSWG21M1iF;PuJ9S<@>^Ji$BKuJ^l2-0?kMt+OrB`)f8
%3lZWT3e(r<^O>TF]P9.HN(fi]3SCJlD)T^^(R1;@(NRf).!5Ghc3]f[Zgq/Bq&;?kemn\Kc:L2>VpPdaM5PPUb7[P'MTjtrq$3U\
%k6(\69SYj$`%WhU25uANCo(mB\9'f.eX.1jD4[a^)7sLPW\J4e)Y<]Tc*DWgB3m&I4_DO+Xiql/kYBHub\ab%YgldAF`7-**)[q7
%iE6YsFa(`j_7LY+O2`a#Un)ihrc9-?'N[?Y*fZ#]DWW""ak/K=%!XVWi%Xn=N.91"4W8C&`h]`\gnQUuBM=7Q@g6[FbX*T_D3hgP
%WK<N3D[)K>`$uI[J$t<W_dV<4>*\.GmQ,c;:WK9r?enR*da]!,o[HF;aMGphVO&0L.i,;=$sgEoZJ+ZZ;_!LgrMO!Oor#1K.=\Nf
%\m7/_%]]@'_=[Ia`jo=9DcW7[HZOOPDXU<*]pD%pS(i:r@.2@ubFI`2h_\J`.?^d1eDNuNg"bMTi(Z$eq#5,`jp'_ui(KF(Rjq9Y
%_G.b0=ia]WZXi[P@^UK>=.2W@%tC(GaBlm$k;T^H,?EZ;jY+s@HZiLL`GL4!H.1&`C1keAA=:9HdMoprB[XiO>^4MIf=u<6@0VD:
%+*&">L"@F.W_""5/$i('j(oLTShru3gBO;0=0KhU(bO8rR<4!;e$6]p=h&sQ#)Oc9B;WIV9#I&G;F9O)bdjPKUV^j<CO)hf.+:cb
%@^#=9dHbTameikH@VSZ)K,!:]_PQ.'"LZ.?(6m9nO-5Q_$bor(ORCB`90P,ne#$77Ztb%MW!A=MY2>\j,H'tIE%++jdp_L:O`Ze9
%IVP;?^J*W3MgZS)/:C3e_hB,O[W3hp;3QK!V*JMD>WDt8"7>M1+Yh[@/JVbi\k#B`K$UEto/-ob'@J#nVfr$7mC)V0&H"28ht4Qb
%X/4"lWJth))pLhZ<;^dI=76S)"fhp.S]?Fb$;$qc(JasmckqaN]`5L'C^6c(VnfK6WHP?";P>GLNXMmk[1W0_9(8,E>'[TFV@o'?
%F^.K5[I=*UlZCXd%.3oYPX:W/*#D4J$?Rb3MEp`=A$\R$TQ(`PUf*gQ^Tjn3$4F>2`kH:bZkdoCDV!:,X42!fQA+4pel/--bC9kN
%=X_?P"1HIs/<jWrcU&sN)C23)I50&9R3_fKWbjNU!c+Yh;9H5,M38("WJMA8F=B)5,).hu7@D?a5:Xr*58PW"MEE2q.-4UQ77i-M
%e=82`>a0Ldb(L`p1R3l]9%$H1q)KW"AN"U,b-R1fOp6bWF66/C/kRV5RWOZGX19Y?=ia$'K>b.aqVN0eRDtbc</c))WA2]+SF.2+
%V+OgYYJg(`&"0#CpnLZE'7uXPC.JN_%#YqcVIFDfT6^Oe1nJB1n-+JT_'`o'^O<#f&5X8]k>.<C)QT[I=kT4RT_gT4Qf@,fF$V`$
%FQ4-Y.G/_pkl(`OG;$GM[+!8h71).lZ`r]dA[AWPUNBq;Pnh]<a,FL#S%nuLfqRq?rnW%*#=%s]X=VMo9(OUTjP.AnAS0P4p_P&N
%pY$@4ER^<mrb]KTeZ'F51Q/D+c"?>Tr9T\%#CQJ`0p<=P!>9BkrW$]b^kWb3#9ePOIXKtq0MS<lpn,k1qS+,"O+3L3G7V;MC-`)J
%_i%"UH\;=7/[=ddfYR%,\fZKEn-TKhR)<[P<=<=b/[L3s_UntipVt7>"8J#OQu4rs7a!iqA*XnXYaOYm%XdacdrrZNDfYUU$ig'S
%Im&Q_?_HdJ:a368H2gab<;qV*%ra>?,Sbi@hZo[5@A>'Y+,(48F$;RLSb_3r#(/,p&,6C%D>:uti3NUei4!4r4JIk=\J@R1*5g9C
%pgCY@@C_3*V`?Ya@"tF\8->_FbP(.PAU;*'HWjG-"D(:t1WR4:$bG/E,I`/GK4RF8lAQD+e2_MC+K!'OmuXcN"b];Qhu&Ng8_St!
%rbK82M!,3g*%gLe$gHTdZEX),XT]ePGPLC1@#rqK$\cX*-LgIUr-RrN2QHO]59J9W;Y=Y6E2VFS`cg37n8OO$po$D+-f?8C0+WQ^
%c^H^2lMmh26so8&1C-+$c#O?4i^LTiPeMA<-u?[NL4@3"%;8SfO9&]qJ$MFSH+*`W_u-B7Y1!F>SIX2Am[YucDfeahq<cJ]83I;@
%itipT.1&]rro_dplE!USm70[nTJ)E!0^,CEF@d%Ch3TJjfi5FnTjOp)^'[?`JHSQsoli11Y7kBDRXFQ\h-*nYZP6R%#Y(95*W+ik
%:al'!h.HTrMM6o&nn+V7oil_nZ1!Z3rK"8JC<&ip'[KSe2!I$nhq0lCUMor*g[NG<<plK-TD[_t'"1B0<\;XX(gf!L/bA0Kn7tBf
%*pI/Y!.IUtbT;biaODt/qh3mkAqa-r[#8=J?J@=XR&,.^(BL5B_e]1[JY:+DS&6pACN`!hg'Q':HgPR*$4?u1ntCof+%S*VE!X/9
%laP!W)6jXY!FNkQf_*u85o2?coP\i[Ml@O;q9VO6s2+C+c)jmM?2(PW].qg]X0l>Kml8a1pK;MYBHr4#:d5=;gP*Ln]88pH7BOKa
%'>YieEG[OV@;;AHSdNm?!u$53L0I,`ql`/t<pcd5Z"2aK5]65YI9,[AF*0GOdd:hXqa=i%E2Q,(9-_@>2e1G8`3JUK%G>Q?X7bcX
%;S)F`hG]#5X51F%#G"VI>&a[8XT-6&@3\S)J(J0C=&:4F,f,mj)eG`Dl^WHs#WV*8f<=u*lVas*!fZls^tboF=C/!jWUu4C;>FB,
%<0!EL@qG$%QNq1fWaAuhf3>ZFR9r#]>.n)e]YW+t1tlL*_r3*+[_7XWm[c<7FsU'fjaFlH1o.9NBiVL5N@^OVam_U6%OZ/iPtD/f
%QYpr\F4K.P8jas-Mmmh49gsESD.dn&DDQ@lGIg)PqS.]LQJ6"&'@Jd[eS(8PR_<V$U>>1DP't#;bARRO9W(LZ:a;Fn$<=ZS^X6ck
%D6-M7"'$kuIFQ3c:(p:$B$P,l"kl@_gTh7R>(UB($m/$+*8.kSc`E77cP19E:#3LsYHA9qZE"?#aNb,$bVi]np'lZ4"i'TPmi4g8
%AMN34_\j5s^BL%#i1Fn!ZVp2eB2qCFN4'aLQ_AO5S\8($<'s*O!K0\4F>HOB;XP*LHT1.n9)^$+a;b>eSA"?@/VO`%osu__Yn<&$
%Lc.i_G5T?KcbB`@qotGfe"kY55FE%7g,$JO,JgTMHb7q(Y6U]ZZL:Ppm+2gA=DtUf&]P9!l99[tVEAD7,o,0fm`IJg3KO9Hj&:5k
%`26A'.G(RO?jDYIqu^bY!QZS\Hf$'ME7(04Jp%Nc.L&&pA.Er<m+TRO>ZP:jm=i4Yb.p,bVtqZTLnoKG#U5%2n823X55Bp@/m&E_
%m1hR%1-<=]TGF+%bg!Gp)HsnuD3oRV>.Ee:5o[d!Holpd+M"`%DPddMT<`71gMU=h>u'd(/%tmN\!d?=rNN'Y8daqfF=gTpcka)U
%fU_#QZ2%0S3i[r,V5#Kj=b5M8FHY>TVq#U-1Io\`iUH>?54<FR)s#]"mS5*.Lbc.q_+hpYnZaM"XT0p:G;CVs7]#p/!:BVEmeZ#j
%'D?Wrh5L;dD6LnPeX5],W7GDSX4eSD?lPSd\^/Qj[0eIT,..3D/i6cs13pW^Kh#FD1:S"EWdi++fPWXj[3!scDg(jgH3/P&m'UTY
%17iH]C+\@gjb$5+>P3<U_2F:l#^la"k]%k@ZN6TFaXBZ0Y,?XsEs13#`XO"GDtKD;,+039rg49=^GgJ]$t7Y'oGC6"->B("#;4o4
%VmN'@U\/\h3W7]C#]Etg>l@TqPQ1Is5A6L*%BLcrPXrAEHr.S4a[SJ8U-4tE\Xu=:*6cm`4VukSCSSN9pS9u^]d"J?!6`B9r_`1g
%",,"M:ms;<57,#/^NH>?onIQQD#%X%g7C/fT5-?rIVn$")a":==E.>\e23Zf<qf*-W7<qCStXBj=B&_mn[R-)J^ZVAF)'<s*dsu+
%kmn<TPr23#0[OXIE%KN8=#nk-\h2-Ba)Q35-)ZT[[>aC-*5E]q4b6ks)_M?D.68&^S`K=oIiS4/_4TNWAZ0qB\t4>kbC6H7d)Z'h
%diC;Yd$f!lW05&K,$&Ti.m[_H;)=8>2S8MJ__p3Mm6)F^#3/[B>0h_u9sYUg^4(%'^.s+NKE?H:;a;/Umfo%lYHHMF*uFe_[E\Zf
%;:_/0`+&0TWinE^?R+$g.2k=bdr-m!<aQATYWY&0(/-o(_2O,<L.Dh53\CV(X]W)h>=t@Uc@^tV?/+fr1*dQ[M*Af_`k)YSfI5%'
%M"`<<3C!Ag4NiJ>Ji4I^rUs?Chf?&(M`*E(VH;r\g,]>oY"&%.FT#ApZ.fp4nJ5.4nCh7S[Q?d]*@]R7jpnYW8I"a/i:WE!c*QfW
%Gr)5Jj.cm.*GfB=DV[f%q&3=hg:qc-^WN.AWSBU#cgkV,82%KMJ),$MFV=WXi?'/Uf*O\LP$oDgN=Q62qn%%6K4,_g_;pr//bj/"
%(FEJZ[DW5U>MYb54NK)T&M%`X,lm4PCY9'0F$f1:=)[T<fNn,J]XgK,[OUr^-)`]L6d\LI62b)7<ccc3d)*7qD:*:SE^2!,DeS-W
%<n>V&Xu,cNF0f,8A\Dl+?M<VrK6raJS#lkW.=66-X]091hJEFLiR%/p1%&<I5")i#pq:\]=O&c!De)<5/cIcOVC]VH:hSid#/><;
%0t`lkRFeYn_U.e9?HF$WpFj>T]g`[-&(VFJ-5\UFJ%l+.;)e'3Nt@M?TMrO;%.^k<P`fZ'9l&s[e5K']);<L,E,dj8o#K?,M/o_h
%X[c^7lai=M%6,39(s<bN#BlA]:,p&3=2R)..p9)P5^+2YDY3Zc#IWQsg&>?gEN\QWC3HVP%L52f7<UWqMGE-T!D5$`gl:SabL&e&
%r&+W*::X@TrtlsJGc,SW1R+6";n#qg1puYSKE\FPXVBh-*JYe'-Y(Lg(]7+7Nnla0#nCNSlGgfXZ8%++"ci%P]?qD:lINA`4e*@f
%;te>-+_UbP:??Z*26%0:@T?6\7eO[W63fp+Ln2BF776UhDg-pf?sI7\Guhn1G?):FF]OR('Y9S38W)@:,UkdTO:9i5kDaAf;B$eX
%Gc+U>]\+,OqQO>)G:*'[0kdsUJ8Q'6)5t]"5gMmLGhAa7ZAmeZmmcOqfCZpN($3[Kk990t7o*X5BJig;-VT?S?o\H44-r-u&&Br7
%@BZ>^nXKg!(XZaNG^\D<6*gN_<]2#9Mh:kTh:`/CJm$]I]bk9r%-f7$a)9<d*Scb^\OL[p")mt9(^0Hjk4gesS#u68M*jEe_j6p@
%<-gor*U(l_+jBBl_3>lR9d-(HePB.'l*HY3<)$<=;&rBY:$M7l-5+Na6H&uC]T_>GU2K/-7X5h0nkR&9+usZtACT4L1h?I'ODZ:;
%S8qn8dhXtL>PZM:B#/)ND6N0.?u=e2X]RLPTV[99BF75Fk%ar&6eUStO.gl*e?diAPa6"<09?S=BB#'M_*5E)_=;"cnilJCrs<H;
%62Nd+UTs%69/tcD<Y`L>I\S+X,l2_p,1aW/FqB=3Rm0?P)p./sfNd4bFQ:L<@qfPeE@Q_.NV1$i]3m'h>I>UGTQY?5nbRrI5iC29
%1n%;<6DiJ0'F7[F#N]@dJ^a0/o"b,?cVLrg<U4`mE(7sl+X_+cXtj+i,3E.Q=2X!<LP>,4f.+WO'e0N2c[<<Js8CCBal<VArgW$4
%`r3T9r'l%6I^sdP\FmLVCO+l)U$?8PGO=#.2XNT,)m?`Bm$^^OG<S.Ah.ZQ*:2*YaFmh'6]VB23ig8ZDZ?CG%m8N`;`qj_VZdF&l
%5D!T-eokr=_d:[$q28mhFuIpri36%+r1mTAAfk8'k1ZfIKaF;Zl/&H3DQ@">nhG's>?T8%Rl_WmZgQr''DkP.<&F'8jM01cSA6u#
%F7&eV^sVR2hRR_*lMZLn;'C:6rN'bKeW1[8=/CrsX.='TWOR>Z='F7VSAR0OYL;U_]jC7,j,&u'D:IFDT'%c=KhLSLMc&R,rF22^
%I,.nSqV[#;"@./<T.W;biR@b/`U1hAXo+(Rj_jL*j\CF1n]%d)?lJLW_GYZcCqX"#>ahR+la_A^rMBG8jj-R=Ka4eSKqS20amnsa
%QYY]gItaMp9:P*+Q[EPF4n>.ep$V"nlDNg1I-oe>#:o2<&&$cDiVfs9^uEAfo1K1_Z.G"#DWD_t#PFq6]5*ItqM3*ka*H/p2fe<V
%2I!arATGk4nTj:7.-E\uS.e8jXB#^iHrspfqflO\3QTgBrAr!XmEWD)_Y3hsPKd[b_Q#c<mJ$=F-VgB2BkdOUnpXS']CV0)IF>V1
%-p=gWhSEcKDkG[c)G$kUq5Zr2753qFAOg5Pn*Cf3q<RcJ\!GmYE>fe2pdClR(RRZR]=i(0+%oC%lf-CialWuf^TbBHR?+5[e[L*^
%he5YYSnp%F`MXN5`BYf3f@MKZ?@JX!PRt`WH[.-3#(#C'9+X9V+L$R?#M:O\WQi#>0:ifeMa?O*Btq!hP]K@602':U7k_SoqYl,Z
%H2Ht$.rYIES(G3a6@Q[oITZQ[nb(r-"\b+=h]A>/K"eQAml!tpdW+,kPM7T&^RUf0WaG*_CZkA;(T#"E6O#Apo%A!m.a;Wnp[Dts
%7;d&,iJUTRZ1<KF-_rWW!ltH!<qb(ldprD.8*PltqAX3?h:oK8kM9GW\N]"&PR&)c:&@sNe041O]`M7#fmHl3GG0LmIp1>o+#XPe
%KD!RVV'>EM_r[_Be,.Y0??+u)M]48QB:l)gSK?/bYu+*cHtOsRqOA/TX=q!45*m&1?Y"63qU%BQna<;t%S<07G433S8dkAtMhOh$
%i+d=I-X2K'(&#Ju-4-0ZbmH5k#4/MhI6d5G@c?<eZfA-P?Q\@!GPXo23p])3*QJB!]sYDVI-(lA(@N_t;1NA$8%Y$4&2m=s@XdM-
%eKB+9X3tqPX`FuAB2dFS/TWkm52H1cidPaH<4(NH92Du[@m-Rm28H8??J6r6:>T=14!rXEA^?C'C"D:=c`Muu0AT5`?Y^W?F%;R8
%m_TeoQK/%Jc/n(\]l\bCH(R/X^O-$BICu2]QZb!8kZf[15BpcB]Zj)%&iYm/4:<GrbjaWPO\siBGl.d-rTE1.H$PR"IBVF_pUd%Z
%3-nqQ^XQ<88\.@R!_sDOBKk&!o2c=%C2&*S/L[@mh8)Hc,n$4pMWe[+=`8B?n^iugjQZOW)1&"B>QB;j@A8DOH"h--Et7cQI)jC9
%?L<1/nFQ7'pt!W:hH58.a?l6>`ukn9mcW98hJ)D^G@X2#;J25.cr/b7QWNYI,uZbfEII4aK@Lt)Kn"lK>s:>Xjd#[@<ke=4Ucj5)
%fRlCm)t<$k6WVJr.#Ms3?9EeIQdGQbXTEp&C$6`5am@hMfQCa5IQZA_5NuD>q,O8i]iaq#`=M[=!'_qnpi2FO+9%#g@c>QFn`OB\
%OP16b55<t1L,obEa<?''9$FlpaUs'^KKJKRUn8<q/\HQ?5:UsKD0Kn=]"EJ!5MkRtBa?"[JtjPF%3^m_L"JWBKMT)JnDiS#9Lt_\
%mp:bO+I+oGp]^+QE5"Bo6mLE%m\uEYk6`r^)$hm,rfpAt*=tsG6@8_"_+Xd[fgVf0ZgqgbJknYMkQQT_o!')%8+u$p[7^ogRO3br
%!kENaG/>VhD`D#7S-X7>=.1JPI<WGF[cGn*>Y"r'a@#7-3f#poi6rN&GfYI[SG8J'.fp+=71:2F'0\#qN2B0eH@eeHrlS%h:+)Kb
%5=t2<6D<jDmZA?SBh(AA&$ZH"`LY5^$rN&3N3Bt40*3JcK;0e<,!Zs)%AFUmmmn':n-=tQR=S.nrPJ@j2M8M3ntRrVOW_N7r\SpF
%V!uh8^@t2?E!e8*OON.^Q`rh6NP[tPJr"@5h(?W[GTE!g":Af*31i\[+GBg\j%Vr`81=ZMWc2-.)TRLkd0mupW#mV(O9-hC5/^IN
%LUj2?(Ccb/[.,7u!mBY0=&1Y+f7<Jj@]/jDp[)_[f#-jN(7_M<TgH&*(Y#MFe],_%f,'/+VpgXMo$u@hr2<Up*ilnKM@1n1K+'G6
%4'FZ_A:P8j`J^##Vd)[Hhd63lS\[&P:rCb'j7pHB=1IT;]IU^@nMRMEPWoUt#E@a"`o3ih)45Dd(8#2q/=k=X>4$E[j`@ESs6ZT9
%MsnK"5/smkS)rb,7sTGa?VubfQ9Vu0"qNYb.8&OGo:?cG7OX0:gcYgB<RChg)XVOJ<beArH-I1E9R(TSq.TN\6OmO/!Rno3pQN$"
%l"PS2p)gN8_J*n(9+c4"cArk0T<9Ajb,o70cQWPXot;lLaLukj-_3=o.P]X1fKfh=n9S$s=6uSGCNGIa7-8u4!'^9VI$(l[^^Q-6
%q,\O(+6Hqdqq*4>?$j<)*5Sg%S]LM`)c*gAT%G^%`U,==ha]]3"M)N.kI@sAPhUQ`!dGcpBg3k_'*tIlX<:9g-artMDM>3?c+\G[
%B<CfW$?-2r`N?1f!Go&Clfa<W_l)Va<pTIIk:Ng(0=aNEN4X.j<OMgVB$D@I2O<:kMm'40n8qI`G^[aKf(IG.!9eQ:%e<Ufr\W=C
%n#l'm/jJ,p"e\Xe6PfHa"ba38nlNFr?oRJFRrY:*U)EPOJ#,BD'n%6N?<aP]CDnhUEtk1FD/\T1l^K!%EZh:Pl/TZCV9MKuZ[U6$
%]:?X%mll'd3oupqq,dG4qtf=,qF^j%n*RgDX-\U^kTL5H3;I#O7Ubo&k$7T)p9gGl[^O`>$ei@8C,Bo8bW^"2E!M^fg?m)8k3DBV
%;jq,hHb/ngmEpN/mM3/F]_5P)B6ghMfC8E;IbhOL>DMsFEo,N.(&>h2q))C$_7,oW)suD+T9UHM/t3up:;@oTXu,(<3[g7g(N3S'
%Y/\KXfr)j0afD98X-ZJ7<B(H$0/*iT4GiB>S1i2hMU1#f57a"%qQ8!i]V"!!Z(])o`q*g;:=egfI;p`sg;ZVC2XT8=\2NlJX8ml7
%)=5u;H(irkg;WZKpRl#5IP(1$RDLt8^<UEI=1@*M%sP=q[L+[&e8(>[[pG@9hsP]00A`uA?c^8@?<2rK]!iZbi54m@q1GSKZ1.)i
%(R-Gp>>MQc^Ha6`c`E>NenX^MINV2SD#[AHQ9AV0mU7?g793d0G!Bl9I_,7p^q[CenMU>\5osI$P5@KEgNW)e-+n(WK@$7!H1pH-
%26PVo#_,WF#B>Fc>QA:$[LV>Q3Uc.4)k4\+VnKE8:fl4Ep7*dRQC"rh3HN#`"etM)`O-j(6%E@ufiWb#qL3Fr?@AHTNo+AgY9*+=
%j:7398mD%u5!&Ki<b\TA$pS,@5:UQchg("ra8pDa=hT8$_(HRnKB401^O''D]lX3jnJk)cYISkDMpE1T(F#,7W#$9EY(/+:gM>tr
%%ke13C;R6%d+MZMBV3b!([2"2A?F>YViB`Kh6*8o#?L]\QJL@G*TX>tlq6W&#Ih)-pKQrm!.!FaRsFbOq>"du_5gj<oTmno-l(W'
%HT5\U@U6+4[?&T,+,4nuId"EqYO2"*=URDF?K&/DT"rmC(MhRGjlSW/@a\_r6`]j!X58:"!5!^=_C!)lG<0]Ols=^djJi)iX73E6
%r3VMN-kld4CcuLiH4O3Pf)o.>NN\6%-q;[k5ie+EKl[I"6P_TF$ep,8qYG$A=PL))m8tq#V`VAtYOchA:q_;/!Z!`hEfDI$bsB"\
%)/l]]DL&kWO'$:<Fn<Sl>/$i5jT;[ZKoPe`f0]kXO`N]e?IC[ek=;$1K'rS$Wd8%+%urmkq"-Jr]\Ik4W^mD,W(#+++!U1TVPi/U
%X#tZD)\K!e(ra,0D'%dYmsnB[e)L2(c3s(5'_";u;_$il?Bbd9(C/:S5%`P0n'P-QE0o@t04];ID>U1&@TS*djRSkr)lk@&`J3,^
%T.8.:BT,Z6nKG"NnC%<tE*U:J>1*B0"0HLlG3_dsS?6EC?f/!!PtP\=eD0Cu`8MFbaHucCa6,rUAah)@o3O.u:g)IRIJF$a>#F/8
%a,te^e0p,\P2*NRF8AYG%d.8:#p.S;>m?obLU7ObPoS-DHGsNh3h>:$=U>Ujou4Q;?3=-?rL0qY4gC/toBJ6(BNOZn=)2UQ,bB8l
%'Y'o.`Ufi_fRqn'?.k+iSWBDPmZh\'fP'1<e1I7NgK@uhPQESRp#$h'=N#1/Ro85CWKGt*+!'u#5:=.FFSF%HWhs!%Qc6'SpB&]'
%4I\EqbK''4EmQ\4B"N)8#3Z:+(iP;JqBrWrH;"2<ds/C,kZ[A]'2Y"'^?"uih>h?hl.*fMPL^as;hh:aI&];d>6J,Bq47KF[CM^3
%<aNF*WPSG/Te6K5VilKcn:\AYg1bAhXThJ4P$RF4HOA7DjIF-D'!0"*rEM.&Se1o]%8d(YgGaj,?icKAm:(3^aag_jkl.\d#]J(m
%9sNA]gb6PN=r6o';'W"':J7mAY<H`kjgT*64c:9*>$o2Hb>$LZCsGj]D`;DF&1*TOl1+@hcP6Mt)>#XjF#NHLV'4j)2?ldDLHUk@
%#HKB<lYQfpR(Hi%fqOe9eQSUB:&X-5I^XO!XZoW>CdC7SJ!$f-!JX_EnCZG8/U,Rskn]W[^/dQ(lDc3TO3S]5k5Jug[f$dhSQkL0
%VL.g6?N^-#lsPUml*^-ZrVL!YJ$Dl4LoEpn>/;i4n'13ACG$?][?Jk3]a%1q_bVe8qXIrJFa^P'qshX2R(\_)3q^V7HEFQQ.d6i;
%*qo':R-;KUr3c$7e,.?"Qm\GK?6h$-V8itI(>khioC>cOcK`!fFi,i.e(Q#c"K#JZE8Fi9k1m(6(ZY?B,R'dC*#I8nH=ng3]jD#_
%%i3]pT7!aK%J+9oLl9Pbc95rK-mo/>hKQ1$B:oAc[C,U4cmC1]=.kumMiX*XUo/s7a8X5o6Vtc59;RUUi:OqD;.V^+dplo+j0=?W
%5XSrrf]Y^.4_9%#GIY9dCNK$MdDr#OjkfCRS@artNI%>Ta(0-K21iJd<N4WkY<O)?cI9Y:_WC[;D/QRrhVM@aAUGuAGd2^%7`,%p
%>V#XE2`K;O^'8`0H*sI4b?rF8o\Wrj0mqj#*Rq0S80igMp>9\.(>mn"^3FOgQQp^!-f5gf@)K@)rHHQ7Bs.R9$BL)]Q@4+.\bDe4
%5Pb.p'?m8-?VB^]ZJ\8&W2,CK&4pOYdlPA.fY>2nGf.'tV"=omk$u4fX>JP<>'E35-mhK];Ee:7rJ1:Gg'TpqHLpQ!"4j?=O.:^4
%bKEZqO=YhZfXo(lOp>M[XYc?)bf#rc?(\=Aq4j2g=T-hZ\]3;k8'3i'aO96IHC^)7.#eA,M2uulHL7UOd.$Ec&94n"nS_3D8$AJY
%Lj\(0`g7^]]RCK7F!@#:T>6$.dQ0C*S_hkk3)YT>q$64U`J;u6jn7`E0Ch,IGoMOO?gZ;Kql$\<-[^JuhR<eP<k_6SmYb]p$,1YB
%`6`"%]t+Zn7IYcN5A>Qq52,pTYI*OOX.,a<>eUEqZgr9)kKikf^%YleYh:IRTTP)[P(T):]5,[9ZFsr5G8D'r:1O1O;UUR'$?UjT
%dKAFm]C.XZhRXMKo>Fa.=J5M)q'(#^lo`5QLT`B/ViSZG?2t(DS])t@"$M%EG.)_i\G3?*p5["-EZd.;i=)^s)upG/HR7]PiGt^!
%;V\Di:AWH?9n2ip:2/ZUhTbH&>Abq/NHrkq),WgAe_3,Ig9`%AM>Kc5r>k/:cRS#?%\5';4S$9a2H&<pZb#CNrj&&04MA.0qRl;p
%`uX]Dq#&^RVEbsZ$_2ZLgYR:#@'@:iI0S=,-)!L(_[4`\>e<9"D\6UVTK;o9eN4jO,Z2s7@sOtFS%D<7CqulYfM4r-c17'20\Yji
%Xh3HUc1cFqMj$'7p'_u<fh]/RbAnDmr4aUVStD$e82GTE9H<D0MGu0gkCL7JUY^f-].#TX(.A#(c81=Iesg0,f+@?d96b$Dae.k5
%+0?%J17;Y-?TTZ++89Q",>k5/^[#=G+&L0u?tO#ne4Ifg`k/&K<I)@/k4eU$69he^X7b[[8[FuH[fZT3)lcG++SR<<2MMs])I62g
%)5#]&euJ;he%cCl)jKe0SGS@-UBn\RZdC=2[[Zr_f_jUamp\kcfFAcAXQ-/h'8sC%D$k`MQZT8<^&8KP6kpd6dD_YbP7AuHFtJ]7
%g4$*!B(?GsBk#EXhX[o:4Wss6qI0fUNnW%[0&FK;_%DH.^JTh[6B$XB5O*Q<6skEC"ZDQb*EHE$JDJ#M$SoD4.9BiXptZ&/d>[M2
%d`'o=]k$E&(Cd;4rIdtnDR;`]ZUdn,9,ToOc0n%>cS<C%#lJN1LTup#A-?:D[)_9V>UK4>NV7H0HEe&I=>\X(TH2k?0MQ+$EGq5Y
%(_,AC7bf7)<$[8s4?8/%(a]p7#qq$8+Vb/8bcnDti(P`88ePHMej?<TmSNi)QYYp7lL==Q$QLd4G]0#l0bbZ``<'6n)_>Wr1PTt1
%!)Us9=E(c*$IR*(3OL@<7edg0;,[L,)k$JtD)nb(KQ*pO:mqFho[n$q!tHYaFJ`UoI);'NJ(l,2oIm/c:[4Cs+qN^[F^ZPb3eMXK
%Z;9RKiu"ZM7n_jglnugb."ae8.CZ@[;)a8?@d%2bl)$b;%tY0h'FsG4Jj\oN3'48Ihc#/I2"]4q4L=sD?otrD3_X:/3F?V3]Ak+:
%k3)8s;IMK&q=M63cn1n8omZHcOLFZ"pUe8hAZpR6n>ikAPWeB,[f<*6h10lMPuWsL],'1OHC^u<#_k,H=)//f7Rb">5*G.qC%-&6
%4=O(E'W0iE+=J+iVPB5]3-5E'#4`9.["3F=V1M%a'hY-#_/]@cftL?`KjcqQHj.(tg$-Q#*-a8<<TG@BW0C<MX?#oNCo"pFnIo/<
%V4sE!M_"d'\tZccpnhQYSqHKWc)17;%HiA[qr+"*8R)"6kT\t<*27*'N27#5G!BkG^tbl[=,0g6\rK[l@P7i2okUXm!U(kTdS+5=
%gh;s^-:tAqDP$[[*WJVPXbu';pPFY.`&CnnkV,W84:*MlKt%]-WPW"/?DLui_0(Kf*^9+8,gHiX,>[*8)7jb_en*Lad=,5`ZC^e"
%9k8qkF_deGJYPA)S1oSq+fJFFIlZJ'-o7U+oVbb0L^Y6f/3*!ei=\$fh#jJ5E:AT_W#e\j"L!kuCRGA$L<K@DFL0%AP<PYI^ZCsF
%qqfeN&)[#>f5^gkhA/mRipXWaLB"0fJ,%L_1/)mJ\n/]"(:NY$rVb>7%=9a?FrKG$!e)3_:9W:(`QW'Dm*#?Og*q,m4fCiF;GWci
%aW+AD=Q)&B?$k3+Z&XY>l/-u)R2l3No,U]O[IEc/rm1e&ptm#4>7b!Zrk8,YIm&Q_?_He5#2!`NoDYMNWVd34*rPsQWZh!9cT66F
%:HNsF*WDo5&:Sj&pKp)[^R!D4Q[oaDAM)BZ?(uFAA%H4inA06@$QCYZfHtdi1rk;g&4":[lF+_g.i.b5FW4u&XK:Zs<n+RQZl+2@
%nsG8No%?<Gb-U8!0-jHHF`!?,"H2XY/0=C6h1Q<Il.X@=TEG-Qr1KI<ApFMt!Y,rO_p$iYE$@7G2au('_WmZTaY[TPS@\)I#"%F>
%RdSf2Sn8i7_#rU46LIseB<jL&@6i2J?oHI:n3*MHDJ#;P,$j$+Xa*r:#HX?ZAl`^Y)?@oiker!0R\!Z%oW7Jr(4iYof^p\SPB@jI
%7g"3UVF_6@e_Eh!\3e@WNpG%WSu-cN;hkAo(r`qiNXH<3IAR#Z"U_H#0S4.dR08K+#^an>lE9Nm5\D!3b&S`RRHA'<h/Hi-1X4/G
%faJ2"#N.lA#^DDA4TkIX"lAp&aoIG)hK?+B\jo`X>rug'N@!ot+MS4H"%mg("/+Y:R6'mLIRMK%-*f,S-$BCK@G,=r>_(NpTI`0?
%fs!_aRa6+>TX)gMrr=?*:hButRs@'qncX8('[Ok3QH.a12F%?P#-c&JC+onN@\`q0in.Dg!KdXUnT;Rq6.R`qVJY$)!7H%45hLZs
%R'('7:`"oh-Hhj<,FT(22@-Yj5O7sC#*d1G2A!p&_.!5O)$Agj/1)Ld$lmFj\..%*@)>;9^l<\A+QE;5-PG7.c(XfA8/aFNJGJta
%D*unVfE";='c;d0fl=>._hA5@9EQQ)@qBf/2+RuQZT8s8'F]K7L&qYlMj>Fre8Si41[F>M+HD,#D1pTZfc27%":^ZjHdPB7]Ob]k
%BN(c18a5J1Tb&=[k<^)A:mYTJE4%Pm6Sm>K,r8rNW.?+%=T,k"p]71_jl-W8(+^eSK$Jm/Ya+I(GW+?U_1i8`Mc7_EfE6l+Z`"D=
%*PcRYKEb209bsrXX9d1jJc2IQHm;g!2H(Q')gOJo0H*SBL,6sV!S'-*:C&ss,E;I_`2uf\n82^PNn;O39!CZW:H'LZp2`cm=RS+0
%RTWb:]K$Q//8PL=7\R[]L6H;lh)[9`B%i]-9M0-Ap`U%N19rKM5u%QnmMI@m@3:l&9gT'<%"eQf[Z^kC4Zj9<>%PM(693"\#VV@H
%L&M_e1oXGE">Gr"Gm8,*VV0><Kh[>s)$jUO)oCL88c'OR8JI-f3lQ3Yo;KoU*B:<SZn=Z2!NuR6-."+MU*&_/fVa[$!?5*9S11mX
%oAe/;2-N:E(E`]K:<%olm3,C?9H8I_6"]/nK7I/KX.TLc*&GOW)L0?M8]2ecM5*\:@e)o;n.X&TbbGoX9q=KSqi!1sD:4(8a<bPn
%$/Ls6JH2W;)[\JXL^E&E^]s":;k%B4,_[f(ejDH+$aF54%8n_pf8:k)&kdPc=E:1!hGP^^)Isf..@m7Y_#o2)=eXR_BK@B2c,-$[
%!XFU"J8PC__"!=L#bKI0FMeDPeAZ9?Rf$ucD&,g!Je#.?+IurPk28.Feq+cn&nf(iUBqbk*mdde_&u!n<D*n4&8K@l\SO5fE+:p_
%^Ir3nl"V-g3]0eR=L<:G!C'[kG=\b*Ne(HXO"F=+E#!Kuc]q31N/R!(Pk*0c#Q+h$`/5HuhDi;q+B>-o(Buc+6]U0k=Vcu':UhO/
%:sqei"/d9*!n\Pd=oJDkYGNV;!;T-hg<^XZ8H]=##3]a=!tLnOVT1c4E(3D-_i_YFMB3':R*<oBqgg%:d40/(,>7iV*TdX5WH""O
%7sDq\nUS.VA/F?gK>QLYMAq"`:ld=^C&ioY_F'fffpkBt%3m%YVM,_<e&=!I.Et:Y":YdIjtcIu6.-Y#-jKb1>8.S]^sof0K=7_2
%@KuOWB/h/(;8(nf1OVO*lR'N)9]RplYCrfD%:qR[9g_k5@)WQkWK*b;^gXI?VX92=5_,%F%G9m5JB%h`T`LbI&A+ls6\@g"!hc@l
%Jq>k1eJYc?Gd'Gc-Rbpe]`NZcJ:`BEl\MNjirkcYLO_gS$EMDf!p+K4[0hKrIWZ=P^dp^-=E?>8Z@O@T)mh,!5Eg6nWg77O`.l/G
%S@KUV>V$DPfLAWsH64,8S2daS0!2>!3*3mElj>(Y>Zu31qNaE_mPu=9\n?PfO$-1+mp;*CL0t(D/3U@"Fh[&dIgUM>Y#(Mds5lGZ
%BZ3CN+>?]-Kk)`N=;1h>`V186OdlM=?dN$YN"+MB4/(I5G+441_F7B':K0T9Ft[J.7NrQ#*3]Z-DeUi%$m)(oTJ<USl]u)f%a`V=
%-P@Y>&dNC7@Gm%Z'C3RS5kn!$K/eAp)=8I`+)F+""$g)^bc#AKB`g]U0(AUqo'E#-j]U,VnZ*QNR8%?7UNCVr5P;oP4FTF<KL<59
%27P5cG%\U84272t.!f^TrNQ/]JlfA]59YbCS.W9D+4MX/h&.p'n"q`jV8pV8//H)Qg-D=r3iNk$DeKLeC(nq]$lCWeheQJF;T/_X
%9pa$s9c'*C)UP9fMRFP%%8Coe,iZpY#IQ#,-M?_s,j3MK62Ir-?o]0[+7()5l)%iiL\*_?%i1`.)p^hIKJCi^:o?\lJqglY*Wb)P
%EERj"\n"+daU=+,Fs+E%*Cunq-c_$5k<#[_34+He$'>`T'n@7d7sfirR=hdONX,3Rcr.Y<2Lq:4G+]i]$CYSdGtQ.\#+[mmBjW3b
%JVA[XCh&e7.[%mTWG\EpJHAgh*R0&&S::ZnOYMPQ,Cq\%mgR*4&HN?td?*3)g!HCYjA6fl%!ni/T^O,>Bqqron219$N\p`!Cl]5t
%\aFN7q0sfT5fAc%+/Q"Jap;g+*EZ5fcBJs_7=IYMF?uaTKgs?uW,CN/<8H%42%>m/WQ<[22(C67kja4`IBI<ATH"Ug5iB/:YsC!_
%aPfra-lM@r%:t`['Xcs>$H$.dOVsgD$S5nONi@UL2QDk\`s4L4p8im=Na>3-foE%q<b7^B),Y.chj.meQ$'gqEJM?GDK9DNac)T_
%?"o6[kR&=82Cd'#`g!';(Edi+(_%$HntKC+`Rd[Hl!R@XP)96mNSomc9_CpqTZZ!PCm-Jc*R>hu749d&BE[FM8XD8!%@WAtNc8&"
%Ccos2qcNA)0QK#!M(9R6TOS@jS)T`g%>u8c,B?I*J`WJ;;#3FNT^5W&!_c*1fi(3=$obU87m^i(g9_G)\cs@1lqE7h#Jrfgq`L7$
%rWl_J`\J'8%<MDc5S(8_E[J^J$0sOhLAlHfo)K5[D<,A#OPhNA,#>fN1@?n=KM*E,819I^d`C%CCBeTT:QM%5\d#4;=[pWiY%nru
%?70d&j*Vc48s-kO$,(HP&Ak\3+8i;>rKjXt&1Km>$e1*,cHLCXGOEHJr7K)].)O<V@/UKSH\J&?A5C*_A"J,RkCJYs'U5bLAjU^K
%lD1UjC_@uC-AeoGC_:8]DWL4]_LARaOq"1^+QH6gOZrVe3fo6S=]&i4oM1@@.^"$YP&@BlhKfl[TM&ClkQ!Me`3Q(pNT!VY6VE7H
%TN!a2iPk!9TZ(E,'8mDU+I'bg!o]pt*`.S_YUk/h',"Vk>N6@dBLD"<`e?8u*[/2RrPHY`Qf#-k5:AYY\;D2m`hB_%C5LGtW%HLL
%U)):kcTm!2OI`-p!)eU::-;Xo>ROP3VY7nd=-:fb2P=lO'?c\4;2j3q,]l`s5t$9:^RPtC^_#Hp8Mq%ReIc+g:=o^D>SB!q/K<0<
%2*0g/#m8AHF3^&NK2firZ>)p2K$J"+!#!g:e<Z1\d98sT"4tpSq>n6]f!iqi2!0@T_JIp4]EK^<9,oi-+PqWql%hg,L;sgL;mVS-
%i951%/I^B!GH`@r!mn;J7P<jLAATr#M#uk'=B$:mNk3pO,/k-4"+'AI;'`cOfcW3"8Z/9V)7<9MC!QG`M]CD0[=dHOO$-T2Y[-3R
%)kH\g:.*\mE&P&Me`G5,L<I9kZAg!EA!U(.&'bO2(9J'E!6,7DhB'h=aS?>B]jn`LTk2SQ\G[)Z&Ddp+5e6)!!g8ujL^]G.)#s,N
%9[YdpNe570d_)eF%'9mA2A@ra*[&gH=3-r:Ok(Eq1HSj#=W"97<o$2b\mC\]5]2/+#4AT)&o9ln5[b4K"7=<>dK4OK4(aqd8/S@@
%%\lk3#_c[pq7smEQr*8Ji\OiQ;kc8'WH\:g(J%Gj_ET4aL+TQf?Loin#)%\I9?1KU&OQk>UXMJ_`)%%'O`eR'=;&H$0elYmi9XsY
%R$c/qpiprr'13W@lY8mT0bd-:_W=Bh$l^eXKJ4s3/RX7s;-[q!NgS<Aqijg6063W5lAJ!g=_TooA.0Q%d-3,,@n@AuPb:000h)`'
%L<%1[I.pRZ!]`(H/iJf4&aus%YWb_i]lk`mUpe<&$@`g96Kfo>(7T6>-mXHn46T:S'QCs`*2Y/n0l56S9*pK4Zed#r\aQV$A<f.?
%*H\b>B0C-5h8uU(2sb.'N\Ud0rgo,[NA0pXdbF:C.i*HKDE>`j31:>:NukWh'J,HDXc.u,pj$Y=!)u'CfZ7!965L/i,(j,Fd`6tC
%ois+D+t!oD%LirUaNGgR?n:YZLg']$Dem/aD+1$;eB&.H4R4=9+#qM41Ga'6+;h7kZ,htmC7RdOQ14Jm;'1%3,N2AQLqA#<&K"8E
%r&o:hl=`d\LCYkN%ZaLX'9EuB1$Ng9p]5.I.]ab7*/;Y:?t?iWJ5CK='Qm*ZI=>'[j6M8)>W`WCf2!%NJZbW-l?`K@nXGL\&G@6)
%\VJB3Q&[p14Br!HGs"?R>>95(OSX^s1TVDP%!r-<#1jMRq_<rujI\cPc[n$IeZgu(%RF+:P`'4dUp8[Y5brC-%Km^##+i9%cJVIY
%Z#\>E)4/_6'(JLFTc@H86M\)*je!t'+f>0A2cK^TAZ5<`M'8Z[K(.3%;o(k0.O%lD\\Jn)EL%a?Nmq],(jZdRaJR":#h5V9;PNH9
%6&19OW+K6NM3Fu,V\*Mad"<25@O?@]1qp^ZH^,QG/d<-eiS\ETRfuZFW@Ei`8/F."U"l+L[Vr!_Y:#Q]I=uVo9LEq?\7s%Da+\7H
%b2WQs4B%R%7;jld,47GQa-#a#Y9=Q>N+A/CBn;f%ge<m^8ZA!I_*0+TCp?2i_(`>&UcF.E9TP)iO-5/:C=@9kl_1[5TRdu&QC@"R
%M&n0g/QB1f*jP9,<s8pdNCQke$hQ5kECi=0!%`)@I*NH=/25;P)etofIcktphl<(%A([*q%5WAOeDA'i^'T^hW$<[DDDjikLa&Xj
%!VITfEYFNseCug)('R5WmLer-'/=qA!S8Q60#i<bAu::h`A+$&ST0S27<R$VH_K]c)!XZ-&<p!/:0?Y+i)$'`N)iWF_-Rm`dR>F'
%bV#[nR>$3#:J?P@SgOT.R-mZKGbU[]M?q(5H`1/'/MnP_"ti@0_JUFk]>N:"@6;tJP')C5U<P*H=bAFMIQ!SG2k!&#-WgAhj!I6c
%Un$9P?h`f8@E;?UCruh[o%8%&^_(.f+u+V16cZL[4OI!SjM:tWa"Rag%PEnuN*;^fd_\s-Rr]'B'tAM"c1;]%;fJ7bWe]hq,SE4Y
%J\E2%!f4+qELMNU2gF<bRZF`f->B-3GcO.C2XZB\Att'7O.,8GlNd.<0DN^RN1uD`%22aOJV>SCj63dc-e8JpkXM5%LBf`[Vah(8
%mJuc^FEkWbg;($/E-,@t9*+b[."hX=BQP['38W+5(dtFK6U/Y>j9mcje%r;_6]siNfX_`3eWAA!Cle`-CfI!-U+*hgWZj)D=V2RO
%"(hgXfP4o@dKuTIJRKm0iN1Ln&U"A=)hq<cgXCDCht/Tl9L9eADE):E[uBP;\i+6$,,>;&,0:_T]$NfHiJ*(2PRJ#N/('!NgUI>V
%PlWDUd^UN##<"84NZ.,u+aY6;"q=RI_a64U-RZ3tPA,Xj3-6R21.qXWRh'1@;@`MT.GMrucqOO85IgE%@_rh\ObUm_3j02nLVX]:
%Out[$5t>R$WA+Pq1e;bH,,j/0$=HK(TjWN<"DeTE_$7#ZRuVh1)p\k6"c84oV]jBV<3YmH8o,uu%"S.479N;`01[_s9pgc^*^I]k
%%KWM)d$lQhe<GJETlF\Ur9B6Z."V4LO-s[a/m:D.k]i\$DqMo2iTQ_@\Y97bg5PN$^u8%c2isH$I.bj;B%\/;%oFF!a*7\=QrL0o
%E.BmWHdfq.LoKuH7u(-&SWL%k_DnYb>cTY^&B\Aj5I&<^_"WCM16qe,khm$U7E^25(35.H+hj8hMWpd]br%W+P??U"p@8mVVEabU
%WWW&_QkjrInaJAKgOO_`HCRE]Z:2mZ,eDBT8(hSFB>^TuOJ?L56E>meCn#d9a^ta/UDofJ/Ys1^BTIO"RRSGB*@3csh@9XqSDV\d
%lp3f,4Yr!/NM3+?iWr7qMA4ENBO[o7@TkPc%!5,$2IMnk$L:)mPsoE0+X1j8Dh//$,E1U"AJVDLUl0q1/5ljG(8-N#*[CeVPmn)S
%_'1VjKK:?(a1)EJ'WE=E&Pcou1Zn8H7-#&CEctjF@arOtRkP?V;n0tt$]%gloT0SN[_NsX:idm8K>V!&#$QdQ%4!A54NSqD<]QD&
%'m51<a<_cI0PV%EN`naL^W$&'Qr'<?bE`^s!TLW)"3P!lROSIA.WL#1dQ,.jjk/ro9RGf7/D+rG\7;%*Q$)oq7]G08.IM1/+:)N%
%[A`[q`5"c?g?(Gg)d#S=8@kJWQg@N_+2i%Z^!R3FI@ZLF[dj!e==/&&)INb=+<6ji$'n"D#nI^62;p*/J[]IPB\5A<"%9G.JofJ;
%-HDmg'b$Zq_G!5RMVVNZCuLDl$QPBZC=kF60=YHV\7Fl&cB5rf6aS69R>Ei8kA_0Qo3<I7@%g9.jrS@W]YT1CK*!DB$=dbfbB<G*
%[!6]b_kCSOimBq.&&,`/c3M@S!C9Kg`aJoUf7AbI-Fq`E%N\suMtVbiEAo\u@EQBr8&Cl#6iC8J\;EX)Rco&L+XZ1ZkeZ:!^a[&i
%*,)pd90.&!JY(m]4jdP%<]La5e4=U+nOPbpO)6,4!*Pk2;]@Z\&]X`28o2OKL-#X2L(7]::ZuJZU'YOIJcSR;_:#Z%Q82;tPEDcs
%dWms83"_N51P!E]I2i,XKXV]lD&Jq`_RGGSMB*@pZ*CkT2XtQX\8(LRf3AcCUngQj_;/RF/o[QM,%*kf-?$a\+i[W+9EM+tJ1_^6
%XKIS1aCMq.*%*@]A6_)mZ3>P%\7Y+W\u9l)i0XHt@#Fd/W0K00F<_In'fqkKkRNV-_3':e^D-Y9!i*gtdO[S;N@B=&#$#&d>i[`D
%M!"?/ap"ptHNp`2io,4U,TJ36=WLWcRs=?'D$*R%RP;*;gdd,/8n!H8"Gn4f_@?0UcSSA1(?@gq5q8(:B3[86_8AoIRMi7Z?'S(@
%3oD(1:YF3Adm\J6dc#e3'Uj,)cSX-*#\e=oY@3VM!Q]j@26U!cU/i7rkP0WgK:Pe!!Rj%]kT[GlIeofa'R;<F#SmW]-lfU9o7t8u
%$9Vuq%UF=9JB+0^Me`M?n4=q+&6GS?i:08=3A;Z8*=ipD,eX=EC"jC-_AFqEn-deYVZ+0(:oZBp$VG=CpT5?9Jfp!j$;%0XF?1%5
%RTpHPF]WhA4:rqf\S&L";EahIm0#@*8T,-c':UO[%kkue'`,*DmdP`Ii:).\mS$)dA<;k2qe'2SbY^,3pD<Oc?uWKrU?h/>i60G+
%([m_.Jh#i.[4o<_dKiE7Tl\TI5T76(#tT'tCr.@Cl*pa/2$P^OBT&3g:_5GQ/e-,U,mm1k1nmpM.B/B.KTB<$ot`Tl`j5D$1-.;Q
%"SaPlYK.%MRg`3Z^o%p@P8Xrc9Hk6a']kmYalcdePsfUb=QqHpAM_E3ib:Qec*M"M5hn&<3=d'o614\a9_:,Xh4RTED39T%C_EbE
%Ah^**,VQI"MpWq/#;oMm[Rel9OWW8M,W,^#VsHbe04ln"L-u*r_E_2nmmmo+\TgHIJTn^_.h%Bk>VSQTg9S9(f<Qi.#$;KJ*/f10
%D,'eq%#e&::4;8^%IHtM.8lXQcK]Z):BXBWS.Ks"'uMb;L(D&VMQL:6e$M#=B#Z0j,EHg8i)/-)k"<7BpO(J>*emS2?p'>_F4kie
%"'t?!6c$WmnHY!3;EVc/.:bJG9/$fid<Rp.JItq3EtN$g=_VoNBQu<FU%97*0I9D$Ad6V,5\c*s`mR:BgbHB3;#iS)4:eV$JTB_3
%l"#Ja>E#f-NOV?s%fs<f6Fqr'*`nJL*4>'B^@Q"<BF]X$*g2C'[?ZKP1f:qg2[j>F/2il3$>1*9)O(%P_cBqh*`?%.qB2*U-\()+
%FRd^:3HMLQNWCh"`k+k/::sT^NS95M0XrtY+^KK2FW;G<^^.MedfPt!`<TdQId7A@;4G;J\XOTOV34;IBZEK:a]>DV!D\AZiGIN*
%>m]2]gdm5B*nWIIVT$m%#-])QL>Ga;&W<PJaYr6Q"[W4ORsn(Aq"2j^&YhE=Y/B:1+RftFh9g$_1h4*IW/4J!(;]oI,cdu@;G*Tc
%.'b7/+'hr5S_PEQ-+pC2#HrmrWRhm31]TQ)aQj2s6cXg=.SrF_;4/B,:k<=UL<ZH/EWZt#Cl4<Df+h-Li,qf31.DRH^PPQB..nu?
%.ma9&0'b8c.DfVi4QGNB+r!_8b&mGTTE$JOSEVMKKlEO^.p-t%q&<!<A;4"^"r$>cb]?TR0nGbQ:uSAbM'T;,#qW`"ZZlcq_t25n
%6S:<h&8k=<'2.Jj3>l?DIR.5\;`DeB0![kn.F#YU0+pcISiUa(PNXX2iTBYeV/"7Zlt.GgWKTAV'Cd3,!6cd<<6rL?f`:CkMDN@h
%2H1F3Z'B>fIB1NVfiSqsFe]XgA.]9S8'<IPW$TT>MV>p@W2N/0/2topXRjY=OkNG2,%nNVX);;NK=P`tM.nEAff*Bi.PK]$Q71?:
%C5_BJTXP3;.k9?gk7AhnM-647V^2)*$q&U;OpI:_TqqPb>6M2?K,?_c.BI99I-L-6#Z%`O%@jH"KK1gdN+sl%l6[@uM'Z;bAlP6Q
%.rqDYA9K0_g*UN-,0:J`GFRCT*$n`s,:0;3![e2eL1`mh:(4_h9'KnaM3FkM(>1qp2@=6JdOajU7]"66*C1Sne7"aYnu,FUM6P8s
%P26:H5d:`jT3%%?X2EF8m_]EMGShSmTo/8[a&3gM9ui\Y4D+mm/R<4%=;HI.Dj3^#'7"P@KL:kV#3:SP$sUkZ!a9-9KT3>`FjXYC
%cXDaVCn>"/>E4eq/lmQXq2BP$nL0#1V.*gK:#ongg`E;i/B.oRL^uUQ6B*A)BJ'XLW!/,lk'.k@V%N4&q/eYIg_^PVG_=t2leX6q
%0PPA5>?<kZoH5RD3(aQQ=5_iX1VtC^d!uEP7T"9O8&ef(@h+c;"K'4K7QYumLD&,A2kh,?V++]%ca0/-)Pb?X;'X82E$K]#q#u.^
%Ue!1P+Ws"WcpCU59TnuS;=YLnKB]>@f/]9Xh1LMl,TAJS<jT\5:D^u#0URCN1"$gdWS2JNYo,C<n'r\]h&1$o`XGP0%JLaCY(_`'
%i_1/"F$q7]G_XIY"-=m#BgJ6B%X3M@U\\!58/>f-Z&CH3BG%<P]A?T#3J>%#;Uche$_&D8EYo+,5C.t-)pjs'.QsJ6.4S5n5nDtk
%0l[^2ZTB$C\l(lB3TH!>>;8RZ#H<Jm>dRqV7Nk2@%5S]s#bg[+.8"=-#5Zg(_*[e*6d&4E>/,#gfnhLXs*\OGlPZS8&JrAOjU`5]
%dfBL8VdX7Erj!GmWf0B(MfQoUQ!iFT^$(Vt^KSkI670,'KT_>;3Q;l&D+E3*;%7!n/Jbq[MqX?W;!GRTR]hR.D9;tlYPI1:5Y;et
%o1d*J8]+=;:QO=t+@1ld6,LeX,g6_/<#&`*5SiDEeEUTO;o8`>>?<FM#UPT*Q"?&ZI0q5=TKogHZ34WkhN@$-KZPo_A]Mtc?o6)K
%e=%'3b1!,t&kU%;FuCb0e[/dEO:<ZRk1\2tA-5?Q`*(!9NETF,8@RX07PV_=XO&?;NS7fp^9HHB[i2r%<hg[F/[QE6'm^:,+Xc55
%%V$!YKa^SD;(mB+/'&r:\bLaLJkfKPGjtkf+G\BI'P_'OTp(`m/q+YGKbfbBGZ7m0Aua$a:jFhNN%TQ-`f7M'nWW)Fj$Y%>W%/ZK
%#,%Q0KE%/W8\u$E;()h^;f!Q]o,]c,XVdEo5TU@q;UM=lpEbKham\DfrtJr\85]fYU5Qt+i'M+k;9`9sD@tU05dlH"#;;AUpGkcW
%NRQS-GleR9HFuug_aGq1q_2;@Li+1#1*kfpJjHf;-!hXiah*:ZQUg]_XZ0XS4$g8h,[S"84@f1!0J<*#W1T['Dg['RC64sjD7]$J
%ioT.eG25,a=:9oAKp$]6R"/`?i>%"F3]j(>RL:N0jPXLU_3;5DfJ+9bl$->BI8H[-\/QJ+/d"c"MAI<]a1>m&.s]<-[7E5_j+Y1@
%a6JToDH%ZY92&Ks6&mS<Uca&VY"D^C4hLhfQ)6m0q`i#6O39On+PU"$J`fLXV8`bL70!idNMh3B[,g2clj`K91'qDiS3.`@@`:-Y
%A0#%dkdhu:;jJKFUefW)7T=^Sn&^)>Z=:enq6_/;.6iha"!Ao'W44CUf6ZX%/LY2&q5kU_l"/[`9VJaG9V@[oa']-C0.2s:[]]tI
%MM8,u0!U4i[]4"/FiYjMZ4a^d6WT%DnW4L!,p'?/\V`mZNEi3?"?4Q^B-83dKk2*+1["p)U![F%a+ujrOkLb>!K]aaH&A#,`+kK7
%;&$p+C6K#Bm9"@KM+SCj[6-H\Kj[_EegJLUXonPh(+@3=e)6X"Z9gRKoBJA!+A7qtk*BLhP0b$)29N10p\6%Z=eqRj3T3.2X-D(U
%19<qhbER'-FNQ8"Fik"qg[h.+jW#SiqH9DteRIW.ClCt5Tg/P<9cI-,`cP2'iS6$nPuHrsWZ/6A3Je-VQ6]+gbEd`XX.7<F?n.SG
%$B,Co=^9R@e]MG^=fu"iVUd8aNNus&"ADiIQgg?,P3"[;LH/GAAiZ/I0JS=7^\t\q(fi6/co(#iL/NRBA"T.G.pF^ngi^8Sj`2@E
%)7.Dd*k$$7<N06+j#p_mr03JiAW'a&>W0aAF37<V><$'@'#LKrXHVScioLflIL3mc=BN:B&kpk0QUFQP:=@jfF4ZqoIP5p<IY0[-
%9?0sh2KOj[8USI<5aF:t0gj\\;Tba/o#ra4<>R$bl66Vr@lbf-kfM!B\qUBNdHV'3j(""e9^YI^CZAnLjeg,Yp]q\RRiG!6#:CA3
%$M)i1mOuNDitJ#O-n,Pbe!q9@QPK'OB]A+s@>TAlJ^0u.q&DuX(p*^i<UqHTU,)P-X92G)_V[tZHsA"^d]R,WHn)csFf^a^-4,:c
%i@Vmk%(@n:!_!MBfn<E_Z)"e+&'k>q@8F%<CH@180Mm\!%.p^mB,shM*/jDb<A_q;1efPQdEF!>&1*Hkf=8*B2gVEUB]>l,.8=*V
%E-\C/U^(0Q%h0ZmJU*fr4EN.#;b#eYp^KirQ]7A3D/-M4bJ^u^-Eg"Z_'_+]$B+Zc/?'E"c)C=?;$*!>"D%tG/B_C!<Fl>6A16U0
%qmNe</1?=i5$3(fX;J!JI0L*>bDNPc#$8$tDaC?>X(/gH9Zl[bOH0'6+qg*nYr7ZE)U%nf@8Y][\gNK:0*S1k/?6&cCGj2UYuj^j
%f<I#R!qCj+Q*Qi.TuhOBAQ_*\W.>bKAaNTo(i3J\4'!A.(692,Yc)lLKN+7u<=tAtA-LhE;@Jl?7VPGcIO_1h(1fdB'j4^!/F/D9
%qaORrJ,PbNLq6\hOniR]>sl>-QV)[imJnVm`D91iM/3/"(Vo&Ma9@/=8N"Y8_\3]>CEhFtg<_0&:nd'QK;OS[p7dO4%4f)"8d3Bl
%bKlmi1jfhG@(jr/7]0XmJU,lrhp`7%&Uc^(.<Hm`FXBK>9_JIW.>>e&p1[4A1H&r@%'rr97`S/4[W&V#`K9+*Tt)ZUGEAuU#O%5*
%TH6*k6S_Q^Q"DJ@`d9$R8]Pd=$KMr[-+QmYHK[!_p*[1]KouiRDN$</75@d](RSD,Y[F"4M_@,WKeUC\#2'?hDaUAB(p+Kl=W7s>
%/(B<Z#5nn:)83n`mf6c#*Fn'.dsF&fnNu@tk3nGj7GTp2;%[Te+DPjR"2Obi4o>qP"s[#t)f@F[Tt$0Fg/o@q,H![^KU%R?]U[=:
%IEL13JZJkeb6iG+F2VL(P:FAh-cmm:UG6Zu'f"0De3UnK`&MDg]+PsoO%M4<GXVi]rls>PK3ec&i!P+,!&Y;uA\nqf8jIc^Si0'j
%H)"*;<?P--2N:5N/3"H-c6Q6m@q!07pg+C"?s8:.N^d,JH<js(buMK\OR\2B8/<05`,Nsq6a=piK0s.ej6.I@3.N@9V<(bAhR.4k
%Q_AE:#5D-7=1.re%<RSVc-UH@iRqk$1B;KqZ-GC:rG]iQKY^%3&Ms&&&NV9k]Ji:$Kbh"?V/4b(8/0hRqAX7uq<_O2&*'RHI%;MX
%-kjg$kDHdhAMBDf!JHRukkZ'kS\$MFBs,K82I3-hiO$*>$F:gj@Q,d7Tt.f\Zh`>fL`M?)=<S8pb>@aiYq"jU_fl49+[&>fpUeOs
%nas[=D,TUjO5>9&*Iq!3L:tu^`1WFXn[5*\2KYG/F-W%HaUfr#U3+9dT(AQk8neknQKb51@3]*=G"B.5TdY7*NIEm_Camhk+?3c7
%;#su3Q,Ks*lOGebS`lMjFGh'bR":$t@M:'+;f+p%s!')3(/?eJ.%&`55c%I^L/M1h\j_Se/$E-EBIICb%/D;n'.o_l!jJn+!F?2"
%`%e(BY;.-O$!)Y&@3^M,n]_I:hA?U/i7Vjsjf8rR>53G\:pcG-%3*\aZZW,R`EW1P-efJDDW'PWS0U!>g;PI1/S4H1)c(0H!9XG1
%d2T$g5Ep*8#a=G#RN).\%2)MENs+&HDm")N:bek;8cZ,L7M"fuM&%E=f>Ba')UVsN0-(FUE\L-4`mg`Z9^b(u:!HNREO55ANo<f,
%9/NElW:Sb-b"s8N#oq,c[[-K\NLGm3'UdpK;&d3sM4\?[QL8iC/MZn87\/E_<^sr8[_V;c@&SdS:D]Fo7bi&a[oEp7[)C<%)[0Vs
%-s_D;+2MuTZnM_l4m&]MY/_INatLJ8$8;.;f'6ZY@Rd]YXuO)3Mn8PN-e?@)0:tUpb8..U))8FQ(9YYlP]da`F3lBC.?&u5OM[$.
%5Sm$Dkd.Dle"ZU-3I"u[&V+@4J^U8DTA!sg-;lZ5?48SPAMu*gbY-#*0VK:O,LI1A%D;!FnMS[<g*ikMUNDC7KZ.^m$Wj9`jeB98
%XO%q]!6`U)(<a][`T6S!=2"pZe8<+!dOIL=_rL4$2DC$ql\<"m([7VWec-d.<EH54.;ubWMHrZ18m/7ZnUZ[PCM!I5gBcc2F9hFq
%kaII0o/;PbgL9lI3P6-O^ddkdc@?Ko[8j\E[i2'g4/U1L<C$j!cUAD_$Y1,)o7D12P(K/m2T:)VL..9jYspcn]KX+82N#P!#)t'1
%!%bA"W+q,Sohb.f1%F\D(*,$L&'=^-1("YpN>3cC7(';:KRe;]/E'Ti.V"0=orp-9FK2AfMI^O'<[a-9<OF<BbQj50Z')orjTEHd
%Q%f#6;7SIHS;rjbPPG1k%@I_<U*9Ko.N1's0%#dF!%Jmq3e5-m#qa1a^2-n#Hka8T3iqc`]oY9+!Yi>1>,cfn"*+5G5PfRka"pJK
%WA_"HSEq$)Q!,V"'YTenClI4D*<I"iQs-J1,6Mqk*0,+kadP63<E0-@Z3HAKVo_7g;2]J44),HG]V>\-4HKieaWa&,&>p9_P(>UG
%-sagW=Abi\0ksOfnjeZ_pbEC.;+u"b)MjR[P<L?ce-,(G8u`)dc/_IHW/m&,^qselT8)(oJIW1cem,:EW:N>!d6!1>']h<_nkrrB
%-'n+&iikkWB#JcY0\4a=DUFr1_pMqs-4V!V]88OQQL]'*%_aP^,3&".(bJ+O>eZdHlYsC:*+-F<(fs8;H%h0T&Z`^?>=s;_n_cla
%*-6JWG8/LWL8hn_(a3lV4-QK7J3]JC()VY>%@qj.Cs8sAHVcQeOI>?JHq(2FA%?&rLX/N-XJc0;Aj"4f)<FiI=e:o#'D8kR3>iTX
%jNC,f=f<f3M<1ONM5+1S-GKp12T?QZeL?TQ1jXBO(:p3CQu7(%<#'tS8HOUK4/V=gJK>J)D4A;mdW5s'\m=6&S^@H[@Mr6^ogG3f
%-&X.nPUj/u?LkTsSgnKtPpi.N'<Ym%7%&"jQ;*SM=0cS89Xp6S'9gdaMT?X"=p7>!kJADk1,^LqTZGcU=oq.4k%"X[I\HQn1,H"\
%+sV07pkasRW?jlAA58F'Oc_Y,q':f>3M(_tQ?&5cB<m\1R"$G53Qh7U[?.0-57?d:b4IJm`pkEV,Y(QnP9h34^rsB5)/>?=>\&4Z
%eo-]@79R>n"rL>iaT/(ehBE&\P2J+2W32$e0ZqNi1/95*[mVg);dJ@KW$,V").&Or>P`:[*a;=nLBJLW0^dp*1X"mgQXsTe*t'WU
%\'8YMD&L+"cD>$(j[nra59@#0&2bA^MG*D:%pQ9l+><>f1n%O#d7&uFZ&-g%:8b%_Mto&qVfYj@U=#2p9_mghLDMNcCi9OZ]G(*R
%>^F5:12^B7_jW:WFk#Df"r?sB-r?Zj/RNm"29J?Ha5qcu&7(#f2l/se<tLtP&A\=lh7KfCQ6]UB?dSgl?3K(N&af=No[LS?EIgB,
%KR=EOL)'s']:l/qW5$q(_p$o\kF+If1*VD$9p1q-N8n\K^J/ono3oO?PmXZd4CRsDk7Ba9@ad?)<So#E.d$%$p)m+\4s]S)Jh!q:
%IKW6<[#km4P0:Sl9+utWHd=tH8:$`mq$4cOaC]f%?O$j`EUXIcT&25BoSZj0'`"DKb:9TdUcGl,.HoKgc[YDXO/IHUgYIjABd@\b
%)hae>6<!W*W>&:#lVBm.r\X-.:BPg5f^iB%Bf438<:G#4$Ne%IIpVFN,*cD_.WY6\JnKQ_G]X4`s5$0d:]5J*:IP.)l,22HQVdm(
%RHmXZ#J^MimS?9sr`&CR:Bb$RlLQ$jeN!ES^t0$SilS[MgS2/mTubWP"s2T7i6`XomMq5sqKV;5GPrEL<]Re"M3<Ondo#1A,/o<3
%`Ca04Si?iiP*?,*Z,u-0<=(h,Q<duk.N#QR`O(VCk&bu4*Q9.6e%]`pf=O$`NA+DoE24V+(TQ$OZ:$1qF2M`GHoK^:N(fQr?BtbH
%bX>N)qVfJADuF]i&H$jMg'+&`k>\;4A9U`#OuB[A+h4HB\W!5NoSTqtebdYu?J!BgE`JL46^^>0J;eMaP2):n'@7^,Z2d0t/lDP,
%>Y$9@IY]\$C-p-4N:L!<0E4f<TOMCWLTqW9\%Yp6($?gc5)+-hH33J4)3:3MAl123,ZUaekF\PT'EW4R0<S:^>/nQ4gk`IJ`84;u
%Ja>CeJ[-V/6X9PNcG4iH;u&/>J%4Y=Rj?I>?.bn*S;1;JeL.b[jW1)Nm"Zb(:rJ>S0>ADmqP(t&XW.8NM%<9i;f5H<OMr3(-hD=\
%%X#T`qZ2c9F'R>co0BW+77+<liG!#?2@=2*R9#MT(e=B2W_[k&51a&O=*6TYbZ\IB1]:!8IOTftRd%iV,%ehu_Gj9Y;mW98R4pBG
%_5/8Vk@)O48NrGUR#4RlJD4LiILca%!XBXDIIH(4LBn.Z,[VHNNX9CX4d)5I_kJQ9$l[M'N-_G2V/1Yg2qlq+bl(_GDpQ=keLr>h
%4C*='6m[^pF5FZi&'8e+39]0:E,XTbeX2OC$=-&(o2'0"I]bL*[5<5&R-+(+e<;DKJ[l&5:pq/B*[DD-Cd3q6$SpL<!/1^H@AB8o
%.;W!dGF2U2PN&slnRP_@O!E))#mm"_Dnd1L.<:'UlA+T`(iI8Xk]&r-AQ.NK5E0ssM^J0Vd[FAY6p897@M,P?4h;/+fT<#$3n--e
%%bbn8P*(f1-juq\=%-$??.ajM"LF0$^dXp7q>(>6E4pK`N`Wm@eJ-HhW@4thr&/>rXQ*]g(XFo@]4;0tFS58&`-QJ%re>if9!L,[
%`e%8L^eUTV7>'bsU_@OK(3RdVR.,UgP`>-1[f8=CXt3Zb"srkP;TiOsi?="^A.T_&?IELVp18oW\%Esl6SjXZ4>ROZV>V1OO%D*<
%R7]u,OB/'fEPWPqmO0]\KMEp+;!GnL@B+]N;$gQ$&kHT6A<aZJs1<7ceAW!p+1GC4pWY0`fh3(1?;V=a'?=j25t)qrJF&)O+t<@7
%pHmQrDgI*LpqETnPqg\N[ghk#qlmGP53'0]Om]DRWDpi_V#@+t'4Z>/,YaeE((.Zuou29#rj8%jJ,b9k/`n-F81r!ce6'&E>hr>%
%i,H$h3e$P^:O<d>&Zc,@^%SLA9oM@]02`7-"Ndg1CXc6jkZSF]Q1PF]AtT?jUF)tC2)=p.%3IWK.P>lIE@<iV\0qiAiD>2TKlJet
%$cSZb*!]gf=$Qc,j18p41N:.'[l(WXY.<r?%d$%RY![b<I\OIX1/DA#mcXo*k#u/XbJGY6ma7j\"cra*&%s*$DPT=cEjRB8R<be\
%mCr^h+ZNbs0pUHX?>9hXM>]kS'[bScq"VE)WcLmF)H)Bpld5B5D3ad<X%_Xq_@_r1>=4e8)mXk4>Tn>IEFC<s"4l]WVh.WEdKEaH
%8n?etFR-BVaUiiu$M2Lt@Ds8kjs?0-9K-3MFqM_4f4@)2dJ)"?nSl^M%Jbj9!%Z4>XH8_A55:UbAWd5s0S\N_C<P`1[Oc4:JG\X1
%Yf+:n"WuXg)/nj:T>"J)s,4J8s*Io5n*]+`<EJq`^B3&niE:bBY#e[15o-f)>*h:%;IrbRZRHS2+\[]iRE.ohPt#D@fqF2G,kCrU
%>8XJ\-8SqY@OSLpcjUXV66^3>>*f>$D@$PX;:?d6m4AL].IVr"&s\6%CPcp>0YS`D)ucQ*@E&PN<VchHPi87H*,2&n,`/u!nO_(9
%SOkSi%:2r\m5R2-<3q/*3Ag(^d`$dmWft)CoL13<$BE,f2fr5?CA0$1Vd&UFTbhdO<uh>fS9ekiULsricMSdd;]3r50Tfk9'^F+7
%%kZEZWC<?c8WY=II].b"fI^VX<mgn/]:.2'-2@gei\@/bA2u9*M`2$j>$LReWQF=URDBQ6ACM=ZH6?#uIB/<4KNCGMksN2*b[emf
%e.FP'#,d91Wo<BC"J$&Ap(jq#93lH&YUL3Yg1TU'eo^qB"/kDd+LK');Spr80]tFdY#3W(okAj9?)oDiBGabECke$]_+%`Ua;GUZ
%SdRcVUcu^e--36G&ti!]b>q0fZUNLCfiS3sp@d't?grKT*6W7)qp<ds,9V<>Cj-7UZB%>9C-tPeXOb\4&g8"u,Yu#YY03JBahJf<
%3,Y2A9+ZIAT-*CjSS$t*]KAOGeV$mO,+ZFX'Ua6/2rH!2P:<R-1MT^1SK0PKQ)Us(ja>h#Q,"L$mem)NURl)R/deM"WjdlaMO-J-
%Cnpj^fAkUd.+I^R5s0DQ<:?sABP3Lq^Uq'qO'T'eJ+RcR7D/NP@<h3.hh(e0W-?iTGVn>-HcC!n28A<ATg0o*Q3*EOf826mTh39#
%1+[qWnTp^0EAe&Mb'k.=(e;E$_tH26[ip1gVg;DY"e0G-+9$6hm-T&1=.rEXkuPW#E&V8im]F1;T#m&8d%T)C'0[50Qs5IQDK[l&
%6HHg.O:_(-g)</17=pghH1rp#`<P;IQWqr;lR2$ZLBXJ4E+]-dm#r('g<+P75F`e2,(@E>h.-se1qE=cW[\kP`QXT!\L`t@T`"ZZ
%n3m-j,Eg&C7IiK#1"-I$4TdppCZ!"6l5D(J2dnJ%80i)P?lW2l1O6J=&1N5^7nlCr!-*GEaJrC'$kOk?WJa?E)'Dh.JZ=$lbQ*c?
%QMXc38"-)S8n*e%OlB?.Boon/&--@@1pJBXGd"1'/0GhbA]<df&P#/#_9lL3N`7,(PKuW:$!pX,N%>PGY*\D/?(!YR%c2/rH;2pd
%ESR`m;\^ZqOfinr3$?Vd'Tag[a'3,_&b&Wh,/Tk9`?O:,)D5)Z6E"!"m[3(!^iUI3Vk$'h_\YT'T;AV[oX)Ya,dBnE!pP_I`F+(J
%>kc_H/B)(?=Ftfm6'kTT`\]aPLJORn_4M%3@`u*>_#J1<1`+&X9LYlc\N+)`=^hUq,FFO6-%FRgeo]`8BtA3#-_.]l2t/.m^f<0h
%Y^>H\k>GETqm44)Y?VkELFbLUI8Z#X/iD=9C^&gXX[F.kBkVn"Nna2f0E>e^EAT9=#K3?^r*7o@hPSWV>`^*/6(NL%8pV.Tj0ESY
%p[es_DV_2i;80;/!f;b&iu8BI?3mGQZDE0K#^UMZV_E;pgr>c)JX@;iagl_(?Ou0i/!!t#!)SLK-h,\Q<5=\!*Hb-D2_ZQ(glfJN
%5T#\n>0MiG!Uq9oFl>/KlA/Yu3mFJEhPEOJ-rX-jM,5QJ`A;$$&tscD!qC+7<(+qO;]rn6M"N+Qff4R@K\qCiMh[CF8g.LH,X3qA
%&H88L.sb]+0Fb8nHG>N'SAu9,/sL@AY5Ap6'l)/A:nZ_cA+4H(0gW/[7%_To5k76XfH9ZGMR36!)o_+R#uMr_/st4CGFuCr_,KUJ
%X7>F]MauLdebJ*7+6K\3rOc?6Gh03D:R6<$\4NJ(f4(t1>&.lG$qPHYr4jTu@k2C6;g;'a'VS%R.m*nc4;F<n2&;?EG.hTo-Q\<.
%D>%C*?m[ta[`3>J;t(Ir5"=idr>W$kC)Y'lbL&C\Au.V'\MQB9Cb&0Xn8?cc1[%L8Ffd+AkQ`,4$i*uY!O%][mMX";LF.?PHDEOr
%J,Z\,el?/q,UG%;GsjQH^)ne81Oq7V=[Xua!EDud!JEQ]]>B6f'7O`:qao^QAU%FFP`!t%Anu\^Qm@([!_ta7&fncu8D\#&6$'ab
%agFgs"emJ8M7EJgBX[t1r.W@pUiiimHZr0i-"/:;fC-6fn1.G=n(L#r[m@p3dttJaNub^P;_o^7\4qOMTGqmP1'9Ik%5:%Ok9XdJ
%Pk@RHKIcsXF#jq"3ji6(6@+4V?Ft-qU.SSt)Ak7;F0&@V`P4ZMU&u$^TN@gFKC?!W@LWmMVg)#sLbF.!E@^P!2=#Q1Y(,I&GUk-Q
%m%IDk,$iW!]N=R4't>/",i0d.6mN-@.R,#D^p'\DkRP_8M[rDGiD*9EAl<n3M@@Gg7G[R%=ilnU84etQo*s^O9ftIs+1ikM#&K-W
%Vttft(ohT"m`W*diFjq<r"-5G/q/U(V:&<eI3B7R9m=pP1de^&N#pAii4&J&n<!oEdIII"7`:%DnU.ACOHFX(heMo@MLf!.DPg['
%7MlF.pKAHrqun04CC5[A"O_-rjqQ';Ejqn`C8a&OXk<=2MirGh70Q6M,q:+WJIP6-`5BnCVmrg-luR\\?Nm&2=02gnet*%8Ph^&)
%O:M2j9-4&@1kBW9O)@J-J1na%"PnTlH%"I566k(u([]l4EQ]tC3#r<WUob#h)3JM&n`*J`k(#?7DkKH;&@.enMTAW?AYAkQ4c_eV
%d"@!1?_p5V7V$%D.'de:0c!HuWG.fD(;`fTMuZ3F=OlGsJR"kej".s9Aj7I>"><T*?S(s0D=<A'^+co+pZd1U$CnsN>?WcGFXS1%
%<E\j"BI@IUfach7$:lP`#V.8d(;A6_/o>*UpOkc&>/,TDAA3TGm=Z)Wa""q@F`b$Vn(%;ILVi3dFD".p[O;u*1DpN]Z>9FCJT*gW
%BT-c(HIZlTd"8'$18XbUVO+foYFajbV.WAA6-\(gPCf=L&juFj]uOaG&4Hnk9<-)\,$Wf`%3Dd1K5Q5kP4+5VNeu7X*=aX]:%M+4
%'\^-$1NDBo9LXMl!!b^%5U%Eb9a`CVWs8W0p4#3Tm@,sF6OX20gFo`*"OANmDPWaeU;7!bh)[e\`C:VC!VX"V$AQZ1%5AUm;d5'\
%2)Oj4URLk;i-s>O+JcKGn$W&TUO`AlW;3EM'*)MJRMlO9/9.^ZB;MWk,]2U0]n-lF%e;i#Fbh<>.OT##&UtE@SUb0`B(Of;<"-\W
%$;X<,:^flHmHTRW>M!Z:7XR""9s`$#;5IncG[m't2R1GU`+cY]!.![p.ZdKnB$#lpo0tBS/E%07P/lO'"0;]eItJ05(lQ*"oOHJT
%@M)>$p@l_C2r`f#6BX+#\+4Ye@Rr[n#iV-n'>u/$/9B,0$=r0T:[<;upbI%nR;Sh>?e*D.<I`D'eUE4eWgs'gE\4Ydi"/n@<8\0q
%JiUme6mh"fYeC3<kVO91A_TIBR4`cP1H/2kLY<=.(OUHe9i\E7YWimC;6cK3W21\W(EspP@@u,5Ua8@U2!bKooXo?q=WJn2Ql>"X
%eRjPa`D15Tp'W47qQTQqQ.&3<h];;0QGnZD)QP@<VjK%1T]2i@OL)PM&tF.,r0sEOO9"VK?Gcr.1$_-R:B^i4&@YMn@SO^J4*Yg!
%Z+880BPEOTT>1,o]t)MT3@F$AXj^"8Rg\r%K`p^9)qokas%F\Kl/rb7`JCF'AjO<-N=6kUirh.J6UoJqM9JIA*[;&Rfq<93-3-.r
%SStl,nhq9Pp>&I/o^DJjd*a2%hPD./C,X2g2A!l*U?_u@BOWnQA>^0<hjVc.b:AB=jkRl5>dgCRPG5=FbsWWm;2=mZE*08Pcd%HA
%@4BrV_(:Pi.],D(aTK^]/Ef>iFC>F<[-_-p]QMl)h#mO"[(glX4E":UF_52;miiIE0<l!rAS*e';(PV5Qbr!+D:(D?LJ!\)0l[l=
%D\p;7,u=Q>Lt(p6,Po:f48C9?MdF_OR(i!DFR(g]@Dl.Tgl87menZrKBo3P]a"m_!4&?7thR-Q0p/c5U(M9J_Pn<SN'2saqZQmcp
%qV3g_pd^'6rZj>GC+#^<]"C*k(H+RJ!XE_BnZCUs%3(B8p$<rg_==O//BCtHEH$nHH0gYrm!Zk8q;C![W6dMn'[X%Hp9l;6,$C"$
%/in`0A-%etCMBeIMDZA2YaD;d%e)lH&,;a$==n<!Rb^;]&2ja@/sl_S0:(2.ZB7pG$h/f(`J0i$Gg^8K`/E(B`LJeb^s#ua"LeFC
%LZlFoB+?,RBcl9$Y'TsIndg'j_Zo.q8L5_U'I_o._tUE<4c)`ZZ)CW:8F-'_[&,J??P=G95\pO[:g?#B&1(tq"6"/;NPts3!+jHd
%Y['^5'5\ZY+hQ!0L'7Zd!`mF[\:+gS>AO66$h;bdT[jljhE4u[g^LgN3p+;P2"5X<f[s*-e)H0d-?bA;O-#G9X/fcS@(e_phWqqr
%@!n:DS/(#jAC"M9NJoFrp[]T[/Y!8$hnhd$)V"MO_iX^,?/lrnaiq*!rAXj/2i-5%,"E=@qe,PjN-d?j9nI"*,moXX_&X&tiZZFg
%4c&!kd9Pjq5^!^.+]i``bS%_3]uu`I4&rkUeYPkD`\V??GWe34Et/h)?*FhcO^bs5=JN3@6O8oc1e(S(T#=VAo7Ze=3!]%!`J$09
%G"tgDQFRLR-PMfpOh!(\j=lc_36b\5JNA\5mkcqc#BehmfW7K>/"`5A6LADj,D9E'P1c#f]iY'6.[5S9T$BFLRZd/K<1cmh,^<O'
%3a5P2JD7uNVBk6?*5sdJkP.3HZWSp=SXs][$pJ\=L23p=UljB&LMCUO+;h%uA;=kSkA@^(`%]8+8[dnO-oL+-FO5g*MUq8i#cSsF
%ge+NU+AM_QZ_V*9Js,l]7q?A;diRN=C7J@[KTB7>6$\do_*5]Q2)B"27udf]q[&bKP!%NTHY),HN;jAmFBN**]Q$;&fYX<tCuM$-
%=NL]J?r?=l9_K5Z=ad(mF,8;6=fA2W4s0"(Q'PrJ/o#'p0$+pT=gbdE^J,]ieJtb+>+!c]@=b^gRF?<N_qb)u=UI6eoh*-s--<B$
%9H",RA5>bggp?S'#0o5&"tdqM?n-_Q@%UO5-"GTcFmu<-d1;C>6Ug]+9,i;VOg2jP0&;ItNa@994*@ok#[0g+=#AUUR_>H;G1LIO
%9t%B?Y@t54q>*WLZVb6I6Q-17"iQBk/1UK=G)=;X:=1pp2CVl>b%gIY'l'Qg?`>i**qGRXo3p.e1><,-=3#d3.\78%)&Rn)M*JMS
%#75YWMmH%DC?DX\nPl,)T-shgL9?<S,hf4g%PAau#[.#k,E(^,^[9H_=p",_7rr8"5'A!7S5a"L%Z@E]joLW_]rrDWs(dL-^N)#a
%n%Nh`M!eNu.njaAWqLF94&,I,<SM6!/QQ_dkrr_Ab1"%5eTR\T4ji-lm^M^(Pf_8[mu"BS&+gl+?HdCtE0?ZXbW0)]`UKmqFQ^oq
%_g8<p63sM&eOXLTf.eF0'OTLS`>r*=0ekhuA!4CA71ILR6oYA';YGBPFE_h_rpj5n\4KQa,MM;4*Mf07;1S`u.%=^e:].O7'UeF_
%B&(ZJdh-"V32Ss'`SO%:UED]+Xq0ANl`Y5B2Y?g>Urp<n%dH'%WMNWI[iZhk!&aW70uGN;2#q2WhD/1ll(j*o?^GjT:^3J]<aOn5
%K*b+P^!%ct;Y.bN2rlFl/qn"Q5\(9MA5&/^Di4-<o)tUa,c5ZpVLcu+UFL^HiVBme+s0RH$;Q9;4g\;Q2pAh.`p)msTXC*H3W]kk
%lFS-G*sNImg&5kmE'KEMHJpWA6$DLq(U2B6bR1pf!8<$ulifW\7'>>R=NP3:[pHR\*)L4Il\.[q1C9T%??g/Ma,qtBW`,"#=W:er
%;cRJVr(OHY9EKc+2BEp\;s"Ym&O2FC(p;Mc+"/`l,UinET3_%5D%trXHDI80?+GNF1K8dSd..XY<iS49n!dq6W*gsEDu'YY6<JL.
%"sB<r(>oue;TL2@jfhT!"c]+$5!W]C4M"mS-cFHR*JGi.#`.h*30_Z^F$65IHdAd[4bG`<`*3mkA6r'LAS9!>m`4C/>`33gC#B<_
%*([DM/-<NLY7lm>?_Xs.E[3Wk/.q).RC,65%7NBQ:Mif.#ot)V-FJ#DgG`f$F@KPYOB+VP'`..LM^jG=cn&Ks9a!lX_%#4=itJ.5
%^Y*9eOBt"QiDA-84s=-NO52n`D;V"rfl,p%$6,\jj1*cQ8Coc;=G]%9V`U[8d4>/6&1FBp`,.A665)3En]'7hG.ifh#43)k2C@1G
%nmOV%%$=T"3qoU`2eH>YT-_8-2eX#p?p9-7XFAkLehu&kmer/h"RJU+6;IK>qR;"Vh<H#72;c_LCs]Rkba7;ck'Yc>kZ.(0DbZV[
%ajs[;*U:3?^FH5=dJ^A+6$p9!4tf0Mo@@p<J+2QBC+(GEMKQoA<PD9Dm;*J;`)'$sL$K:N,gi\Z4IY6)gY,N/cpDl9j(J]uaWUP!
%/g>]($Dq:SA.W>5IL>q5P08@cTl`P)B4bMaab7Dt:3F'U[G5:)bE2#lHf/8-B.a;0XEJihn_<B/oB;LLrqlVi:tXZPDmb"uCn.Xf
%=.P,Kr_:6i-Ku5$]eq*E*L:YL.+/q[\XMnSWDD7X,S_,OP"Ei.PscKdb@`K/'CrGB?ng;r94c,Mf/>X48b0,?LA\JL2$?BRDsa:Z
%KMZ-VK6's/[bnR1_nDZoKWN0BNEa4SZPCEQ:.W$5U3421'h,%l^lGNMM-13A^4DBZ[NP%tRV>?C)R!YY*-t#D$O0)\/G1(iThh))
%RUXlF=`K)>TE6ip5a#6:2-*'\?j`sBFNJL`n/ZJn8*_TB2*&oc_2tar3pp/4djWoN"3UFCAP"$tBb7IDO_\9br0"QKR.A_'Q:.+'
%7?+KQke,K>+1eFT/8$P&@d(]VUYI9?Wg`UE*"[tHiYfr19U,P:i>_ReUNTO\[\XIDZ2sp<b&WEjg;V/JRcVt4Liqb]ku!oaO@m?$
%H<j7SR6JVeD41r;pal&(m793Jo_XN?HSNT`R!`c9=[rXc"TG^]B1$$`^6Oq3)>WU&.W<Qpg-"i8,1sq4Ku;#e$#^[65Kf:trTm5n
%FumLdcY6/<;`;5D,gW'V(sss&$@#fK1@ml@]%**gSms8'`2o>!S.26-NEbMo7psu4+@pe&eM;l*^(B3Oqj&LBT@BBL3dmpoq%:an
%qV.EjG5W7D/#Xo&AP$F+g56@,qIOR\GMFgWP*8noSoCFVEcB7#O$DP.J;<D_;XA00aAiW]0U&6@Bs&\?ISFAA!NJ#U2g7M];THGo
%TP)6`)[kk3<Loj92-JW^A1$+;&$F4*;5ZI,kr7[>a_J%kKUVJ0e(1a0e<PRu@^5U/,!_&*=mrdI@__Um9d-'A5q&tL+K:.^ED7dP
%fd,0rS(sg7i!;5Fo&'qK5>,nH8KXt6Cb]I+`)9?GaQ'LQOEph=*2KHqV'-ucT[^#[WFNkY'0N;#=-dLjr/bd+CP\1'+'Y3f^Vad$
%8#hC[nlT4N4Jj`=AT4Pb=Pq[$U$#P_>lr`Jh:AGrX&Goh7D,AmeCOP$X$3Z=OXYGm3,m`PHDDcd+3oLPj!!#JQp\b<bUCVIj&+5_
%Wm2n,Z,g^%`*L_M?O5>4M/+K'JiLE^oebHj@V0:OBr([0e`KMgJOBAQM26k'2P'LY`s\;%FCR)iXfm^K`1SLIlXQ/j.$Bt7hSTC]
%-qRJdZ+*!a\&fDV5jp-KCc/0o8@UgAm`.9/*a2NUhuM5?D/PYW0dGDDh;<=t_Bl:2jd*B>F?H*!,L<o(,%(26e\"ZJ>p=5VB7ZF;
%*-"]WLeYM(8>]u(pR6m8n?P,t1hJ1P&eo<oF,\a%?($`DR<&u2Z[e-D+3e?VWs,CJ09aFNJ_IEIAsFD@>#VdJZ<.B8YV_ooH,uN@
%_pX79&_CK7IG6e?=rd+pc]PT,BTWpB_[H^nM8J.^P9$/9dfN.YouDTBQ@:rTln;9UIg(2[ZJ>oQ%(NKr$mCm:lCc/A&5C>"#,7n`
%=<M(,DPd]-[98N@S*Am.-eIaWn;KPO7781D;2fQ?!j?V#K)m4>%T9q52kIFp>m@$UpD_TUW2n`a9E'k#lhXj8rGo#E@FZm/N1W^:
%@!?EGVSm'"+="IGQ=*<1;"*^4M%Te9?+PqB!BtX"6LmsI7&lKX\m7ZM;>6]C."Q`O:ddZk'.&/a1j'HX*boPl'A+2efC1U4\EBd#
%(PTk\pna9pm6Lfd$4;ihYscN1;QP!1=J4F+m1O<m-3i6rP_7!hORoF%)io]=V6'VbA9kBP?agTon'$[6+I5$0)_gC*bbL^gX@2ka
%CYMT!cGsP1[@]bW"8%]AY*GE9+gpI8Q&ujo9]bkLRC)E*p*0VmZ-Y02KPaB/IXPnMYJ7j-!SG/n2fI*r'h=g4P"7()$FH+4:(3#m
%1KtTJ%$7`VS8p$T1)HFpd)P0#O,s0))p0+VB?kXnrS'OciDS]fHCF+5V,\U@nu(Ab48eDFT3Gr;QP3_V@lZ8MY?"FC8p%7t/`Vhh
%c@MdJo>e[f!]kZc\\1DZ30N)dV-QA^87VkmC*Oim6*./^O6]nC+Hq#[^K@[/J9'tp=-*Huj/.9c6*%kl1@blDRuH<#d<SsNQ;U)3
%0W$/B%\A="J5!l:&C5@MTJ;EaZ3a*Y8VtZY]80,DWQ7K*T&IW_9]j(F<%%sh[<YZI2Ro\c)fc@bNGc%&J>k%g\P]s+/#96c\3unP
%+Gke%:4:a9n+5gcmub@ommbgdm)m/%E;25`$/D>M*7BeXIg]4Nic<DO\p"t]:ETkp1W*%ArLDT)(d?;W\nG_o)?V>`p"emq,`dMR
%5T?;)!%<alK-N.U+<<At:B,.Z^Q55)R5DDtM8.=*(g+!XcXXa,TuSJ>0gK^<161OYK?$6J"\FIn/Zp#._+faa!l"V[B:nqM^N9@>
%0O[cEqU10(+ab3;$`*b7H*qPF0#k6eI-eCL+ApVP]Vo-1mm2dq^Ysf!Tl=h&\XO0QjX'eQA$^GWR@2=,-gc]TVeG]@^[8]FhALgm
%(f8'B6W9Ih.Y0]5j!eF,a@q)!4=.(c,K96`!/p]hPbs*=fB)pmqUUT5WH`1qf^`VLcQK2=b?3U!jIu;_Yg0^(Yhk*?.pCsZ`StVq
%oYI<"p><8HIN.T!(<R_q`f366-AjesT8U]b:hW,M9c8[#_@>QeA5\JK5aKZLO^<I)?B_[m-:gB!-.Z#&F!baPC_*MG=/hu1Y7d#O
%hhB5]+Zj*HM(/U<k=?Rqoqce+ojN"MI8>seco\ZG2.+q0<4`M[(715N^CeqW;JgsNP-rn*oX@aJ'lCs(TfL7q6.kOgE\V2!FgRi>
%LQ0/eoXO%jioLAceC0CXUJs7<=mUs'3-lngfGtO2O!Bg9.7Kfj-pCE"%QHjqjQCm%*m6.'*(,KZ:cA\*YGbh?c&^L"O96omU9<b3
%/J&4H<n?#DhH*;(;,F1@KS'Q6:$V"Og-?Z%DIiTJj=R6W<l7a`$M1M8'%M0D+a1ErA&NOKTmY(""qiicA5+P40FYRlB/##[S/kXO
%\ZbM3ASAhhE.qsSL1#\`.D#o5gp.]SX\0XIcid+RK@MGEq?Z5*_A/tLq<FtrD2[1qRp>NJrt>PCimSpl!\M):f5F8'C+qdgleQ\?
%@Uq_R&f*uIbsH/KJ""l*L\lWO"_TaN0D"hA>rh,=$:1$(_5+j.b!Y)3TqLi*+F8`Uc+9RG#rJ@m.hrn1%`l4;_l8]3#^MLpSB@jM
%=K^E,+nUIZF>4d_p$X29h7atYjuO@bFW^7m$`nC5VJ4poceA<R]3[SNWR4^"K9Sq2,nGBME34sJ#!U(nA7W#!5"0A;XImM^pSO1N
%?V2F*&\fBWD'CK0CoO*bEjgR"]2TSRMReS'2M]Z[E_+ZZ>XR#LAQX8/@^.!<9n+*.EtQM#/_P';A.mg[1R8F@5U]7E]"S4@D5iGg
%Vb(9Ig1LT?(@B8)Q.7"VF%7pPEP&B'Fjj3!C'38"(cA"i1.=i8A0#s5(s,6k/n&-oK&^Rs&WtFj4fC7&?+$66[qg'.P[5]%8r'04
%mkp61iM'5.2-6V:\2_uORfO-mb7`6loh1Ihk*XAiLdEuW!i.b3%EiFMFer^;JAD=EY=YX4XAW71gsE5B;3=6&)YJ[mSq&@gD6bR6
%d@et?f%CLl6^GTTMZ#G$Ofi@9+p!]$Z<#!i([,h:<0P#B%`#%d8Ln8:.=_RfQ17BFOG;[oCEL'ud.+GYL\QL40+#hVbTLt5@M$Mk
%^j7;`,^AtsAD8Yo*T_(k=E2R7nrii`kj,#Z.29cM&^!\n$c#'cG5uN<;d!"uI"[+&;c."0!G1ZE#SNZq\4JkAb&0a)aYsIc3j^DJ
%itJ1;7.I:rH9Oe]+XFb6k]4j>/V-#"A<FCCMPT\Hf0F(UERPG3;@eeW;p`'LE?*ft;l]Oqk#fJ=>H>1sj"gfp6Is:bVFe4E5$+d,
%`JG7"Q9&eS(`JI(PJ23,Zf+jM`aHeck?a.eF6+0Q/W0?_B@MiIl78=bfZ_M,IE6?%,i@O.G`Wd)XLGa=r93k2er87CnAHR^9AN0;
%B$C&+e<L]ls7Cg>a8beXs7-^#o_C0?o\]Z65Q:8hrV0`NrVM=BbH!l-_iOimJ,[VUs3lJr^OQ1Ys88Mhe*#o/If1Agm9fi)AcKZ/
%rrj_K2uLuThH6<B((i:QP0l'P/gPrb*6A5t*EjumqI3"j-'ZZ!EV`>UYOkm,ak"$)>o2_"?^V[2jg<k4T2G=_i<<K8%>ga&X;DR.
%)DI4TE=LL4G3h%S]6YU:;m,lG1G`PN><?V8i).sZA#"#nfC,>/pAc;5gR0\%"mZ*NXlIue+1Km'4Ib#+Nn@BCD<BL;fN,p'UoG%U
%/%-0WRBUX2Cb,Jb--@7^R\:FZj:6!][PDk)*:Y''H6)CG;)"$Wesq??(Z4P+%rM!!fqGOK0fubm2eIiRY/]hT<bos?)tU2bOfbZA
%40mDGAk0;4juh/iO1X=8KNsN-6,;^4B\u)>\Z'Wt+^F#5h(J'<pNF5o^n6#4*)MB<=P+UD%VOK*Rfen=*!m#D-?IGW)1L.=);5oq
%<@(?_1-`/+s76VY9Q:IQ^5"dPZt+\&EY!_EE2#*UF/bFo+Z)\-m>BP+?URJEZQo1>e#Ef.PC>qOcO/>%Fl-+ZLGUfb%Q-d3p'A0R
%BZTYQhtV=Ece4XHdM@;t;KX!`;;AZI$[l%l`Q_s5)to<O?I4J/O+T.e\6&"#k'%LuDEXt1@Y&:"m&YdhML.MVLuR9p?;]LiJh)_*
%[H-r:\L;@.A3a%:7rdQ1or:l7>1n!u8/+#DU^F:?<]h\2AZ=VL+CskVEnGJISQqL%Jri3e*02LcO>\FJ)*<_&5t;X`6?aEXJ"f='
%bmpus*`:^n.6EE62>CUBr:!S=Wsa+cpZgst\b3KLfP@XAA:sdt+;E"(NQ1Bjq-`>[V;ce40tTk=HOj^<.3;<`*ghT<p*s!a%gulR
%kj(Y0k9n37S5<$B`O?bCC#EVk(2haU*NcXh<JU>Yh!6=eEI^*NDWpDHo&h(BQ^eV&oC5pQ=*\D(_/e,1eR_`eKW^u+7KV95,nt`&
%D]d"oidfSh`U+Z[jU1X5ij:uJ<I$r=GEb>dOM9e/X>VHKC'2UXP?NqZLh^hY$QkFXo29^i4[#rc&+_td"ao.B!W@9S'nk)_)cU<l
%S%soqmO3R6<ei>RYMmOV>QkoqhENgW8r`"q+Y2h?imJ\cgLn:I<CL8=PX"o(^>srLRubTN^6T<qlCnuBRHYKlN>nE2LC5McTVdOO
%cQWi(%m(VP:a':qInoBWWC=j::='P+oHe0Dh"pC#J8cEH0>X(oA='UUHp#tW.mJdR'gU_3gP6!2,/]Im;A:\2opDb\dhu&gn4uLW
%W12)46bnoJS=qT%HYA9`3*<DT-YiEQ=qM6L5b2?6X"GKT27,5mpBs?JaWsrTR<c]>U9/JQ7!_+%#EWAKK7XZFrd_Rl<93dC#N8!l
%dU_57YFbnH'Rs@@+[jK&Wm/Ro*Ne5Jcd>q2\fIj5Lps8(Z:^&"H4!KD%r:iNL.W1DKml"eUjalXDubmb(eWSOE+.S_IBT;lWZWNu
%[F\n0c"&I3-2W81I08Qq^`pkmk5%I>-[%Nj!hn=f.S#@9)Z!?R:rV:?%]D4hKB+%<K[?sgo'oi"pR"/>!7Md*N:/GlE4^?8qP)at
%b$F$(+%42H8Z^97OS:<!af:FqL*YPMOSJ054=!NEdYUQXd$oHh@Q"_NG:=C%AUr?UgUEX=gSc/Yjr(9!N(XH]O5[c_0DnBu?SZ\r
%/G,V^J(EDj&BTlmI"j@_6-b1Vo@j(dE&'S7Ga0Eg2/hG/^MQd`VV`0\JU![;hlY?tj)dj$2$Z8^VoSMC+6Yt:Z/:;CL4=NNpMpN;
%k.-Y;oJCVEK!Uag`Y3!F:<ss#/5g9HILPaU;TC>u+%)?]<4kpTCcBbe3h1UX@>709=.>seF!`,peeI%$<1ocLCAlM@5Q-^lPcZg-
%74MA+l;_U*p&[W!\'tttT@B,B02b0uYN(*1_b1G1@-^@5F*a?HQYj#'UC5UZ&J_2O;OTo'W5)K%fFmo<g<F(^YpHJj+b\gmQ80+E
%N;V_0"!6,D>;_2\Q0DhB3U@HI-<i6\4bp^pCZbC.Cs<s%8TL7[]=pooa#AqbH>@)7^gTK$2jN9L=?U5J3/eI(aK5RDhrCF.9sVLV
%)uRIoU,bj5eG_ag4%[;V$Ji]1J(/k)HI@2=WhAHo'9s4:Q<D,J(7L@)$G%l#6H5QIPUVA3X8!#7j?=">r]8T]#B>6]c+&"dpc:=?
%TBK.NDoCWC=rmY@=EAO\s+<E\21@%Kn?3LBPTOA-Bi%`dZ,s(3ZeM5R<&`A.PV.-#B(!O[*iWEsX_X>"*mo2sFt"Qi?Y8<"MEI[-
%JCeji3J',dUquH#9?PN#b71V(.Pj(bG>];O:QD^[Oa?89h4c_CdqfLl;9`er_H;]P<"'<m<#Qqq0sR@u>q:s[ItL/HVY):5n]56q
%7JH52`u<X)4%M3UI_EaBc-jnc<&Ma:4J3t)C(2Fd>?(*gQJEd4O;tbLr_O];kT2+]/&[)=4Jn1Wmj<qkrq6'9G@Oip"b5"laRJL5
%D+-fQ#aIb-,q+Y,>oR':ac=c:Yb1EDl>uW+L?m_GRER]L*9Dmq@M';+[5<5dU&NI:$.#P6G>FkaQX6hK*8Aj&fg:bf8,FYrUUM"6
%W2koaKoDACFe12WW,Kk._D?MF&;sJKUYsOrcoDBC1%F]3Fe\l_q[(U4n\SWNAG<:B2;L'&8^Um-CCFG8Op63h-9DncBk]1@]KY9l
%^"l3YriFF?M;!99#]j!K;%>n#C4n4+jj0khiUutN>Q"MOm*?-l4AW6ZL)2"YJU-&%%<'BgBP4?HID^u1]IXO>]AZI1X43]rn1r7d
%>\WZm21uL:C,a/F?3=!7OM0[-GSsK1`=gT,hM4_lLqHj/4l@sM,FOG6[0AQ7A%l6_?YEjHOa[$H_,t,,A@m7[g'p%pq:e6`=t?a9
%#ec]QlQ<V)i&$QC]<C,LCG!dS_4J6=rXP!*@I`(('q'$A\3\b9RaCA`^N!1]R]sudL##b4l^d$igin"e2-IK#Y(@+>E'\^?GBaP'
%M!]G0@u<d+a[h:N72>c\&RpuVV#Rg&,p^C%+N2!Eda>5#HSfiHcuW\U=q$''P!M\.]c?*.71RjHO[IoXRj<8QgEiSb($YL8=*UN/
%;/gU6onB>Y/rrZANS8Yo,OQQ<cug96)+N%kpRUFC]\uOp8nQ\+(ms+V:$KR6H9VW6*Z8SPg6kt0h8r>u(he\G?$E&=*Ke-ZG;RO*
%/e.7F!884O8uCN6?6:#\(i],HRJGEr\!d6W`,o(GO,G6_qqd@[BPq]VIA/i>$PD9ea>Ia&0"7Uf,UH$*`[C.)W6E`]NfX:`Fue^k
%EZ7t-dk'\'gT5Xl'QGmb[\":nhdt.bZ@:5l.cB52D/Z3(]MqI9r8%4f:bY>sciF`T.d)A!P(tdhd-T._F24qRr=ZIRiAdM)R<MW0
%bVDYt[0"j0XQeA$K4ZmX?j8c02iqB'd?YiVH6Q<)(MZl0Qs2VkA2URgBe)>NgQ7ofH-=<;?fomA8ZF^@IZQ0fCW>f>C*>m#arj\k
%E"=;U'Zo!7XqV!ic'["9RUgPp_hAcPHq@FV3;p<>#nV/[S.cNa8B1NZ?P9)e6;#;rINPn':[`R"d3^u?Gca:pJ]HD!<LCV[7lguZ
%9?:<=CMBa-EJS)@6gX2g-`NDGq:J9=m3MXY-b6KJF=1e;C+%\XK+N@&mOKnO6u5-h0bqef,Z>Wo1ecb\aG2++]3!8)>!Re..hqa`
%&OKC,-KN-<9i\Ye92$qF<(T*'n]b>%9SnE0:*ro>P[2[K[&-,Bn.S=`4?%re0Y+RGE8]`7WC@iUTQ7s=\-\HT8B<W1[=L,C6QS;g
%3K4tqJmseD)766'BEYTR'cJrKBjXe5&$c:=Hd(S@ik(e-';]bh&Y]i<$f'<&KPp"*&PraK<<RqU4J%[@rjL:4c8BgWilN\-DKYV1
%?[d\<AK_D$la-&3G$GCOPVJ2K!^GPW=Z7m#A<A/IpQe*Jeoc/,]paKZWCo`D`uKH\eB;9k*.5-=/"K!;A+];Lqm[Ji_NlHo4Bf2%
%9LU$cRJ/jtA8u*(CU"W]>8nSLog+=_%&F"1Lg5A[CC?-Cre-[fQD_%/&iaQS4r/pS+HDEl1\S$8,#Uh2%pqb9mOkW50#"WT8ipPo
%fdMe.#b=*MbeH;HBI4Aj"0XlKjs:Lnp@1[%\U$_XqC8[G,r^'2E+SAN_]8>W8pq#g/?P_Y,^?<h2.<._ct0:Y4+m?-bK&L_#&B^g
%W#?-XF=l<AR<&Y\9YBR<\GJq!rt+C:VU7P,,bSfj"OMo$5RCa2k.61SH4**?Hu&/*SR$a2AqC4'FdHT8'b;qD`1XkM</M#ZN((3r
%"pqS!g0tJ"lILZAn]e-p,0^J4%Fc5PN;0I'GoG,hC8!gK8TZ]7!$)8/H.#2]\t#Ln`ZT%$dXDF\Qq'26@Aap[6Qf5GgdmSPZ@L:/
%>NWW0eqLkc2WAtD7uuhLUbWCC!3FiZW+VM_3ZI/hbpCNW7QEj-r,J=%A,L><Tu/;ACue*U7WbsK&?f:3CucKgUau1U`&hGgVf/mR
%kNc9\`nP<WB^Y>\NE@fFP$>ph)qb[!>R<G1!@<(O-R0.Gg>G+3n\CTIq(7dBNQYcMg1986=&M1/,LG(rgoQ\OMrS?pqjNIK0BLL5
%9h+P7@XHa<Uk`D)2]!PSqhNEb(gY`!dLLo4nrV09e@d+s"/=03+dQMj+p&/ac3PghqK/N5R(CKdQt!=,Ei#-:=E<\6^C7&/UG+Aj
%47E,o=80RC.aFh2YR0#>TZXXlr%2fZ!F7LT$^C=_J67jEok(ZeZR'ucJZI'r]a5:5LXuJ(Kb7[mQij.kc"K7"jdr/[(fk)5UF,G)
%?je9KPCiFClOu=tW'<jS`G5RUd^2(2/@t"%(aMo-W@3kF;_[]_NN#B1@f2H0gkF83[%FN$l8tF6>M9#*D8_g`OhPUIpj5+&\.oVR
%34\*kZ]K?mGZAPq14sR>e]gFd\9a3O(@'<ND<L%.+hhSYXmT?57(kb&Eu&BY%"!!#&9];9):p,:;ME&r-R"oP1?pb(Bhle;RSCYS
%`r>u1&900o5/fYk`V,@8c,.Dc1S<6iKn+oTB]%8M*N7Ps9LB`m@_KrA9^IFuk;`nNk$#orL?42HprI%sdh"G0884UC&?goLdZ\Ct
%fmcT8G+Ha>+.E&HXbMq7TlME;isq2Ol2W,-T-e&%MW8(M3E#'1bWh$7@BSnm`K8R27<7dk_%m[B9,0[B5b*KaJQTqRd9`\E?:@!D
%.La@O3f!m.)%#PYVIWTem>cS@=$q3A8Mij=f"SUfpa(lV05B]p(meS2<oJU90@+$&iW0\UOWoJ\s"$[0Y/a@lr!(DAb&`NI4js]&
%BX=2<N](XNU+\k!)V[FI3,r)4UAAh0nGU!G5nL"OP@r((%anOJHq:2nbXNNHc1jNeeZ9#]+])+i623@\mKn$*.>eCT.Y5d^G,Kf*
%L9;h3oG%_:.(Gjk8@Z?dlBCN_g'<Sh)\2_/'5sL41Y%(bI82r^f+b+iEEJ<*<Smtk29I9J]o":*jI*:)J6L;Rp!L:&)5OFe>XLOZ
%7U+I=3/pF'3>?gWbNj])'ZaIm-kY=QC1Ab^"=@"/`t84_q/Bj:`=OQTNFgj2oh\++8W>6:=j[;KC=c#Bl::2hBKq^kWaWT)TfP_X
%2L2-CS^8XGD5bZ,%d'l?A>aZ1Fcgl+fXib30hS.h<&LU4>!u\`?/)Z>%?;.&<OFjNdprZAhBE,s^7bB^.!#$)5j'[t'MCFhIRUE@
%W*p5KRcgQ#6(\eBSQ\8#X]BCN.-&?8F$G`Oh;A$:hF.Qq7<s5iT;e3ZL9cq"D<D006:nMc3RMt>*)4CN)TC,_KZaSYq&At"+%nA9
%P3>P]%SEeBca.n^T-.2QLK^ORM,UEmfm=P5Z.#+--6^?.3LRYfRc(C]9oQ%E9k&_G]rVL6X3/pl`JQs=H=m2Y"6)sr;)*0M7Y5t*
%XG<PIbO,s/qUK9H<^G=AHe`sXs3U"',m;B9d/8IgP-,!P%fL&b'(kZK9N_=_N9+O9dab!j2(PU;/S?WE_C:HIj+$=u7)(>(Le;]k
%[;A@WG\h2nkS<L'U!R#/58X4UG>9`uW+\.^T$H1([j7J4\Z5W>ZQ5]-("OM$4OoOHd#P\lP8JrijJ`28P_((n+d:tK;B_T9.F3)M
%bV4+44cZ"EQF*=Ug726Yp,R9n.fGqU5Oi>u%GQ;Em5"COZY.$a%LA:K>::s&BDdmsEf^Zk`-%a`s6-3Ob=OFJ?j,MNDINpj-"B]J
%^L!1:AP-VPenSK8:%KWb75^PtO0lX+llb]4\B^IF0OsebHX%@E\2N^NUeaRoYiM[F[Z;cm5c@.+]FG$%F@UC:G3!G^N7\XPO,/sV
%FJ_[d]^)@*Qmj$k5)K,u$rqbSpc_btL1K0JAW!iRBq,QgLam9V(?@gdbO9d6<BH#g)-(B%FJV!pU=\#jg9NI>4]H$5:9TqA&a>r,
%nd%&6A.![fO#"R.L?5DL3aa4FD?U3oF>:8,JO^)Nc(f6O85'Vlk1We?HgG%QM`GUbL\M6eR`!VcNPa+k>-[ah"T4%tr:2/Vc.N&g
%3VLghj)A>uA7S"?aBMT."_RL:r/PsBq>]nA)r_,27<t"5Fbn>L!tuq"lAnQn2os@ET+H:,\^VI8I1qEPX2u*&Gmm>(DC#<]bO?!N
%h4o@^J_*O"=1B[<'%nM],-SRQ%NLX%W)<YTO+O=d2.[rj:at:c)4ah$LN4+E8Xd4kV;:XB,0B<Po;O(W5Ho-u+bD*`&3G`oCEhB7
%6"sSd>SIBK09;8>#IObQ_'/;KM.Pb`la]hQ6rPkkKJ"NLoEqme\\EV82,j#;<8G<n/]Urt=D;-DEO2nq7M,bMc6u8ieiI@9N<?H<
%?[]Y[PTbp?_*Dbmk`O1qjTlnb[T^>8Wr&.%io^PuTkU0T0J??oIh`I<"boT#7.<jIU^e^$VCI<Fh$%oBqN^:J/3p5re1p$aE(cY-
%Fd6DI?IBF>C+"U%)th`:c7tM1[ghc/"PL??R,;:b!=j8SG"H=dJg1RmWY7C^/W'4n-%!8$E+>ar!Kb)8bu0fn6U'0DUZCd"i=hgZ
%U]dfopWi_"7\EV#Xij[8?$)nRE'c?&\#PTJ*F@@@S,tH6^Th0,mF#E>mc;t.p&r;J?N`ga'cdMX7+6*W,2a"6#[%tKY-P+dI7TA4
%PX6Rbf(F384h\\T4K:d<6R9ldP?0Ko"BYIe0KgD-X,ATKg`TQrXoX60YR!m2<Zls2;h_N:86$W'c3:q"?lG26eU]hoYVW"!mEAD.
%^36VJZ+0-3]OD1FY%!A&006-WIKs_";,G6LU\7.A8S;XfOPPiQ'_O];c&qK4`1r`\R07ZOFIR1_jn%E%-tImajH1nS`/gffp6WHJ
%mk/&>lq#I6"0kc?R7LWSN1V4+jUMNYT/dT'i'07J_WnP30b>d^0)H2Cau]u)PEZ4g,'%SB-`bW_0ROTS,*g):%BT?nNV\$0p^e,V
%gGg#@Xss=0FVJ4Ef:`[q:>Yf*`MC7;ndo"OCaHc$*GrW=_JHos?C[`aPt,fUp$5glcD;TAlAaen\:2bf[bUs"#XELqdrGjLUd;MB
%Nahf('Y1f\2d@O;?OV,oU&.?*KQ!(s)L-\taQht1<H,8-rf)e_ZDps1?-Fd:O*YT:N&k8WK%i)q4Q_"!6Uit^#J-&35On+,&QI!U
%e#s7L=U-oPko;C7V`lCN&oiH_OrSEu?m%6rX_4U_17>Qi+M9e=RA^%l&XB`=8nJB+(j,Z.P)ZRMcVN54)MA$?IP0r=3=`AKL*TL%
%"^rKmJ2UV\V]^^#Ol%hL(NdbkMM1_1gV*Gkh+-83P9l)tV.dqX"T>"&BL=#$OX'(h`AZ(semKrZ`/m`GiiYmglqt8hlhpjW!6hpm
%i\Vn?WYKkD<nFIjW63=`-&3A<g(O0TQFr_i9<BQ!`/Yf1p@AM^034/gd^DX?N_8=)>+fo&#=8qH6o4P>pAp/GJP/)mg@;<J""pjZ
%K0Jg00OW4I9]p'o&*+OdZq]_hpdUI>0(e@(B&3:nP]'R+#/=>g#9,HHLs`]Y3p3gFC1D%H=MZoJ`&<Be<[=A7ko=$pS-@(eg[pCg
%hL#.TK-G!9V<YhI,dndkT";jN5g0nClkX`1-T)E2#\KiRkb4bT/P?41g)4A?:K<_'ot,iAeJ!d>LDG201>e3BY/0o@<_dH>X,IPJ
%D\8C-]mjBCjf%>_Y$M^7..XM!#_\/Dr,'g=HCu"kCd<=/!N-6d$m%a.]H#^%Zp90\:mYG50Ie1oi+o5%IuC[<XZ5r!*S>XOl[DTc
%;#Tgm/9hH3-S8I3)G3(f#-Ls/=W8.fG+`[-MJtIJgfsYb3(aEYX[!QGl%%P^/#^.O@YVT2D=TsI$V0Ht*2c+<=`o-u'[f"+L5bsY
%B_&qB@O02#:de+FLC.Y`1'5!].(YmZ]F*J$U)b'VklfH4k(^T\G]Ra$f<2MP#$U-uJniKB>F=>NAk!1e+VVU6gkNu[OAE=2p![#c
%`T;7GW9A8ki.kJ9*$dmNbr,c'':nTYh7!oW1)9[?F+#Ve/R)\W[;tc0XZqe'jjI-.%Xb5tO6_SY:s`T5fP!.W%^a#qSK]R6CahWU
%p#.E9OFAu1aOF;qZ2_4R4DmH0n*JUp!tcrsO!EU'V(:k^hW3?SK_.(hZ0%h>DVG^sTnhbo=T$7cPoFcW']p%SdO>W+e8XVE:ceZ0
%-[)'?OPP^6+usrlOp9U!eE^WVl\ksHV&fe3P#:8#b;se)mJ2Pps-+F.5;YS7&nA-un?icaC+A5!n-]"ibT=r\[d11K9`XQ/H.J`u
%Q"4t,C@$NnJu?9&:D]CdRNBqh]h`F66KX?`XIe?7*p#HUPgfseAKDCHXsrX!-VC.tO<es$9L,\o4id-B:]IEZ624M"TO.p2;]p,(
%J?m&Al45/O@=qbSOS5Ge@(RPuKY$T]'qr2$>Y6SYl]#0hU9DTu4rJ2sCIlkk\7f=?I3#8qM(UVV#/=db:4Y$d"s+dOmYfG(RU'd1
%J[CYl6F(SV`"@U\a[eof\B)T=$.JD_.mRN"FlgUgBltDAe.M'6GdjJ-lKl'Qgd!D%Vd>is=:l7K[HN4jO['U<:GpX3?BUoGc+[!<
%Sh0,!G/6<SQm&g9GSls?OZ,PB0)CtO0YK/d"1^,QkenJ*OiP+SI&:Bkp&9=+\G#CE([V$dTXfJ5KKE[([Q?<%"f:oJ]_a#R'"Y[-
%5MuQqP*c(dk<AP]1ZQOsgcsu\[?NVSAM`dVSW;SlTP/+;"91Uke@bkD@41&j].prG`9E@ZH$P\a7(sXRV*I<N9[>n)dUV@/n&'DM
%jYe:ClIC7rnhkb*7\h<DUKoD\Q>:%LO?X=YZ9kX-<l+:#@#jc%RRd-NrMcK4T]@3oBgkd5rj<)]8qjBrX5Ia1HJ6'3\j-d2'ZP:m
%-%Ud\p!WmtKC:M/;S56cf'c;_@J<B0);V6@(t,S:IU?>=lBbA'g+nQX0"E(),L]B3jrj@Aic.IN$KAF`MI/i@)lM@0SLpTU4h@<n
%62*IjG9[To0tr4/[-'J2Qr^*\FVIiJiE./C1e\DTPjW63*bT4H'"3b5&'f#07I$Du[L6;E(C)u_bTb!maUJc/A!\3l>V`RLF]Hk#
%.>3:F(u+F(>Oq-T?a*<\bR%cp#'7@3l&+>:n@h:p8tN."C^IkYir<sjon5kPo#j.FS&)=h8&6b6bYNP!EZi"O8bQ(MH#&#`(50o8
%CD/7+9\>MkK=&d"Oq\l3\te=^hb[XM>SE<8T!I&8AN%8XfB4+4HQ];tY#M3)J]rjt&/33i9G]M9QP:]b%+#dD\jD6JC/`p47fb2s
%01kPuOV>"Xokp4-pgQug_)7AKPhaWManbHd&,ho3pQ8]BaRR-@]HYak<okCeL*Da_(_5Z_?m)0"V]6!1;q.)l:gBs7#XC'9FUXsL
%!7A!3U4YY+1A(M?Jk[4SDYng"hWHOPB[u:%&-fcY))-B#X=t\aa:qgs]5A$+V-0K-%\G82oF:>hSOh0n$6k[C4Wh-VIBWWN;5fP-
%DQb,3cG9Hu:coon4':G[KV'p@bq>]@$jOH*$E8)&0_^ARfPm;DqD`_q4=%,\T.5*8E:r3HC+[2;Kh.S.q#XBFU7@0-U4fp"3hAVX
%@dmo0"XC^4#upOJ:`Yo=\BXKj=G<&>VpD+\m+K0u+B0`r`,PCAODfh6(ZsCL'UaLBnnQQFoF4@=]kX^F_PlET>+)VuY:k]);3WNa
%W&tPmfI3.^d&D!.@J.9:Qmju$+S-aS[.>]uZ![olbM]kT^,plN,icp_eX(k%=2V,L%Vb22JG6P;oU.;26\7Ycqbt9^.]IR22Zp;d
%Ce;?KO^tnJ>TY[B:_@#grmjp'RoKM<^I=jf-b<h07FWlS=1T/X/qDr70:&O#g)T`6XVPVM<tLD^1&]]6f>isoK=$Ir&fg3&GTHa0
%/)R+KHG,<`m7Z`cOk>FO.S_/T!j0ZR#;jo)MdnU7EsdSI$_Bbg<uGPG#O;\g]R4_G3lXs:P`"-qiun-7X.EEPH7e-dTu5nMf^+o[
%oR/hMQg(2>3E,Zu'MCb3(+?BrTYb<3*?j^-9oj<"/HnX36,]s"A!)>+c5I3jf0b%'BU*BsI,$9]P)h(ml.#h"6t"gJ!aj@VJ]X>8
%D_\Y:,mdtlS^=e1Xj/^:*o-'KAKGs?(C5/pX7H,B"OT]WFr%\j&h;c=8L9mgIq_l;h*PKF^`_[iL&V.O19-I46oMT^/qe?G<1R$i
%?r`p.*_27C#mI0`HaHA_$m/!&#+$;hT'>EP0fhkg:Li256FA+^Nct>J2u-VXB_ONc5h]l+qkf1%S2oV&;i$$OS3afE_jmXJeUFPL
%rFLlH3/%Cs8Z[gq2U_tdC@Btld,BqHn^FW3k^8&^SJqVFbAkn]X$;#*6(uj)9NFCbs!6#c%h"6'/$Bkq't^>M-^pmF(^<j6#1RSr
%E)ebdX3(Q-^0hQ$Q%.SDnDIR=[t[AoGeqGjm)*,9NUsgjfkOC);/WieJi#954>cfSQOfC6FKO:X!@G.lf$6:-Za+-)KQjBE@mfT]
%mm)r)ZRaYT([SH?\t.;9DWc,?gM(t@9AD>gG#!hHcIm2i@ZYD^=3VDB2]k+/RRkcC/i\*d48dA1#FO4iDWc,?X!9`Lm;:0nkh\>W
%7d'1D_\(4`997-FM,mGW`R+Z4O0b5dTRp_=17DKSRrCpjQJ=I5":_?_Y0Jm6+X/)n0F)hL,8426XL[&Nbek'9V8Ktt*JeQ8^GZs!
%<O0Y"CIV0>Xt(pO]M+dXs'?tV7=B44Ck!KZnY@5ERSOPnN`l^>IR./n)J$-&qDqK$H7duN>ii3q@Yd&m.lL8;KcB0/p_ML?\K;!5
%-lGS$O&=EsB<u7C[TnR#kiB9TS7^'ZJQMr@;TS$[<tl]FpNh2:75D"flRc9pCiS!WHNF@2WI$$#hs06ArqQ`LohQ0knCNM/Tcp@U
%mFk%q*PE5;AfOr%k<oadEBEnkOi*#MSnb]R+b=5Z2kJ9>O::Z6hX%!boI72a+T$3#3GdT#79oORo:?_""D+BBT5a2_F%\_R3Js1;
%]FUWn^)CI&PS#BNTV9Nr%7tr\#".#tZ_&ngLd$mCXJKimR56j^GbWKhNW>_EBJPd)/L[7^diNE8O+hj#CD?>`&)5VnMK#Z"hrKT>
%EIaS!\_U$j9Z''^X7gl^r?>k`.49l2/S;@U&02.6WitY5#uE87YPf(p&4Q6&5N)WchI*!R&njM)NqJ.V/>=/17sR_ZXa!";m9K7(
%8*'ZDC^L%K@#`111AVm8S/4O.a)O@A)m6QRHu4Sd72?1-$trc8#q^tK$M@]QWs'c.U!A%\T/lQ-)UbtL\oFFuIuXc\HFnf%k2-"l
%JBF`JrY[2'QR_9f7&*-7hPp<"]p"]FjU.;^0.)V<]t;UO4C`"qXdqZK';\JFOS#H]e<-%FeSL0bFf>HPdsUWH;TGtV=nfW!W<:RO
%ANk6%dJ+=9;Fe$q2R5&20nOpB[!Nk.KB]uDiFV1jR;HCS"bW78k#1rpG,]gf?0]M'7./CpPiK.rh`U1;#3=3.O8=^%8)9s*;.kNF
%pQOVhFVkY<*9odVDs8Zp/XanRN^d^?fQO+oCt!dmk"Nfko<^0/c?-cc0*6!F+]4[^)uNYTl5f?tf*jEI\qd^MrF#c=4kOn<F/F;+
%]?O3^R;Kl#)V+1]-tbt-B%(/&D.G`W4fZeL4H3+Rm3BYe(L>dCl("HePLa2h`7hBdLW2LD^j2(SQ/&e"f7Ee[B]:SO_[PF!GA$/;
%]sGp=r4H&EhF-Klf;^3NY]\$1ACiP>E!YcN?WeR_,&PTbb0lutM?EGsoP[U9OQ%>PcM?R#F&Wd4?!4I2a`pFjZ:*5Q>gZ]EW\^_P
%d*:g3Z\sqc[,;u3S($hYF'E!kml7GXA+j[%;+@f0<pI`=1dskd`n^gW#1-]Q#;XIY'2)UFUa?=V8_RXGTGB(ni,QrV*8Chp>tl<d
%*efoM-JqJFC^0b-ptE\0,P3Ebf)"cc?+jJn`.?2#6[:(,UH0R^d-QoRFmFXNNB)"G(kk3*Mp/S`cP88$(OIFD:*C\_i?9b`\1e3;
%6WYB%Uq^36Ogt1rE3R(PhH94[V/'>_/p8hIMaC_We$cqaK6*V,8"*`*D,MS+O,,U@P7iGdYX0m+8d$sdF,F3ij@Yir2G#,>13lm%
%q']oJdas!M;V&FS,r2<egu(4s,1%l6K[CG&P.mZ!3>/F<$=L+^@sXD[)_u#?<CRF3M&oj-6jF&N0sVHj.K8)ACO;\_D];^=!T+]H
%2,\8l.J&'00C_HP9-b4XdY5e9Hl,W!9>p]V\`%7Z)`1S>\oI.bFH?sZSe9Oj]<W&0qY;[t#BpQB`dBu5P*$B<WYd,R]md_@SrjFo
%?-bd_60%_9750<#7^.'\)i_58Dum&'OElLOaG!#b`ZYCZhn_WU<sI56?OXN5Y]oUcB"`=X't,rJ\A;rd"j%^iNM07,#E%hg`#BRd
%]9#fh22$&cCXP!=?qWaYOo>r-S5jS)3=tU.rD%<R_HqBfKjt<@'ffD34UQQA:0T=?*dAQZdCb2j-M?#A0Kom*Iu9dL";T-iZKtKQ
%crQt\]SCN`lc9MZ1a9.K-#Ee),fcr&p%u#%/OVX_JI/J]e!#1=rP2u2][*6lM.BYUc3H:b#Y*I[qMR9,+t1:>BMCoJO%R+=+YDiV
%7ofDW*HJiqC9(UEXS4c#'\>h8<f"X753**)Cr;\W=lfaY+^^t(%b='f()UkmqAkI=A?l!YWR*]-I`RoK@H]8C:kEg\"20DZ]J4)A
%,d]UBl1p0nJ67m`:?T#EjARP^g/75%C<E@38b>>0"Mn6c>.m3SKg>;!1qMSbbUnIgp8jn"qI%&JORrhh6%C,ol>^r6/"$*K+jt-M
%P-Kpr7:3D`W,poF$Ot;*>:g,pSuVLNGK[Wo]nsTF_$j-h&5$X:Z_1VOPUTdtpB].(TKtsKh?h2Yjlhe%dJ+QaOBAcj+ZsQT55okV
%80^o9=&_#mJTFD@0U6t]%a-BRo`>BJ.IQ+F!gY.$:uQ!,g+\[`.L]N#"dr"S).F%Z;f4"oIM[XTs0*T^Fn+%rkAnq(#(E9%&Z=9b
%"'f\Z?%[Eo0r>E+2c-D(6o_)lr?/m^$eQ(R=NIDYo&JTX'uN1/c139SL6tfI%]ulTL)d_(#*$N5`)Y>1X(YN=qQ<+bn&eMTKJ.cK
%@d<K&'a=,=eltR%\>p?$d/"X7;[4Qj7\\^(3LXrE_/5]m@`<@O_&Wr1%E4C[6pVNLRKe+&[A&]T>mtV)BN#Rk,#`Vp>99I\,=@f;
%GIM3=W&$:QO2CW&k3\/aI3_^,cTV7!hl#ZuKukq1]"+3sm/Uk9j%=boZU3SrlaRP*\p<B[G:T%%D>LsG`M`BB)]s\`1!]JH*+gmY
%8C=.8UJ<aA&+/F,\fX)9j)mL*@2W$.nTu&la@u-7Mo"]lau5Y-d$O*S".OPi?mniHQg5Q[BXg_Gp*H*4Xdc#t^t0#P=.9;MaF7O<
%B<cjfEG/mN6jMWZ$1U/"";d_$rS<.E'jQC>m>HqW,0>q"6?LenfKBs.kQIm]!F'43p$r1(>4ud@iMf!;.HmX#(12_^l>j)A:GM$<
%F$2:ElA#HRj]/kJF<2%7%E(.ERfbDA,qD=9N'mG^X>s+:B(TcF#u*Dj:lh%sKVnTs`n++9Z&DX?8KPj/L\F8$37SSK;0+fX%gT6@
%%5-Pla*60BOW@Ol!c%on6hXuI]D-:;R'"K;1l#G%Om]%+kgj:O7'5gh-9H0H%H>Pk`UC%Er8Ji`D6\+h$o0p=RS8XG-FY=s`m\ki
%E0Z4.c7'-NEf#8,G5\I?p3de'Yo9(LB<PVY-?,im0FVOfi$*cA<'UZIk&H#+-NMp07(F`,707j!M:ri$k:5>fEZ`.(,/Tr')DhPp
%7<.]7\D=@9p%0VI;.@14QE8aNIA[Q+&[ob3&.4,,8[%-VUho/6[us)q+"-j70>D`sa6AKh8mhp'+Qgk"&O$gNCDAX4^B($X?hFtK
%^OF$LOr2i4l0SBZ>^*W41`o2oGf*'hedTl'I.;Eb;,_Nnnb(E"du(nV>.Q9<>+2R##Is%rX%J%-A%7bhL,k?!LCn!:]_E;K'?"3-
%U)&\M5t'%,2+:k'OYe6Z.VL"KFUe<+*1J*\?OkjK6^1dQ#27\[aGrWSk7,YG9h3,7E$W'gVXbMJ7k&fM>:h=$j2i00_oF#;]@cQ-
%+::=$K5e0gZX*][FtNL=9\Qbm[:!Wg<ES$[BKjY>m5&W3B^0^Y:Bdd"Fm6KMT#B=lCg-5GPZ1<3KVh^L?@t2C?p(9oRAY4Zi2S<H
%?8'PUU^j5-)54K:J_NejHZ2.U<K"t]g`sh9FWbcEAs$S&<I+cCYc^ln9\\prhihd%WN@QJgT8]q7AW//WRKOO8u+nr)ZW2N\r/;L
%N^X<fROE5`0V!VMHpFYT%bYcQlq481JM.&)1/u>e`L1e\Of[31%`Y*ZaBBU[<78sE7@cT'OJM%[W$DqGAu6318UPCMPZ)d^%%3V,
%4_kguKbJcbY*$kpFi^H(*[(2rGSXmmKM_c;,frTK`g:9-7O'7BGmW/nDIFCbW[A$\S4j.p<u,qNh;TN>HlJ=#pM3.6'<6Ucqf(-H
%EG<g20o_>/^5OB8^)f7l(=%Z&VlSb-!@k"T1,kg*]Tc\:FS&\TY-dIe`LgdaO'-ti]\!B:.2KtZ@XPWd\W$J:"_7rWQVTnKB3g;M
%S+^7Ai](/$=A<hUf*s!B)t&P;F=n#-5=/mXpCThX.I2b"lFtoY=I69ZRKD"]jT]AF@-*/a)2rKbhSPV:"BO:L5rG=m,^HgF19IF+
%0e$c-:g<P1/H=R9D`U9*/m\P^6Pn2*bP+Ki_Q/#Hp"O10J5RDGY2]q?q`7"(WT'jilq[6aY!%YcNfd:\DB?g%2i]A%;mp=Kn\@^N
%*X#ISU8-+7K<1FO)dFE.Dn61e\_Wg1'E"t&LIIb9RD)_YMQHFkfYg_oJs]`!GW:XF:R))SQfpW-L`H3Ro\\Tm!-&FGnHP/?M?_(Q
%Op]0m2NgEk7GP3%B-tTP"^r8l'k'4:Gpj[J)BZl\l,H2HCo$X?eR)#7bi76X$^mfAp_Ac0Ms-S-DMG*tit1]VLE+b"AsY`XmiL.5
%<!R<P.>C%B3N,c1Ba7oYKAVVo9EqLae5NMkUtK;@GChHLajX%ZmkW+#0_T3^CMSP>`0<F\oY"*4M]&Mh5pqJVk71bJ/aoe+2paJ.
%2l=#Dr(j_HUDqFj@:dY@LBpGRdhf'H4P"!TNH<t+)8Fg_EsM,jm9lA1Cg5mY&aP<tJ4Wh0D4[L\0j=N`T$ne1^"qMVFh"'J9[`,t
%mEW-8qDJOr-Zn=m\G-FONUrm^8eVFF=<lL2@6]o1DP;Nd(dJu-I]\3p6S!UC_pLP#L=2?EElS,n`HsQi$d1q#&dCgf`5\#3@AuNh
%U8M3[JVl&NG88k4f?6330^HY3Wq4*_::!%+m7D60ke@)qi$,_`^H<:nfVlJ492a9c%FmB!5.5J+5@uATOj7KBXt(9U42=!"#]hAu
%2kuDM#4^j!:r]82j;gT^G&OsR'FaOfMksNQNRAR!o%*$N^I^[UKPKOm2YAAjBL%Zh^6aMHjrsALB2g+-rR4MO!7>4B4l;&^Oi//s
%maF61jG-UKWfYGO87*VgZ'*qeR<oPiVR<m^'ZAiRIR.KV77;i^Qt1'Q`Yt<1Qt,fYk$%TcKXSDukIBD6UJ\[-0<+,7'4kps;Vk7E
%"RH4VS5^l)i_6h=m0>b*?r;Vu7hM&V7"&o-Gp7Sb;iM3RDsUAsjt0)HXnU'V7!36EC5BeFFAV"drg)mEa5`QE-Uj:#(hV.4"if-p
%%P]-"'m2Z4?W`G&"AfOs=(imn88V;meMSXZ)PK3I3m&>i"A",djT7r(4YsJXaEQku'A89N8[08$5=Q_Ro-;Db_nAID>FdW9@G&Rg
%KTUl-jJPes%&mMt?^L'gXCBjR9Q@DNRA=k.@H?^H:MHgsCFo+#U=U3MAF8t:#q6Lrg[1F`Jj1<u$]#l#PT\tUm#G?ZiYEr1b;ND#
%ojqG["I!.22iCtuO=C.6-s5RVoaL4]3l$N"+6:"$hWOXo+Dl/%odI9r:_p/HLD8,nq08?UD?KF"dq-Gp\p#g`7k^8UEJAa/_5t*B
%1npKPW>KIR7!T;c+j/Qh8N&^6,p5`">5T?mD;A)Z/4c[TcLuBq6+At%o&'Ioq]:\fKLa$+PRC_X#2(4@3l%>D&k=sG<CKrF\MaQ!
%S6Y7`p'IgPZR.3DYFEtl73>URd'1A0)Z6mDQjgs,V5N35\SdP]W9sNROE<;Sc%<>h>*j3p272hR2R5)S6p!\aC1r\mI@XXWADgdT
%h0<-/ESn#:&?\j,lQo1WjOY5oNR/!/EQ66r6u4_,f.*+nnE`#>,Z#gaj)=2UAR?aQ0nVe9?(P`ui'eDfS#Ul,dSu&C8UI)M/Y/'%
%gb+9g+rrM$,3P;Q=i$ZS94Ig>*p$`#ZKU#TDlW8So8E?$>R$WfDLpHLo$#+D1r?7e\a_#)/dhmu@?L_l>_>Fq0PkOeX4<%s`7>q#
%M%m7="h>#X+JFF[H$%u:p<[rL82BQpMXr\<jg?+jV1D[(ap/]/7D%PXl9$Z%9drUFM9BhKeKpn#&kQt37!g4YTL3]ZJTRJ[!@U.]
%L\(46$Ir-p'r6;Z.C`=Q%/G,3Lm-JP-3lT)imMDB$8fn4o#/slZd=`uhilBq&p5m[-*`8HXIs-i9eKR@-,a=BpDG0]%`&t/LUCI)
%+CD:5.'k]+6RgIH0hmZ(W'ckMf%%P9hZo>U:J8THI?+ljfkMM*"q7*!,k"u,S!h_u=O.1S1J(8["kUiUC/me'SEf8UcATt%<'RDf
%9u#i;`,Chih(WtXSH`BDLN=BlN1=KE$<EtOdEiT)?AEB_/Ui6$'7[U@#64^b0<iN@s-"pWf,M;r<UbMZf]YU1[=PS20d3Vs2:]Bp
%*7n_KMJTi.f?qO,/O7Nnm\E8CI["(8"dV4_G!0rKUM031XepHS0@[Ms[$?EceI7u;'>kqolq3R;&?("`14i[@hIR@TcESH3Ns-a8
%*W$fd0'q.Xd3aElIX"GnO\?$u5]&n%BgLHAA6A_\]?0o/5P2gFKonV6=HbI^b;efbk&CHu)3#o-;A)@;Cgs0*aU&.6Y[f^/9*qu$
%V0t@lYni[SVX_Z.8jHfRp%4tm(_MPVW[X,UQngt^F'<sfHjJ@NCVG9QF:=sTiM9,c^:$j94eNfil-UVD1GUb<XnCc'iOrLu.1FWc
%Dg>W_Y</1(,G@I^S<?SV`IcWZUe8P*X]orr<+oHKUR$P5hP,@bh?aXr[!Om1;@"R,q^oc#ISMQl%]N,YHH,LB_F[Y;O#+(2dl$M"
%Y*gQoB.(WZ9$%S=4qZUj^ibbIWV#E"lbp>r>bL2_G)6dX69-u8RF70hO-%m0f,R[f'0`[bMbSW>9&d81M-r=,;^t.!P:p&17UglD
%n'-4W<[Vp#W6&NV]I0_Od=C)eD,l:Hk-9$^IV'M25[un!FnNhdVg6A5E':3mN82l]=kCE29CVfCXb+.slY1:>Ps4/BMLG@K_Wt%-
%4lK+RHe&C,f]L(McSGWcZ-Qg7r[akqU&JKMWk?)TJM*VGJJukWjN2aI6C]Nub<i0<qNPfl44mI>-F9WrTN-$XG#Jd)8c1CT4Xq:c
%j`j7#+%"FcgscB^^TE7>>!+>$<(tH!nZ9q;?7[!oed3b><gStG'4f^edh)lK8&<c?pOW-/a(n/!\e[/\LJb%,DM@W8jG^$Nk-_!E
%e`;b?,=lng<7G<N\7<)3/=mVd[O;e/n+g-.@hsaT2AMb7kj(VQ;(oiC9A/?D^pmr.hOE^E;dY_\@uK^r3ctj!)`/67(<lGc3+Rek
%3:Ii"/7"\3:5bbQ88?CNHJm@r7;kneHG#har0R0>0jFPc]95+c?RL_`h%*&,Zu.-pZFur*_Q6*Diin$*("uM=.^t3E"/!Cs:!uO\
%MP>p#d'^L"h7To;(UoXtjo"fl<*!u3Hkb@q:kHnYCRkcjQUuGgWn#^X%_6T*4Hg7b-R3s(lj\k.URk(oj!\#2Gg-dcFq<tDGn`j!
%=A0K\78H/F_J&;;Sd+>ZK"DUSVHb/7d+X9B'/Bh+p?k8>W3fAP/B_Lp6nuL`X:0QPe3l.NXD"qjaubS7^V0qfE$UK2cU?EX.fbI,
%-ZRocTKKeMn]kO<p+<d'[M5?*('elQ,H:Rj_Ot#1`SkDC$*1dd87io!l5_#mT;K5/T&iu!,%NPHlFk*];9:d^oW1uKW@#AJMksVg
%+Qsb0Xu8`14,!=Y$M@LC/8VH8dnqgb(%NR+HYBMY&g#<)W*^ao+o0a("]lcf^OJRY:KBoB;C@:?pkJVmJ>I=J6NUH7*4Lh$#<[NH
%AXGGS7N_[D?#mMcOfX]13I+R/IEK/^]Y:&<PnOMSdAT5Q897HeN;0rF6^f2f+%iE9+eiP[<aE(@#,,YPcq[2%K_7X6#lq$h^9YY"
%S];4jPQGX&B,XAQ5m_!qql-9<4GIU/I"rpG;f?l%86e8'5MB:FnQDXDp*hK`.;^CreeNl9af*q@e/VqI7JRE95o!@G@&'lb'/M>m
%n'Si0]T(0am*n2B8($#]-&NQa2T8n'6Eq!lJ=7&ZGo7bh+k0r'7A6^##6hIk+H\3br&!#)rCZ@Jbq\g''BMbINnSSq&WJY`2H>rD
%d&3h*FIh?j?r^YTU!,tKN(0Pm]=dE-j?0A'7?m.75^hqHG]iJ:+^?VtjT:h_&8r,3"oX'n8j07j$Lt#gdn_Xh,s;fSlGq5+MN':m
%%i6,o_B"DdpNSMe5WAunF2NP>,W4gLMIma#bt-("]o2!E$hN\d#SmsHQPN:d[a:A8&pK$['f]s-rLts*Z4?`B.&7NT2N+ifJj]>j
%o^2is[;77mXFLegE"tR^Q:!:jG\rop3CkMoe$*4K[3;9@jF4gHN26Mu[O5VXDNAtO"p\\.H5EFh`F%+_l,(?dhhG:a:o$oIKk'Dt
%6O,8-4gb%X*\BFA-K;LYIe8&p-"NDLPD;:W*,#jZ:W<gteb>e>_oiX.koYs:M*J]s!CsV,?WQjc7$Xa0E=dgW5U7'?\gjLu%;)t^
%3=*%Eo4].qe%77b+[_0dgPWGbZl$@ca/t7N59Lc#\KWtbarab:bg:iXmXoLPm?X`K\4,L#+=Xcbb-58AL?/JWMh8t1!c?28+=o2_
%BT1&_'TcVb@q\/IIAt,jPY3Pe(MGQq%gGTl.Alh,?U<eCC]YDGp`fpT44sH'`#n>ce44T$NmRHtL?RW2h8eQM*dP_t>)4fmA>Z>r
%=H)[)>*,mW2+j536t=3k_d^E.U/$u%_EjASJ(tctWeJ,QF\uk`MqkSK<"<Z$5GH!*5\JX7QGL.WghFU"-N!RL?``H=RD+:h>SBY\
%+!%ZIFl+R=qcnR4m!rB&mbh>FM."6/d3ui1)s*=*VKK_J>n?>$?&raQ0"X%IIjUgT;73W-$f%TF<12hrR$!]cL[I@5n+$;A.l:?C
%=MF4%W`XDkZJO_$+N`6tm;N7BVA,)C6e+'Mf0.\VD6Eg%5XkF5hm"M1B3FO'ar<sW@dm_G.V#1/rY+\i5$tP9WR<@,)qc\t*XsXE
%]'l&knuP(Ji\,?bONkd?IsRPSOO_`72Eh47>sPbtF^kmEJu0IBH&;f]LT2WoJ="]Xb?@XT`4:0Z4Li(IpjH'7J4H<NSCIHU6H1.8
%N;@TuGPMIdM):pJ$2T[;R]m>fjgTu9YN[@/mnm0`>Ar@<j@CHCD/V;6UP/EPdAB9<JkG7m;EIKnqVZWYQkJuHQro,(U(T5'VqR/O
%;'\I%B8"F'Cn$O2[7"R9S!0^pPSjF2&kB>#!Ni[SV_dWO%Y:BNBu`2]KSaG!fhSRRk4I"554Y?p+7Wd_`P_osDl)+bYu7pF,FeoN
%-s,\C@]6,Y[f"O018'MdT"`^Rpb8$5K"\!l)fH<6O/`O".U&<APemK<;8:3qEU6'8^)U`U24l&\)UGBnCsB:AVM4Y=`<V_a#U6C>
%a2gA>5Z>/>V[k7C:8JpC+b4V$pB^kMr&c>p.sg$Z[Lj$e+-]9^"",7uHPt^NG%NsgrIf&!'PaW8U[<SPT`9Fin/;99g&-f0<po_N
%f_.KL+;]DJP!EsQAa!HT*upakd(]-]Zs[5B($^/JPXj4^R.KQNY\smd/>d[@f5TYS#YC'brEF4kCj8ojO1=Qce"WL[`[8QJOU^Z)
%[]HT_5sqK8bXQ&(PF^K&B>^LVMFd.u9DoX]qlg%uhL@\Gd!=H386I_j-"W#0,?=`L'ro<HFdmS*)7o"@!-.t>rqQ4r\Zr7"/QfHS
%m5s7-Qdd#O'%AOsCu596-B;S#Tan^1&_G%/=B_jM53SU:`e2TdQm66\4<Si#Do14QYhc*Yr5O@b@a&?\5])rMj46Oa;n1qa@+?Bb
%^%43smlV*0SVP^i(lr[HN6ZAJm!WW.F$C#+qj0rNFrgn!S``7Lk5eQKp/?.+pX)+%?#uQ6gs4qVgNdK"g:ARl$I=ELWO'#S*;Sn_
%b-`ONB04EoRF]Z)<+bM[mo=bhGppXPb4$^'f$+S;G>U\jZ=>-JU.?(LlWfaMO@m_9^@.deKrMa*"nUH@e:T6pWFAA']o2IF?7^hg
%/Un#:4bCnRGmEs;f_/;Zla5a#GShQAjq-N\$h&;9,`LhPpl)mglkBiBdp$2:f+3+Of+"u+bt_5%D'[l`.k]S(E0DuELQ#8tju`t\
%V,aXm)9FW!$aug5@X;KfHgGDMe93Z3S+.eEptIFNk5AHlkY23ibe:`*K<pt9r3E_-[l:h"EI5TM2r4it7<:hB+4Z4r8HgNGBHD=3
%]T18)7En=+<!'VDNsaq\8Y<57<.H7gm:u(57U"Fs.Y)m!k?.rKQ'1E@pG$=)gHf3OM:6Tq4@,sPZUW%AZ<^EN<>QAkf(/=E-WJ$3
%+PTJA)Ag(1fhSO\2(+YZeOd^ak<gPU`1C*ooI4l(8WN-EiYZO5&q!YD<+=$U<.KWfl!77RH,BPpq5F(?*'?65Cn`Z_&tghZYoe^S
%RmH>9o$DPY4\S+:0m*B#rDXio*\#Tu`n([-`.&0VZl%rfU7]RqgJ?p.oi&,b\kRK22aFo<f\NV(WAmJoeC/H(.W_*3n'-4=8;)5i
%="QLDlg$t5FW`e^+b#2`'A.jc17'H^*=iO&i_IE[#+#KULN6^,6"jA$25nIq^7a9K[EAVpkh`=Y@C,l2&"q[WE$s?-)JFM50itR#
%c*:/>2NN0*W-Z/E9QR?[E#0fdjP`&]]3?ZT_mnL3'_'W&G.P7?U:$?"@uZUWC<B6!$qTmF"Zs0@7?p6pj"!n!:u.OK?)EBt]4'$)
%P3/T!9pV#rR^`Lqdu>P(o%Gho[$K_!*H-<RrjJg*J1J,K!EV0$f7,DfD8[h7O;lrDQg_Z%dCjb(^P5pQ)%uW9jfp$([+_nr7/L\h
%!*T'T]cq,7ZZp=X]2kllY$bQPbk_f9,FONuCfiT1>VFmsXL#"4#@-.IRK;]?Q=Qg+<7.Y:2J_:.!Di#Q/FKA9:''ub"Ad'],&XS;
%6((]*-lqrJ&l/DhW0e@,d<-.Trj0.M[3/MrGUto]`:*g,G,&(2(-Kn?kc,/HpZ?2%1`*>kWH2uN9H9'n[$W*A65.t.*pOrcn0qXQ
%k`eUjG/8J!_gCe3iP%;ZC#l$ocqGgo>tA<3;rbTX"fom*D11su?ePZ<Gkk[YJQLepXhuclZE2d!$]KA3aD8?Pj6PM:(te1&'U!#!
%nn8i--2)j-&P[YCG\p!0a^H'4T_1%7:3u'P!#/H'EfJe-c4N"bfR8iL3@1.Te!@<$>'>(1=1P@H2/>2lJ);XPk:cCgX+ik=['JP<
%SZ!ktc*dL$Efm4BEp`P:69_271;r@&9h3#FKB&T4+akql]20kS$$=TXqZ`&&g:<n:S6\X1<2aEXgS2]PYIQuIHW/O`/(c*gN),)4
%`$(-k[(rGgWt1h"C\Wn1"<!3Oe#D<ddA7D<Ri\WF"1OAQ7od\:OCl[8NLgQnHa[bVVWF!bau@a.$:`-D\(,j]FNioBc,YC<IR+hp
%hgeqB#ABSa^SAK1cDN,fTLu2P+qQ&K!)9&kQ3[q'-uj<7X9P47_BJ7*qce2k*X:b="[N-A6onXQ#,R&6FNE/F8E)m[km84h5dGto
%kYlpLDrmDo6g^dg870Q4HBe$Y4mb!L8bd7C<Cl"^eT1n<e(2ucXd/>4CVit];dQR.rD7[j5e]\C%(SUqp=XuG1P^E%U!7DDF1Kf[
%Y7R$H9_dZPP*gg,&&5QH)\<Fl7%(D)4GG3+7A2=EiNbfUcCoe<1tdP]=Yd_q<u2jkImA"-hVu[Cb4l.7f<i2c`tOWmCYdCLoI-hN
%`rdBub5go)%99ekL*3:W6lVF,+N\$M"VWm9h#1ME,T\aQ7:*K7-7cAa^?"[/4HB5c;@KCQ;5(<R9cI;);/`55s/3&9C!e1bK(jil
%%s+.K%jfd'BYt`()SCj=S#4u"%J)8:K?aCB=%5ZV6IjV5NDEoH?6uFGR1YIjgB0RBYhtRhP3dk&Va<WR+V?QIZ?F8[Mlhro8H)/\
%MT9T_h;X6;oJm9H4L:KMQLnu!4uN[RU/"1QN#XK5L";3bFAglE9t4g,=1`!XK>@6>Ir/Qop$;r7J(3T.hE$rsH&UD[,[YBl2sS:h
%R6H[3*E7G>YR^dua4$Db!0K3YoFp]<:`c'F_Sm'^?Dkk(C$7PtfA.0Y+jJNX]?m:OCd#nl#Y(J_;=oIh-XRXkHZ1U"R7&p7j'!=n
%O1/-%n]W5lI@=`jUj/emq<<Ke]]9p[Z%^c@Hrq$"=Va9$9ZMg:,jDaDAr]<iQDlMsaB&e=3/&8HS>%9d_rKlsoA(nVLV'MfQ-YKU
%<a.km3*4"WSKc_G";SX1ksHVQHel#SS<h2Sc8\63CE.)u"s5Gj=L;KWFUCE<(&mlD<`q3H&:3%]=K'W50*+HFoYqrM.-]cRj"fcV
%\P`-fSLanaW*o2pZ/EP^Whb`gl%Q`Joq#]J_^>5M,Vj;dS5ZY=>;7Al[Xd5Z-prF_12$=eYBOkuHN[)EL;lm&_ODcsM.Hqa#h\2,
%f0mg?*:1`o(s)gi^2eR9YQku*Z!]sN6KIZj(72b*WMF>A[KhLW%XiT""D[H1UBfL+Aa'[k].JBkC1t!NA\#\Ej4r9<dt7LHb_O,$
%#=boYP^$^T9V$5&#fh64Gb?p0F\0;`5jX-CFO#K%P>04E+HX+A"<Cc'(6`,D8AP_.35!kRY3h00;uP>5m"W'A+(j,l?07[`-q4pi
%5\S8'+DCAjR/$&WnE43\!%.d/fs6Y?7;Hm#,6`-$R*Ans#qcn*s""^']>WA^Ceq!"Y%oRJrhNg8EXoL^6^?siNaVOZgVrmmc"shd
%5[o'Ig'kH=TdnQ]?s83=s)1`A4Y>(#bn@EI)qmG`GP8(=kXP@NWL,m-"r,fjd%'H,mW`/<Re1;'imb=u:NToq7m7;uCN+?akm?V,
%/NBfKoXl(40:+[R4!3:2nm<n>!c3Ki*WYDHYb9KDA#.4tD<5rf.k(e5TfIJ8Jo/T5LSZu?b,^6ma.<i68qtW4<@2O?-?e4JI"t!T
%&G!j57)\ZK&]u<#)*'CeLTO)l`)`+]fG<_q4Wq8;&_Bfo\T))R*>FHGUtCP_<bt2jMiHd";Q#`J)PX[hY0c-YfD?7g#8XDRbt2Yd
%,R[9RTl&%nqK[on-eP[9n@fU5a#;$-Oj`H5"ki-,OH!kR[4g1p&7#qV23.$m.JQ=Vj')aGQ>Au/,<"]'&;/Q\aun$=0em?7P:9_0
%7[:)(\['W)UTSN+@ou>8kb+gD4I3-X&D#ndE7;H=>6]/$FQTlL>JC[D<S>M(jTNq9aGf"@/^%_aG1iC&lcO'<T9B%/W%He^k,N&5
%;n,c`!+RJFs*o[D_X087;Yu/P:jmpUe>B8cc:)50VC*mk&%DYp_Q@L3g$ZjJ>E>InU!A5,hs?I<XdE+#O+P)`gGr]PGRSK0qm(#S
%]6r=GHABN@MG6+5_dd)QLM*F'_!UepqubM\VrnVP!PZT+m<0254gX`'4U*NK&s<pe0u/`9EiaQqd-;O<"n3AEA%d"[/_">L0'>E#
%[bU>X?t#(*H41K[O+DoN0u1Zmm,toc6+,mUF6)%U94)Z.qq?ht(b!lr#)^i=!/RZkquo"].K0C@3#hUYn/!KFIf[jG-!#+-f[-5D
%nUI</,H2$G@.g&&LNFBs6u!3a^,Fq(\>eMJ_dKLQGqQ?@\CT->St7#iOP[knG]Yd@nBJ4Ufi`Gg7n_@C%XB\Vk3\f;@\u(`(S7sP
%TqKam06eqHBQ^akH^H/kTo5eu.meXn[e9+sLW>r7S(?A`c6>5"(#fu"iVaDQm-\Sp5<T":kb]W$X#4\Z),F.Jj1QbQ0<5b^NTSl7
%nAXt5AIdU/jfOc@9@1>`eS"i+=X`uKRbC)*#MqaZYo:I4=>F\q<bQOA)g5P\]_aE39NbuFgKW"EdaM6BDe&Ho34_mV@pq&>NheCA
%!qkRokW-iQU)4n3o\Xs8o%YmV6>LHhGWpEZa%q7mrH6-[klmsgm<^encKf(!IdPO(8;r8KE[Om"'X0]Tn;9;JGk-dU:l-\t5e6-c
%s#[]>#L9<@5dWj$BOJ[,ig'^VUCXPKJ6Yi3QXPh'.H=a>PRF(2bnOF)[^UK+0mJ=^Z"OBhZZ4Gm8"Xr\bc-%nh<fi*OC9Si5'l'U
%R.!F?eKL"Flb%Aei:K47.T)Q8(l>nN$WTN?YMYBgFEDX>9uEHhqa.;-9Vo_3??m%m8^oOa8o2I16k*n%V._.FalBDE(o#K&!W&f$
%HDu5>K"S)W?')POIB=;YVLfg=,eCjU!AWs[p'<2e,[2g"<ZWN>n>r#c<5h#H>d[[r^;@Hp2&XGm+]E@q(&l6-A3e/B`:X9B).Wr3
%h)u"C13@u0_csClTfM?@m?2LI6Nml9L!l&[cj^jTXQW7Z7V9ChQR0h3KhLY;<Y)WTG)Sc4N_u$a%%qIk`0,C/Nqubeb^aT$?[J#l
%N$lD_pDIWU09Fm_O+ACa]cPX4%R2pSSi2Xu+k,$i%%3SGhG2\O9[?AM&7Xs&cDI!T&8D+g.VbRI6uXgdLY%/VYdm6^CdIF;)MUT"
%Yp%gK%X0):L8&_l]RZ=LmmuhE:<q=+YP$o9ohaSpQ(,iIQAul;oLhbTmPCYOjR2'*(GBdtFt^+Th%o"Ci$W[16`>VU6V3(b;B?Ml
%.,6&:4t$\/pJ?Bl5U^Y.>lH6YmKth6:dlfHlC9M;pm/0>)9Mog.<Kg7Mi7VDJe:$COA_bn6WiRU$*d;pRais&".6@g%k/=K6_P<r
%-j;tD^*]-`Y[hG7)K>uROlnFq68Pu8Sgd?)s8*Q\Yc/Pp6QtNi.!7m3+RWL/-n%-<gIOql+qf7rNJYV>0/W9'&._c3?AcA=;8>\R
%F>m&]e0Aqm^#5+=WtH+&@)seWg(guc_!PQfM"XZDLal"=-lt=e]d9apHgd,PH!C>[Q:jTu&l81;Ir?p9Pc,^!9!e[4T+,hXct1(2
%&a%CPRXh(XMLSB0LkBOHCcbTFURGj,KqtQ>"%RAVh+udjXQ*SA:U_u%cJ)9`(hE>0S`ITp+Y&@@k3#<u'tmaB1o%mSU_l;EKLHWP
%,Ua:)1)pD(QF_sb.)a<LWHJFQo9J%i"DT-UMGe($O,F*%KF@F[9kb:`pCs["(R.rS"RW(s2uZ:BLG?TLKnq2#+9CXLO/Oeg<E]_J
%Y8AQRX?ln>c5p,mF9-$+Zr!k76qEY.Mr?#ZdM="'[EF0U1-Y,+@h3T.:FU.I5n45[0-f=1NGjF9%//tSfDI9H'&G801iNpL([#dM
%#jju/$/7$BZA[<%Nn,t`/eL)KPOI'TLr*'=S3SJ3%#(&QH$Bg'T\A$M2m@XNE\$R0nkS)8AP-a[H,fU*H#=2qB]5834N^e6ck;X,
%_KN'!C5>^'Bm=kUAk5Ws&0/sLT:g&b?4G.*MTbE`[QNY@7'*%5-jFKTbPih:&[?pW(l.4`KO_h#>qJ4:6mPAm`*+Y8\o`8j#$#k[
%7RX?>i.-j`5so)rPoeSjMr"M>[2!8\.p0U0dT'olj/pjYM*l>730Q^)l@"*gA%];$]:i-AF7tW8I1t+mT2XYFK(>MF`U]a$9BB:[
%Z+O-1Z$%U\'hi8lrQL'!U%BJh[WIZ@Y"ro]Z=Rk+8gD9Wio_691R`T-f>2Upin=Sm,g%tEcA8ji4oe>)kkURa@e3sQjEoe7j'U]Y
%qtQLbkC<F#m@TG8IltJ.4Ij4-hk!"rs8MT]mk<!?n)&Qmnat`%%o;)sIK0-8oD(W6:EMd84TG3PrT3jmO+2TXT-<p+r56R9^\n%K
%n)+'ch/-KJ~>
%AI9_PrivateDataEnd
